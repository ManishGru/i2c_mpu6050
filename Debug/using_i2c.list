
using_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800fdb0  0800fdb0  0001fdb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010358  08010358  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08010358  08010358  00020358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010360  08010360  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010360  08010360  00020360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010364  08010364  00020364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08010368  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          000008b0  20000200  20000200  00030200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab0  20000ab0  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001662a  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a6f  00000000  00000000  0004685a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  0004a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  0004b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025050  00000000  00000000  0004c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018327  00000000  00000000  00071580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd0e1  00000000  00000000  000898a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156988  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006380  00000000  00000000  001569d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd94 	.word	0x0800fd94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800fd94 	.word	0x0800fd94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f001 fc2a 	bl	8002858 <HAL_Init>

  /* USER CODE BEGIN Init */
  currentTime = HAL_GetTick();
 8001004:	f001 fc8e 	bl	8002924 <HAL_GetTick>
 8001008:	ee07 0a90 	vmov	s15, r0
 800100c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001010:	4bc7      	ldr	r3, [pc, #796]	; (8001330 <main+0x338>)
 8001012:	edc3 7a00 	vstr	s15, [r3]
  gyroAngleX = 0;
 8001016:	4bc7      	ldr	r3, [pc, #796]	; (8001334 <main+0x33c>)
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
  gyroAngleY = 0;
 800101e:	4bc6      	ldr	r3, [pc, #792]	; (8001338 <main+0x340>)
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
  gyroAngleZ = 0;
 8001026:	4bc5      	ldr	r3, [pc, #788]	; (800133c <main+0x344>)
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
  roll = 0;
 800102e:	4bc4      	ldr	r3, [pc, #784]	; (8001340 <main+0x348>)
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
  pitch = 0 ;
 8001036:	4bc3      	ldr	r3, [pc, #780]	; (8001344 <main+0x34c>)
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
  yaw = 0;
 800103e:	4bc2      	ldr	r3, [pc, #776]	; (8001348 <main+0x350>)
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 fbb3 	bl	80017b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f000 fcdd 	bl	8001a08 <MX_GPIO_Init>
  MX_I2C1_Init();
 800104e:	f000 fc19 	bl	8001884 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001052:	f000 fc73 	bl	800193c <MX_I2S3_Init>
  MX_SPI1_Init();
 8001056:	f000 fca1 	bl	800199c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800105a:	f008 fde5 	bl	8009c28 <MX_USB_HOST_Init>
  MX_I2C3_Init();
 800105e:	f000 fc3f 	bl	80018e0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Mem_Write(&hi2c3, MPU_ADDR<<1, 0x6B, 1, 0x00, 1,50);//wakes up the mpu6050
 8001062:	2368      	movs	r3, #104	; 0x68
 8001064:	b29b      	uxth	r3, r3
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	b299      	uxth	r1, r3
 800106a:	2332      	movs	r3, #50	; 0x32
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2300      	movs	r3, #0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	226b      	movs	r2, #107	; 0x6b
 800107a:	48b4      	ldr	r0, [pc, #720]	; (800134c <main+0x354>)
 800107c:	f003 fc98 	bl	80049b0 <HAL_I2C_Mem_Write>
  calculate_IMU_error();
 8001080:	f000 fdc2 	bl	8001c08 <calculate_IMU_error>
  HAL_Delay(20);
 8001084:	2014      	movs	r0, #20
 8001086:	f001 fc59 	bl	800293c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800108a:	f008 fdf3 	bl	8009c74 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3B, 1, &tempval, 1, 50);
 800108e:	2368      	movs	r3, #104	; 0x68
 8001090:	b299      	uxth	r1, r3
 8001092:	2332      	movs	r3, #50	; 0x32
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	2301      	movs	r3, #1
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	4bad      	ldr	r3, [pc, #692]	; (8001350 <main+0x358>)
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	223b      	movs	r2, #59	; 0x3b
 80010a2:	48aa      	ldr	r0, [pc, #680]	; (800134c <main+0x354>)
 80010a4:	f003 fd7e 	bl	8004ba4 <HAL_I2C_Mem_Read>
    accx = tempval<<8;
 80010a8:	4ba9      	ldr	r3, [pc, #676]	; (8001350 <main+0x358>)
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4ba8      	ldr	r3, [pc, #672]	; (8001354 <main+0x35c>)
 80010b4:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3C, 1, &tempval, 1, 50);
 80010b6:	2368      	movs	r3, #104	; 0x68
 80010b8:	b299      	uxth	r1, r3
 80010ba:	2332      	movs	r3, #50	; 0x32
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2301      	movs	r3, #1
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	4ba3      	ldr	r3, [pc, #652]	; (8001350 <main+0x358>)
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	223c      	movs	r2, #60	; 0x3c
 80010ca:	48a0      	ldr	r0, [pc, #640]	; (800134c <main+0x354>)
 80010cc:	f003 fd6a 	bl	8004ba4 <HAL_I2C_Mem_Read>
    accx = accx|tempval;
 80010d0:	4ba0      	ldr	r3, [pc, #640]	; (8001354 <main+0x35c>)
 80010d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d6:	4b9e      	ldr	r3, [pc, #632]	; (8001350 <main+0x358>)
 80010d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b9c      	ldr	r3, [pc, #624]	; (8001354 <main+0x35c>)
 80010e2:	801a      	strh	r2, [r3, #0]
    accx = accx/16348;
 80010e4:	4b9b      	ldr	r3, [pc, #620]	; (8001354 <main+0x35c>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	4a9b      	ldr	r2, [pc, #620]	; (8001358 <main+0x360>)
 80010ec:	fb82 1203 	smull	r1, r2, r2, r3
 80010f0:	441a      	add	r2, r3
 80010f2:	1352      	asrs	r2, r2, #13
 80010f4:	17db      	asrs	r3, r3, #31
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4b96      	ldr	r3, [pc, #600]	; (8001354 <main+0x35c>)
 80010fc:	801a      	strh	r2, [r3, #0]


    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3D, 1, &tempval, 1, 50);
 80010fe:	2368      	movs	r3, #104	; 0x68
 8001100:	b299      	uxth	r1, r3
 8001102:	2332      	movs	r3, #50	; 0x32
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2301      	movs	r3, #1
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	4b91      	ldr	r3, [pc, #580]	; (8001350 <main+0x358>)
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	223d      	movs	r2, #61	; 0x3d
 8001112:	488e      	ldr	r0, [pc, #568]	; (800134c <main+0x354>)
 8001114:	f003 fd46 	bl	8004ba4 <HAL_I2C_Mem_Read>
    accy = tempval<<8;
 8001118:	4b8d      	ldr	r3, [pc, #564]	; (8001350 <main+0x358>)
 800111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b8e      	ldr	r3, [pc, #568]	; (800135c <main+0x364>)
 8001124:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3E, 1, &tempval, 1, 50);
 8001126:	2368      	movs	r3, #104	; 0x68
 8001128:	b299      	uxth	r1, r3
 800112a:	2332      	movs	r3, #50	; 0x32
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	4b87      	ldr	r3, [pc, #540]	; (8001350 <main+0x358>)
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	223e      	movs	r2, #62	; 0x3e
 800113a:	4884      	ldr	r0, [pc, #528]	; (800134c <main+0x354>)
 800113c:	f003 fd32 	bl	8004ba4 <HAL_I2C_Mem_Read>
    accy = accy|tempval;
 8001140:	4b86      	ldr	r3, [pc, #536]	; (800135c <main+0x364>)
 8001142:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001146:	4b82      	ldr	r3, [pc, #520]	; (8001350 <main+0x358>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b82      	ldr	r3, [pc, #520]	; (800135c <main+0x364>)
 8001152:	801a      	strh	r2, [r3, #0]
    accy = accy/16348;
 8001154:	4b81      	ldr	r3, [pc, #516]	; (800135c <main+0x364>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	4a7f      	ldr	r2, [pc, #508]	; (8001358 <main+0x360>)
 800115c:	fb82 1203 	smull	r1, r2, r2, r3
 8001160:	441a      	add	r2, r3
 8001162:	1352      	asrs	r2, r2, #13
 8001164:	17db      	asrs	r3, r3, #31
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b7c      	ldr	r3, [pc, #496]	; (800135c <main+0x364>)
 800116c:	801a      	strh	r2, [r3, #0]


    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3F, 1, &tempval, 1, 50);
 800116e:	2368      	movs	r3, #104	; 0x68
 8001170:	b299      	uxth	r1, r3
 8001172:	2332      	movs	r3, #50	; 0x32
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b75      	ldr	r3, [pc, #468]	; (8001350 <main+0x358>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	223f      	movs	r2, #63	; 0x3f
 8001182:	4872      	ldr	r0, [pc, #456]	; (800134c <main+0x354>)
 8001184:	f003 fd0e 	bl	8004ba4 <HAL_I2C_Mem_Read>
    accz = tempval<<8;
 8001188:	4b71      	ldr	r3, [pc, #452]	; (8001350 <main+0x358>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b73      	ldr	r3, [pc, #460]	; (8001360 <main+0x368>)
 8001194:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x40, 1, &tempval, 1, 50);
 8001196:	2368      	movs	r3, #104	; 0x68
 8001198:	b299      	uxth	r1, r3
 800119a:	2332      	movs	r3, #50	; 0x32
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	4b6b      	ldr	r3, [pc, #428]	; (8001350 <main+0x358>)
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	4868      	ldr	r0, [pc, #416]	; (800134c <main+0x354>)
 80011ac:	f003 fcfa 	bl	8004ba4 <HAL_I2C_Mem_Read>
    accz = accz|tempval;
 80011b0:	4b6b      	ldr	r3, [pc, #428]	; (8001360 <main+0x368>)
 80011b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011b6:	4b66      	ldr	r3, [pc, #408]	; (8001350 <main+0x358>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b67      	ldr	r3, [pc, #412]	; (8001360 <main+0x368>)
 80011c2:	801a      	strh	r2, [r3, #0]
    accz = accz/16348;
 80011c4:	4b66      	ldr	r3, [pc, #408]	; (8001360 <main+0x368>)
 80011c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ca:	4a63      	ldr	r2, [pc, #396]	; (8001358 <main+0x360>)
 80011cc:	fb82 1203 	smull	r1, r2, r2, r3
 80011d0:	441a      	add	r2, r3
 80011d2:	1352      	asrs	r2, r2, #13
 80011d4:	17db      	asrs	r3, r3, #31
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b61      	ldr	r3, [pc, #388]	; (8001360 <main+0x368>)
 80011dc:	801a      	strh	r2, [r3, #0]

    accAngleX = (atan(accy / sqrt(pow(accx, 2) + pow(accz, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
 80011de:	4b5f      	ldr	r3, [pc, #380]	; (800135c <main+0x364>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f99d 	bl	8000524 <__aeabi_i2d>
 80011ea:	4604      	mov	r4, r0
 80011ec:	460d      	mov	r5, r1
 80011ee:	4b59      	ldr	r3, [pc, #356]	; (8001354 <main+0x35c>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f995 	bl	8000524 <__aeabi_i2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001318 <main+0x320>
 8001202:	ec43 2b10 	vmov	d0, r2, r3
 8001206:	f00d fe85 	bl	800ef14 <pow>
 800120a:	ec59 8b10 	vmov	r8, r9, d0
 800120e:	4b54      	ldr	r3, [pc, #336]	; (8001360 <main+0x368>)
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f985 	bl	8000524 <__aeabi_i2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8001318 <main+0x320>
 8001222:	ec43 2b10 	vmov	d0, r2, r3
 8001226:	f00d fe75 	bl	800ef14 <pow>
 800122a:	ec53 2b10 	vmov	r2, r3, d0
 800122e:	4640      	mov	r0, r8
 8001230:	4649      	mov	r1, r9
 8001232:	f7ff f82b 	bl	800028c <__adddf3>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	ec43 2b17 	vmov	d7, r2, r3
 800123e:	eeb0 0a47 	vmov.f32	s0, s14
 8001242:	eef0 0a67 	vmov.f32	s1, s15
 8001246:	f00d fed5 	bl	800eff4 <sqrt>
 800124a:	ec53 2b10 	vmov	r2, r3, d0
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff fafb 	bl	800084c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	ec43 2b17 	vmov	d7, r2, r3
 800125e:	eeb0 0a47 	vmov.f32	s0, s14
 8001262:	eef0 0a67 	vmov.f32	s1, s15
 8001266:	f00d fcab 	bl	800ebc0 <atan>
 800126a:	ec51 0b10 	vmov	r0, r1, d0
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <main+0x36c>)
 8001274:	f7ff f9c0 	bl	80005f8 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	a327      	add	r3, pc, #156	; (adr r3, 8001320 <main+0x328>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff fae1 	bl	800084c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	a325      	add	r3, pc, #148	; (adr r3, 8001328 <main+0x330>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7fe fff6 	bl	8000288 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fca0 	bl	8000be8 <__aeabi_d2f>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <main+0x370>)
 80012ac:	6013      	str	r3, [r2, #0]
    accAngleY = (atan(-1 * accx / sqrt(pow(accy, 2) + pow(accz, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <main+0x35c>)
 80012b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b4:	425b      	negs	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f934 	bl	8000524 <__aeabi_i2d>
 80012bc:	4604      	mov	r4, r0
 80012be:	460d      	mov	r5, r1
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <main+0x364>)
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f92c 	bl	8000524 <__aeabi_i2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001318 <main+0x320>
 80012d4:	ec43 2b10 	vmov	d0, r2, r3
 80012d8:	f00d fe1c 	bl	800ef14 <pow>
 80012dc:	ec59 8b10 	vmov	r8, r9, d0
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <main+0x368>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f91c 	bl	8000524 <__aeabi_i2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001318 <main+0x320>
 80012f4:	ec43 2b10 	vmov	d0, r2, r3
 80012f8:	f00d fe0c 	bl	800ef14 <pow>
 80012fc:	ec53 2b10 	vmov	r2, r3, d0
 8001300:	4640      	mov	r0, r8
 8001302:	4649      	mov	r1, r9
 8001304:	f7fe ffc2 	bl	800028c <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	ec43 2b17 	vmov	d7, r2, r3
 8001310:	e02c      	b.n	800136c <main+0x374>
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	00000000 	.word	0x00000000
 800131c:	40000000 	.word	0x40000000
 8001320:	c083126f 	.word	0xc083126f
 8001324:	400921ca 	.word	0x400921ca
 8001328:	28f5c28f 	.word	0x28f5c28f
 800132c:	3fe28f5c 	.word	0x3fe28f5c
 8001330:	200003ac 	.word	0x200003ac
 8001334:	2000037c 	.word	0x2000037c
 8001338:	20000380 	.word	0x20000380
 800133c:	20000384 	.word	0x20000384
 8001340:	20000388 	.word	0x20000388
 8001344:	2000038c 	.word	0x2000038c
 8001348:	20000390 	.word	0x20000390
 800134c:	20000270 	.word	0x20000270
 8001350:	2000036a 	.word	0x2000036a
 8001354:	20000364 	.word	0x20000364
 8001358:	80482897 	.word	0x80482897
 800135c:	20000366 	.word	0x20000366
 8001360:	20000368 	.word	0x20000368
 8001364:	40668000 	.word	0x40668000
 8001368:	20000374 	.word	0x20000374
 800136c:	eeb0 0a47 	vmov.f32	s0, s14
 8001370:	eef0 0a67 	vmov.f32	s1, s15
 8001374:	f00d fe3e 	bl	800eff4 <sqrt>
 8001378:	ec53 2b10 	vmov	r2, r3, d0
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7ff fa64 	bl	800084c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	ec43 2b17 	vmov	d7, r2, r3
 800138c:	eeb0 0a47 	vmov.f32	s0, s14
 8001390:	eef0 0a67 	vmov.f32	s1, s15
 8001394:	f00d fc14 	bl	800ebc0 <atan>
 8001398:	ec51 0b10 	vmov	r0, r1, d0
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4bbb      	ldr	r3, [pc, #748]	; (8001690 <main+0x698>)
 80013a2:	f7ff f929 	bl	80005f8 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	a3ae      	add	r3, pc, #696	; (adr r3, 8001668 <main+0x670>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa4a 	bl	800084c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	a3ab      	add	r3, pc, #684	; (adr r3, 8001670 <main+0x678>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7fe ff61 	bl	800028c <__adddf3>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fc09 	bl	8000be8 <__aeabi_d2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4aae      	ldr	r2, [pc, #696]	; (8001694 <main+0x69c>)
 80013da:	6013      	str	r3, [r2, #0]

    previousTime = currentTime;
 80013dc:	4bae      	ldr	r3, [pc, #696]	; (8001698 <main+0x6a0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4aae      	ldr	r2, [pc, #696]	; (800169c <main+0x6a4>)
 80013e2:	6013      	str	r3, [r2, #0]
    currentTime = HAL_GetTick();
 80013e4:	f001 fa9e 	bl	8002924 <HAL_GetTick>
 80013e8:	ee07 0a90 	vmov	s15, r0
 80013ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f0:	4ba9      	ldr	r3, [pc, #676]	; (8001698 <main+0x6a0>)
 80013f2:	edc3 7a00 	vstr	s15, [r3]
    elapsedTime = (currentTime - previousTime)/1000;
 80013f6:	4ba8      	ldr	r3, [pc, #672]	; (8001698 <main+0x6a0>)
 80013f8:	ed93 7a00 	vldr	s14, [r3]
 80013fc:	4ba7      	ldr	r3, [pc, #668]	; (800169c <main+0x6a4>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001406:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80016a0 <main+0x6a8>
 800140a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140e:	4ba5      	ldr	r3, [pc, #660]	; (80016a4 <main+0x6ac>)
 8001410:	edc3 7a00 	vstr	s15, [r3]

    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x43, 1, &tempval, 1, 50);
 8001414:	2368      	movs	r3, #104	; 0x68
 8001416:	b299      	uxth	r1, r3
 8001418:	2332      	movs	r3, #50	; 0x32
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	4ba1      	ldr	r3, [pc, #644]	; (80016a8 <main+0x6b0>)
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	2243      	movs	r2, #67	; 0x43
 8001428:	48a0      	ldr	r0, [pc, #640]	; (80016ac <main+0x6b4>)
 800142a:	f003 fbbb 	bl	8004ba4 <HAL_I2C_Mem_Read>
    gyrox = tempval<<8;
 800142e:	4b9e      	ldr	r3, [pc, #632]	; (80016a8 <main+0x6b0>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	4b9d      	ldr	r3, [pc, #628]	; (80016b0 <main+0x6b8>)
 800143a:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x44, 1, &tempval, 1, 50);
 800143c:	2368      	movs	r3, #104	; 0x68
 800143e:	b299      	uxth	r1, r3
 8001440:	2332      	movs	r3, #50	; 0x32
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	4b97      	ldr	r3, [pc, #604]	; (80016a8 <main+0x6b0>)
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	2244      	movs	r2, #68	; 0x44
 8001450:	4896      	ldr	r0, [pc, #600]	; (80016ac <main+0x6b4>)
 8001452:	f003 fba7 	bl	8004ba4 <HAL_I2C_Mem_Read>
    gyrox = gyrox|tempval;
 8001456:	4b96      	ldr	r3, [pc, #600]	; (80016b0 <main+0x6b8>)
 8001458:	f9b3 2000 	ldrsh.w	r2, [r3]
 800145c:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <main+0x6b0>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	4313      	orrs	r3, r2
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <main+0x6b8>)
 8001468:	801a      	strh	r2, [r3, #0]


    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x45, 1, &tempval, 1, 50);
 800146a:	2368      	movs	r3, #104	; 0x68
 800146c:	b299      	uxth	r1, r3
 800146e:	2332      	movs	r3, #50	; 0x32
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2301      	movs	r3, #1
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <main+0x6b0>)
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	2245      	movs	r2, #69	; 0x45
 800147e:	488b      	ldr	r0, [pc, #556]	; (80016ac <main+0x6b4>)
 8001480:	f003 fb90 	bl	8004ba4 <HAL_I2C_Mem_Read>
    gyroy = tempval<<8;
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <main+0x6b0>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b89      	ldr	r3, [pc, #548]	; (80016b4 <main+0x6bc>)
 8001490:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x46, 1, &tempval, 1, 50);
 8001492:	2368      	movs	r3, #104	; 0x68
 8001494:	b299      	uxth	r1, r3
 8001496:	2332      	movs	r3, #50	; 0x32
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2301      	movs	r3, #1
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <main+0x6b0>)
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	2246      	movs	r2, #70	; 0x46
 80014a6:	4881      	ldr	r0, [pc, #516]	; (80016ac <main+0x6b4>)
 80014a8:	f003 fb7c 	bl	8004ba4 <HAL_I2C_Mem_Read>
    gyroy = gyroy|tempval;
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <main+0x6bc>)
 80014ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <main+0x6b0>)
 80014b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <main+0x6bc>)
 80014be:	801a      	strh	r2, [r3, #0]


    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x47, 1, &tempval, 1, 50);
 80014c0:	2368      	movs	r3, #104	; 0x68
 80014c2:	b299      	uxth	r1, r3
 80014c4:	2332      	movs	r3, #50	; 0x32
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <main+0x6b0>)
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	2247      	movs	r2, #71	; 0x47
 80014d4:	4875      	ldr	r0, [pc, #468]	; (80016ac <main+0x6b4>)
 80014d6:	f003 fb65 	bl	8004ba4 <HAL_I2C_Mem_Read>
    gyroz = tempval<<8;
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <main+0x6b0>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <main+0x6c0>)
 80014e6:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x48, 1, &tempval, 1, 50);
 80014e8:	2368      	movs	r3, #104	; 0x68
 80014ea:	b299      	uxth	r1, r3
 80014ec:	2332      	movs	r3, #50	; 0x32
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	2301      	movs	r3, #1
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <main+0x6b0>)
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	2248      	movs	r2, #72	; 0x48
 80014fc:	486b      	ldr	r0, [pc, #428]	; (80016ac <main+0x6b4>)
 80014fe:	f003 fb51 	bl	8004ba4 <HAL_I2C_Mem_Read>
    gyroz = gyroz|tempval;
 8001502:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <main+0x6c0>)
 8001504:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001508:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <main+0x6b0>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	4313      	orrs	r3, r2
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <main+0x6c0>)
 8001514:	801a      	strh	r2, [r3, #0]

    gyrox = gyrox/131;
 8001516:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <main+0x6b8>)
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	4a67      	ldr	r2, [pc, #412]	; (80016bc <main+0x6c4>)
 800151e:	fb82 1203 	smull	r1, r2, r2, r3
 8001522:	1152      	asrs	r2, r2, #5
 8001524:	17db      	asrs	r3, r3, #31
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <main+0x6b8>)
 800152c:	801a      	strh	r2, [r3, #0]
    gyroy = gyroy/131;
 800152e:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <main+0x6bc>)
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	4a61      	ldr	r2, [pc, #388]	; (80016bc <main+0x6c4>)
 8001536:	fb82 1203 	smull	r1, r2, r2, r3
 800153a:	1152      	asrs	r2, r2, #5
 800153c:	17db      	asrs	r3, r3, #31
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <main+0x6bc>)
 8001544:	801a      	strh	r2, [r3, #0]
    gyroz = gyroz/131;
 8001546:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <main+0x6c0>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	4a5b      	ldr	r2, [pc, #364]	; (80016bc <main+0x6c4>)
 800154e:	fb82 1203 	smull	r1, r2, r2, r3
 8001552:	1152      	asrs	r2, r2, #5
 8001554:	17db      	asrs	r3, r3, #31
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	b21a      	sxth	r2, r3
 800155a:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <main+0x6c0>)
 800155c:	801a      	strh	r2, [r3, #0]

    // Correct the outputs with the calculated error values
    gyrox = gyrox + 0.56; // GyroErrorX ~(-0.56)
 800155e:	4b54      	ldr	r3, [pc, #336]	; (80016b0 <main+0x6b8>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffdd 	bl	8000524 <__aeabi_i2d>
 800156a:	a343      	add	r3, pc, #268	; (adr r3, 8001678 <main+0x680>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7fe fe8c 	bl	800028c <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff faec 	bl	8000b58 <__aeabi_d2iz>
 8001580:	4603      	mov	r3, r0
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <main+0x6b8>)
 8001586:	801a      	strh	r2, [r3, #0]
    gyroy = gyroy - 2; // GyroErrorY ~(2)
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <main+0x6bc>)
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b02      	subs	r3, #2
 8001592:	b29b      	uxth	r3, r3
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <main+0x6bc>)
 8001598:	801a      	strh	r2, [r3, #0]
    gyroz = gyroz + 0.79; // GyroErrorZ ~ (-0.8)
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <main+0x6c0>)
 800159c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffbf 	bl	8000524 <__aeabi_i2d>
 80015a6:	a336      	add	r3, pc, #216	; (adr r3, 8001680 <main+0x688>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe fe6e 	bl	800028c <__adddf3>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff face 	bl	8000b58 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	b21a      	sxth	r2, r3
 80015c0:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <main+0x6c0>)
 80015c2:	801a      	strh	r2, [r3, #0]

//    Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
    gyroAngleX = gyroAngleX + gyrox * elapsedTime; // deg/s * s = deg
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <main+0x6b8>)
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <main+0x6ac>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <main+0x6c8>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <main+0x6c8>)
 80015e8:	edc3 7a00 	vstr	s15, [r3]
    gyroAngleY = gyroAngleY + gyroy * elapsedTime;
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <main+0x6bc>)
 80015ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <main+0x6ac>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <main+0x6cc>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <main+0x6cc>)
 8001610:	edc3 7a00 	vstr	s15, [r3]
    yaw =  yaw + gyroz * elapsedTime;
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <main+0x6c0>)
 8001616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <main+0x6ac>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <main+0x6d0>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <main+0x6d0>)
 8001638:	edc3 7a00 	vstr	s15, [r3]

    // Complementary filter - combine acceleromter and gyro angle values
    roll = 0.96 * gyroAngleX + 0.04 * accAngleX;
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <main+0x6c8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff81 	bl	8000548 <__aeabi_f2d>
 8001646:	a310      	add	r3, pc, #64	; (adr r3, 8001688 <main+0x690>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe ffd4 	bl	80005f8 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <main+0x6d4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	e035      	b.n	80016d0 <main+0x6d8>
 8001664:	f3af 8000 	nop.w
 8001668:	c083126f 	.word	0xc083126f
 800166c:	400921ca 	.word	0x400921ca
 8001670:	147ae148 	.word	0x147ae148
 8001674:	3ff947ae 	.word	0x3ff947ae
 8001678:	1eb851ec 	.word	0x1eb851ec
 800167c:	3fe1eb85 	.word	0x3fe1eb85
 8001680:	147ae148 	.word	0x147ae148
 8001684:	3fe947ae 	.word	0x3fe947ae
 8001688:	eb851eb8 	.word	0xeb851eb8
 800168c:	3feeb851 	.word	0x3feeb851
 8001690:	40668000 	.word	0x40668000
 8001694:	20000378 	.word	0x20000378
 8001698:	200003ac 	.word	0x200003ac
 800169c:	200003b0 	.word	0x200003b0
 80016a0:	447a0000 	.word	0x447a0000
 80016a4:	200003a8 	.word	0x200003a8
 80016a8:	2000036a 	.word	0x2000036a
 80016ac:	20000270 	.word	0x20000270
 80016b0:	2000036c 	.word	0x2000036c
 80016b4:	2000036e 	.word	0x2000036e
 80016b8:	20000370 	.word	0x20000370
 80016bc:	3e88cb3d 	.word	0x3e88cb3d
 80016c0:	2000037c 	.word	0x2000037c
 80016c4:	20000380 	.word	0x20000380
 80016c8:	20000390 	.word	0x20000390
 80016cc:	20000374 	.word	0x20000374
 80016d0:	a32f      	add	r3, pc, #188	; (adr r3, 8001790 <main+0x798>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7fe ff8f 	bl	80005f8 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7fe fdd3 	bl	800028c <__adddf3>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff fa7b 	bl	8000be8 <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a28      	ldr	r2, [pc, #160]	; (8001798 <main+0x7a0>)
 80016f6:	6013      	str	r3, [r2, #0]
    pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <main+0x7a4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff23 	bl	8000548 <__aeabi_f2d>
 8001702:	a321      	add	r3, pc, #132	; (adr r3, 8001788 <main+0x790>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe ff76 	bl	80005f8 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4614      	mov	r4, r2
 8001712:	461d      	mov	r5, r3
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <main+0x7a8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff15 	bl	8000548 <__aeabi_f2d>
 800171e:	a31c      	add	r3, pc, #112	; (adr r3, 8001790 <main+0x798>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff68 	bl	80005f8 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7fe fdac 	bl	800028c <__adddf3>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa54 	bl	8000be8 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <main+0x7ac>)
 8001744:	6013      	str	r3, [r2, #0]

    // print values in the serial monitor
    printf("roll:%f / pitch:%f / yaw:%f",roll,pitch,yaw);
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <main+0x7a0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	4680      	mov	r8, r0
 8001752:	4689      	mov	r9, r1
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <main+0x7ac>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_f2d>
 800175e:	4604      	mov	r4, r0
 8001760:	460d      	mov	r5, r1
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <main+0x7b0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001774:	e9cd 4500 	strd	r4, r5, [sp]
 8001778:	4642      	mov	r2, r8
 800177a:	464b      	mov	r3, r9
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <main+0x7b4>)
 800177e:	f009 fcf7 	bl	800b170 <iprintf>
    MX_USB_HOST_Process();
 8001782:	e482      	b.n	800108a <main+0x92>
 8001784:	f3af 8000 	nop.w
 8001788:	eb851eb8 	.word	0xeb851eb8
 800178c:	3feeb851 	.word	0x3feeb851
 8001790:	47ae147b 	.word	0x47ae147b
 8001794:	3fa47ae1 	.word	0x3fa47ae1
 8001798:	20000388 	.word	0x20000388
 800179c:	20000380 	.word	0x20000380
 80017a0:	20000378 	.word	0x20000378
 80017a4:	2000038c 	.word	0x2000038c
 80017a8:	20000390 	.word	0x20000390
 80017ac:	0800fdb0 	.word	0x0800fdb0

080017b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	; 0x50
 80017b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	2230      	movs	r2, #48	; 0x30
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f008 fd74 	bl	800a2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <SystemClock_Config+0xcc>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <SystemClock_Config+0xcc>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <SystemClock_Config+0xcc>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <SystemClock_Config+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <SystemClock_Config+0xd0>)
 80017fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <SystemClock_Config+0xd0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800180c:	2301      	movs	r3, #1
 800180e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001816:	2302      	movs	r3, #2
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800181a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001820:	2308      	movs	r3, #8
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001824:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001828:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182a:	2302      	movs	r3, #2
 800182c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800182e:	2307      	movs	r3, #7
 8001830:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fbd6 	bl	8005fe8 <HAL_RCC_OscConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001842:	f000 fd07 	bl	8002254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001846:	230f      	movs	r3, #15
 8001848:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184a:	2302      	movs	r3, #2
 800184c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001852:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	2105      	movs	r1, #5
 8001864:	4618      	mov	r0, r3
 8001866:	f004 fe37 	bl	80064d8 <HAL_RCC_ClockConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001870:	f000 fcf0 	bl	8002254 <Error_Handler>
  }
}
 8001874:	bf00      	nop
 8001876:	3750      	adds	r7, #80	; 0x50
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x50>)
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <MX_I2C1_Init+0x54>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_I2C1_Init+0x58>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018c2:	f002 ff31 	bl	8004728 <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f000 fcc2 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000021c 	.word	0x2000021c
 80018d8:	40005400 	.word	0x40005400
 80018dc:	000186a0 	.word	0x000186a0

080018e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_I2C3_Init+0x50>)
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <MX_I2C3_Init+0x54>)
 80018e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_I2C3_Init+0x50>)
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <MX_I2C3_Init+0x58>)
 80018ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_I2C3_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_I2C3_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_I2C3_Init+0x50>)
 80018fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001902:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <MX_I2C3_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_I2C3_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <MX_I2C3_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_I2C3_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_I2C3_Init+0x50>)
 800191e:	f002 ff03 	bl	8004728 <HAL_I2C_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001928:	f000 fc94 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000270 	.word	0x20000270
 8001934:	40005c00 	.word	0x40005c00
 8001938:	000186a0 	.word	0x000186a0

0800193c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <MX_I2S3_Init+0x54>)
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <MX_I2S3_Init+0x58>)
 8001944:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_I2S3_Init+0x54>)
 8001948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <MX_I2S3_Init+0x54>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_I2S3_Init+0x54>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <MX_I2S3_Init+0x54>)
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_I2S3_Init+0x54>)
 8001964:	4a0c      	ldr	r2, [pc, #48]	; (8001998 <MX_I2S3_Init+0x5c>)
 8001966:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_I2S3_Init+0x54>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_I2S3_Init+0x54>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_I2S3_Init+0x54>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_I2S3_Init+0x54>)
 800197c:	f003 fe94 	bl	80056a8 <HAL_I2S_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001986:	f000 fc65 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002c4 	.word	0x200002c4
 8001994:	40003c00 	.word	0x40003c00
 8001998:	00017700 	.word	0x00017700

0800199c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <MX_SPI1_Init+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019e8:	220a      	movs	r2, #10
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019ee:	f005 f8bf 	bl	8006b70 <HAL_SPI_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019f8:	f000 fc2c 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000030c 	.word	0x2000030c
 8001a04:	40013000 	.word	0x40013000

08001a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a71      	ldr	r2, [pc, #452]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	4b6b      	ldr	r3, [pc, #428]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a6a      	ldr	r2, [pc, #424]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b68      	ldr	r3, [pc, #416]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b64      	ldr	r3, [pc, #400]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a63      	ldr	r2, [pc, #396]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b61      	ldr	r3, [pc, #388]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a55      	ldr	r2, [pc, #340]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <MX_GPIO_Init+0x1e4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2108      	movs	r1, #8
 8001aca:	4849      	ldr	r0, [pc, #292]	; (8001bf0 <MX_GPIO_Init+0x1e8>)
 8001acc:	f001 fa08 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4847      	ldr	r0, [pc, #284]	; (8001bf4 <MX_GPIO_Init+0x1ec>)
 8001ad6:	f001 fa03 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ada:	2200      	movs	r2, #0
 8001adc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001ae0:	4845      	ldr	r0, [pc, #276]	; (8001bf8 <MX_GPIO_Init+0x1f0>)
 8001ae2:	f001 f9fd 	bl	8002ee0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	483c      	ldr	r0, [pc, #240]	; (8001bf0 <MX_GPIO_Init+0x1e8>)
 8001afe:	f001 f853 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b02:	2301      	movs	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4836      	ldr	r0, [pc, #216]	; (8001bf4 <MX_GPIO_Init+0x1ec>)
 8001b1a:	f001 f845 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	482e      	ldr	r0, [pc, #184]	; (8001bf4 <MX_GPIO_Init+0x1ec>)
 8001b3a:	f001 f835 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	482a      	ldr	r0, [pc, #168]	; (8001bfc <MX_GPIO_Init+0x1f4>)
 8001b54:	f001 f828 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4825      	ldr	r0, [pc, #148]	; (8001c00 <MX_GPIO_Init+0x1f8>)
 8001b6c:	f001 f81c 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b82:	2305      	movs	r3, #5
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_GPIO_Init+0x1f8>)
 8001b8e:	f001 f80b 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b92:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001b96:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <MX_GPIO_Init+0x1f0>)
 8001bac:	f000 fffc 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <MX_GPIO_Init+0x1f0>)
 8001bc4:	f000 fff0 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bcc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <MX_GPIO_Init+0x1e8>)
 8001bde:	f000 ffe3 	bl	8002ba8 <HAL_GPIO_Init>

}
 8001be2:	bf00      	nop
 8001be4:	3730      	adds	r7, #48	; 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	00000000 	.word	0x00000000

08001c08 <calculate_IMU_error>:

/* USER CODE BEGIN 4 */
void calculate_IMU_error(){
 8001c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af04      	add	r7, sp, #16
	AccErrorX = 0;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <calculate_IMU_error+0x34>)
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
	AccErrorY = 0;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <calculate_IMU_error+0x38>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	GyroErrorX = 0;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <calculate_IMU_error+0x3c>)
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
	GyroErrorY = 0;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <calculate_IMU_error+0x40>)
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
	GyroErrorZ = 0;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <calculate_IMU_error+0x44>)
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
	while (c<200){
 8001c38:	e169      	b.n	8001f0e <calculate_IMU_error+0x306>
 8001c3a:	bf00      	nop
 8001c3c:	20000394 	.word	0x20000394
 8001c40:	20000398 	.word	0x20000398
 8001c44:	2000039c 	.word	0x2000039c
 8001c48:	200003a0 	.word	0x200003a0
 8001c4c:	200003a4 	.word	0x200003a4
		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3B, 1, &tempval, 1, 50);
 8001c50:	2368      	movs	r3, #104	; 0x68
 8001c52:	b299      	uxth	r1, r3
 8001c54:	2332      	movs	r3, #50	; 0x32
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	4bbe      	ldr	r3, [pc, #760]	; (8001f58 <calculate_IMU_error+0x350>)
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2301      	movs	r3, #1
 8001c62:	223b      	movs	r2, #59	; 0x3b
 8001c64:	48bd      	ldr	r0, [pc, #756]	; (8001f5c <calculate_IMU_error+0x354>)
 8001c66:	f002 ff9d 	bl	8004ba4 <HAL_I2C_Mem_Read>
		accx = tempval<<8;
 8001c6a:	4bbb      	ldr	r3, [pc, #748]	; (8001f58 <calculate_IMU_error+0x350>)
 8001c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	4bba      	ldr	r3, [pc, #744]	; (8001f60 <calculate_IMU_error+0x358>)
 8001c76:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3C, 1, &tempval, 1, 50);
 8001c78:	2368      	movs	r3, #104	; 0x68
 8001c7a:	b299      	uxth	r1, r3
 8001c7c:	2332      	movs	r3, #50	; 0x32
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2301      	movs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	4bb4      	ldr	r3, [pc, #720]	; (8001f58 <calculate_IMU_error+0x350>)
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	223c      	movs	r2, #60	; 0x3c
 8001c8c:	48b3      	ldr	r0, [pc, #716]	; (8001f5c <calculate_IMU_error+0x354>)
 8001c8e:	f002 ff89 	bl	8004ba4 <HAL_I2C_Mem_Read>
		accx = accx|tempval;
 8001c92:	4bb3      	ldr	r3, [pc, #716]	; (8001f60 <calculate_IMU_error+0x358>)
 8001c94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c98:	4baf      	ldr	r3, [pc, #700]	; (8001f58 <calculate_IMU_error+0x350>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	4baf      	ldr	r3, [pc, #700]	; (8001f60 <calculate_IMU_error+0x358>)
 8001ca4:	801a      	strh	r2, [r3, #0]


		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3D, 1, &tempval, 1, 50);
 8001ca6:	2368      	movs	r3, #104	; 0x68
 8001ca8:	b299      	uxth	r1, r3
 8001caa:	2332      	movs	r3, #50	; 0x32
 8001cac:	9302      	str	r3, [sp, #8]
 8001cae:	2301      	movs	r3, #1
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	4ba9      	ldr	r3, [pc, #676]	; (8001f58 <calculate_IMU_error+0x350>)
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	223d      	movs	r2, #61	; 0x3d
 8001cba:	48a8      	ldr	r0, [pc, #672]	; (8001f5c <calculate_IMU_error+0x354>)
 8001cbc:	f002 ff72 	bl	8004ba4 <HAL_I2C_Mem_Read>
		accy = tempval<<8;
 8001cc0:	4ba5      	ldr	r3, [pc, #660]	; (8001f58 <calculate_IMU_error+0x350>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	4ba6      	ldr	r3, [pc, #664]	; (8001f64 <calculate_IMU_error+0x35c>)
 8001ccc:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3E, 1, &tempval, 1, 50);
 8001cce:	2368      	movs	r3, #104	; 0x68
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	2332      	movs	r3, #50	; 0x32
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	4b9f      	ldr	r3, [pc, #636]	; (8001f58 <calculate_IMU_error+0x350>)
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	223e      	movs	r2, #62	; 0x3e
 8001ce2:	489e      	ldr	r0, [pc, #632]	; (8001f5c <calculate_IMU_error+0x354>)
 8001ce4:	f002 ff5e 	bl	8004ba4 <HAL_I2C_Mem_Read>
		accy = accy|tempval;
 8001ce8:	4b9e      	ldr	r3, [pc, #632]	; (8001f64 <calculate_IMU_error+0x35c>)
 8001cea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cee:	4b9a      	ldr	r3, [pc, #616]	; (8001f58 <calculate_IMU_error+0x350>)
 8001cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	4b9a      	ldr	r3, [pc, #616]	; (8001f64 <calculate_IMU_error+0x35c>)
 8001cfa:	801a      	strh	r2, [r3, #0]


		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x3F, 1, &tempval, 1, 50);
 8001cfc:	2368      	movs	r3, #104	; 0x68
 8001cfe:	b299      	uxth	r1, r3
 8001d00:	2332      	movs	r3, #50	; 0x32
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	2301      	movs	r3, #1
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	4b93      	ldr	r3, [pc, #588]	; (8001f58 <calculate_IMU_error+0x350>)
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	223f      	movs	r2, #63	; 0x3f
 8001d10:	4892      	ldr	r0, [pc, #584]	; (8001f5c <calculate_IMU_error+0x354>)
 8001d12:	f002 ff47 	bl	8004ba4 <HAL_I2C_Mem_Read>
		accz = tempval<<8;
 8001d16:	4b90      	ldr	r3, [pc, #576]	; (8001f58 <calculate_IMU_error+0x350>)
 8001d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	4b91      	ldr	r3, [pc, #580]	; (8001f68 <calculate_IMU_error+0x360>)
 8001d22:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x40, 1, &tempval, 1, 50);
 8001d24:	2368      	movs	r3, #104	; 0x68
 8001d26:	b299      	uxth	r1, r3
 8001d28:	2332      	movs	r3, #50	; 0x32
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <calculate_IMU_error+0x350>)
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2301      	movs	r3, #1
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	4888      	ldr	r0, [pc, #544]	; (8001f5c <calculate_IMU_error+0x354>)
 8001d3a:	f002 ff33 	bl	8004ba4 <HAL_I2C_Mem_Read>
		accz = accz|tempval;
 8001d3e:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <calculate_IMU_error+0x360>)
 8001d40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <calculate_IMU_error+0x350>)
 8001d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	4b86      	ldr	r3, [pc, #536]	; (8001f68 <calculate_IMU_error+0x360>)
 8001d50:	801a      	strh	r2, [r3, #0]

		AccErrorX = AccErrorX + ((atan((accy) / sqrt(pow((accx), 2) + pow((accz), 2))) * 180 / PI));
 8001d52:	4b86      	ldr	r3, [pc, #536]	; (8001f6c <calculate_IMU_error+0x364>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbf6 	bl	8000548 <__aeabi_f2d>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	460d      	mov	r5, r1
 8001d60:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <calculate_IMU_error+0x35c>)
 8001d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbdc 	bl	8000524 <__aeabi_i2d>
 8001d6c:	4680      	mov	r8, r0
 8001d6e:	4689      	mov	r9, r1
 8001d70:	4b7b      	ldr	r3, [pc, #492]	; (8001f60 <calculate_IMU_error+0x358>)
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbd4 	bl	8000524 <__aeabi_i2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001f48 <calculate_IMU_error+0x340>
 8001d84:	ec43 2b10 	vmov	d0, r2, r3
 8001d88:	f00d f8c4 	bl	800ef14 <pow>
 8001d8c:	ec5b ab10 	vmov	sl, fp, d0
 8001d90:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <calculate_IMU_error+0x360>)
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbc4 	bl	8000524 <__aeabi_i2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8001f48 <calculate_IMU_error+0x340>
 8001da4:	ec43 2b10 	vmov	d0, r2, r3
 8001da8:	f00d f8b4 	bl	800ef14 <pow>
 8001dac:	ec53 2b10 	vmov	r2, r3, d0
 8001db0:	4650      	mov	r0, sl
 8001db2:	4659      	mov	r1, fp
 8001db4:	f7fe fa6a 	bl	800028c <__adddf3>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	ec43 2b17 	vmov	d7, r2, r3
 8001dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc4:	eef0 0a67 	vmov.f32	s1, s15
 8001dc8:	f00d f914 	bl	800eff4 <sqrt>
 8001dcc:	ec53 2b10 	vmov	r2, r3, d0
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	f7fe fd3a 	bl	800084c <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	ec43 2b17 	vmov	d7, r2, r3
 8001de0:	eeb0 0a47 	vmov.f32	s0, s14
 8001de4:	eef0 0a67 	vmov.f32	s1, s15
 8001de8:	f00c feea 	bl	800ebc0 <atan>
 8001dec:	ec51 0b10 	vmov	r0, r1, d0
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <calculate_IMU_error+0x368>)
 8001df6:	f7fe fbff 	bl	80005f8 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	a353      	add	r3, pc, #332	; (adr r3, 8001f50 <calculate_IMU_error+0x348>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe fd20 	bl	800084c <__aeabi_ddiv>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4620      	mov	r0, r4
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7fe fa3a 	bl	800028c <__adddf3>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe fee2 	bl	8000be8 <__aeabi_d2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a51      	ldr	r2, [pc, #324]	; (8001f6c <calculate_IMU_error+0x364>)
 8001e28:	6013      	str	r3, [r2, #0]
		AccErrorY = AccErrorY + ((atan(-1 * (accx) / sqrt(pow((accy), 2) + pow((accz), 2))) * 180 / PI));
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <calculate_IMU_error+0x36c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb8a 	bl	8000548 <__aeabi_f2d>
 8001e34:	4604      	mov	r4, r0
 8001e36:	460d      	mov	r5, r1
 8001e38:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <calculate_IMU_error+0x358>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	425b      	negs	r3, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	4680      	mov	r8, r0
 8001e48:	4689      	mov	r9, r1
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <calculate_IMU_error+0x35c>)
 8001e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb67 	bl	8000524 <__aeabi_i2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001f48 <calculate_IMU_error+0x340>
 8001e5e:	ec43 2b10 	vmov	d0, r2, r3
 8001e62:	f00d f857 	bl	800ef14 <pow>
 8001e66:	ec5b ab10 	vmov	sl, fp, d0
 8001e6a:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <calculate_IMU_error+0x360>)
 8001e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb57 	bl	8000524 <__aeabi_i2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001f48 <calculate_IMU_error+0x340>
 8001e7e:	ec43 2b10 	vmov	d0, r2, r3
 8001e82:	f00d f847 	bl	800ef14 <pow>
 8001e86:	ec53 2b10 	vmov	r2, r3, d0
 8001e8a:	4650      	mov	r0, sl
 8001e8c:	4659      	mov	r1, fp
 8001e8e:	f7fe f9fd 	bl	800028c <__adddf3>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	ec43 2b17 	vmov	d7, r2, r3
 8001e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ea2:	f00d f8a7 	bl	800eff4 <sqrt>
 8001ea6:	ec53 2b10 	vmov	r2, r3, d0
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe fccd 	bl	800084c <__aeabi_ddiv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	ec43 2b17 	vmov	d7, r2, r3
 8001eba:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebe:	eef0 0a67 	vmov.f32	s1, s15
 8001ec2:	f00c fe7d 	bl	800ebc0 <atan>
 8001ec6:	ec51 0b10 	vmov	r0, r1, d0
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <calculate_IMU_error+0x368>)
 8001ed0:	f7fe fb92 	bl	80005f8 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	a31c      	add	r3, pc, #112	; (adr r3, 8001f50 <calculate_IMU_error+0x348>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fcb3 	bl	800084c <__aeabi_ddiv>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe f9cd 	bl	800028c <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe75 	bl	8000be8 <__aeabi_d2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <calculate_IMU_error+0x36c>)
 8001f02:	6013      	str	r3, [r2, #0]
		c++;
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <calculate_IMU_error+0x370>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <calculate_IMU_error+0x370>)
 8001f0c:	6013      	str	r3, [r2, #0]
	while (c<200){
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <calculate_IMU_error+0x370>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2bc7      	cmp	r3, #199	; 0xc7
 8001f14:	f77f ae9c 	ble.w	8001c50 <calculate_IMU_error+0x48>
	}

	//divide the sum by 200 to get error value
	AccErrorX= AccErrorX/200;
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <calculate_IMU_error+0x364>)
 8001f1a:	ed93 7a00 	vldr	s14, [r3]
 8001f1e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001f7c <calculate_IMU_error+0x374>
 8001f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <calculate_IMU_error+0x364>)
 8001f28:	edc3 7a00 	vstr	s15, [r3]
	AccErrorX=AccErrorX/200;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <calculate_IMU_error+0x364>)
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001f7c <calculate_IMU_error+0x374>
 8001f36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <calculate_IMU_error+0x364>)
 8001f3c:	edc3 7a00 	vstr	s15, [r3]

	c = 0;
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <calculate_IMU_error+0x370>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
	while(c<200){
 8001f46:	e104      	b.n	8002152 <calculate_IMU_error+0x54a>
 8001f48:	00000000 	.word	0x00000000
 8001f4c:	40000000 	.word	0x40000000
 8001f50:	c083126f 	.word	0xc083126f
 8001f54:	400921ca 	.word	0x400921ca
 8001f58:	2000036a 	.word	0x2000036a
 8001f5c:	20000270 	.word	0x20000270
 8001f60:	20000364 	.word	0x20000364
 8001f64:	20000366 	.word	0x20000366
 8001f68:	20000368 	.word	0x20000368
 8001f6c:	20000394 	.word	0x20000394
 8001f70:	40668000 	.word	0x40668000
 8001f74:	20000398 	.word	0x20000398
 8001f78:	200003b4 	.word	0x200003b4
 8001f7c:	43480000 	.word	0x43480000
		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x43, 1, &tempval, 1, 50);
 8001f80:	2368      	movs	r3, #104	; 0x68
 8001f82:	b299      	uxth	r1, r3
 8001f84:	2332      	movs	r3, #50	; 0x32
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	4ba0      	ldr	r3, [pc, #640]	; (8002210 <calculate_IMU_error+0x608>)
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	2243      	movs	r2, #67	; 0x43
 8001f94:	489f      	ldr	r0, [pc, #636]	; (8002214 <calculate_IMU_error+0x60c>)
 8001f96:	f002 fe05 	bl	8004ba4 <HAL_I2C_Mem_Read>
		gyrox = tempval<<8;
 8001f9a:	4b9d      	ldr	r3, [pc, #628]	; (8002210 <calculate_IMU_error+0x608>)
 8001f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	4b9c      	ldr	r3, [pc, #624]	; (8002218 <calculate_IMU_error+0x610>)
 8001fa6:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x44, 1, &tempval, 1, 50);
 8001fa8:	2368      	movs	r3, #104	; 0x68
 8001faa:	b299      	uxth	r1, r3
 8001fac:	2332      	movs	r3, #50	; 0x32
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	4b96      	ldr	r3, [pc, #600]	; (8002210 <calculate_IMU_error+0x608>)
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2244      	movs	r2, #68	; 0x44
 8001fbc:	4895      	ldr	r0, [pc, #596]	; (8002214 <calculate_IMU_error+0x60c>)
 8001fbe:	f002 fdf1 	bl	8004ba4 <HAL_I2C_Mem_Read>
		gyrox = gyrox|tempval;
 8001fc2:	4b95      	ldr	r3, [pc, #596]	; (8002218 <calculate_IMU_error+0x610>)
 8001fc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fc8:	4b91      	ldr	r3, [pc, #580]	; (8002210 <calculate_IMU_error+0x608>)
 8001fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	4b91      	ldr	r3, [pc, #580]	; (8002218 <calculate_IMU_error+0x610>)
 8001fd4:	801a      	strh	r2, [r3, #0]


		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x45, 1, &tempval, 1, 50);
 8001fd6:	2368      	movs	r3, #104	; 0x68
 8001fd8:	b299      	uxth	r1, r3
 8001fda:	2332      	movs	r3, #50	; 0x32
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	4b8b      	ldr	r3, [pc, #556]	; (8002210 <calculate_IMU_error+0x608>)
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	2245      	movs	r2, #69	; 0x45
 8001fea:	488a      	ldr	r0, [pc, #552]	; (8002214 <calculate_IMU_error+0x60c>)
 8001fec:	f002 fdda 	bl	8004ba4 <HAL_I2C_Mem_Read>
		gyroy = tempval<<8;
 8001ff0:	4b87      	ldr	r3, [pc, #540]	; (8002210 <calculate_IMU_error+0x608>)
 8001ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	b21a      	sxth	r2, r3
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <calculate_IMU_error+0x614>)
 8001ffc:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x46, 1, &tempval, 1, 50);
 8001ffe:	2368      	movs	r3, #104	; 0x68
 8002000:	b299      	uxth	r1, r3
 8002002:	2332      	movs	r3, #50	; 0x32
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	2301      	movs	r3, #1
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	4b81      	ldr	r3, [pc, #516]	; (8002210 <calculate_IMU_error+0x608>)
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2301      	movs	r3, #1
 8002010:	2246      	movs	r2, #70	; 0x46
 8002012:	4880      	ldr	r0, [pc, #512]	; (8002214 <calculate_IMU_error+0x60c>)
 8002014:	f002 fdc6 	bl	8004ba4 <HAL_I2C_Mem_Read>
		gyroy = gyroy|tempval;
 8002018:	4b80      	ldr	r3, [pc, #512]	; (800221c <calculate_IMU_error+0x614>)
 800201a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800201e:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <calculate_IMU_error+0x608>)
 8002020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002024:	4313      	orrs	r3, r2
 8002026:	b21a      	sxth	r2, r3
 8002028:	4b7c      	ldr	r3, [pc, #496]	; (800221c <calculate_IMU_error+0x614>)
 800202a:	801a      	strh	r2, [r3, #0]


		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x47, 1, &tempval, 1, 50);
 800202c:	2368      	movs	r3, #104	; 0x68
 800202e:	b299      	uxth	r1, r3
 8002030:	2332      	movs	r3, #50	; 0x32
 8002032:	9302      	str	r3, [sp, #8]
 8002034:	2301      	movs	r3, #1
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	4b75      	ldr	r3, [pc, #468]	; (8002210 <calculate_IMU_error+0x608>)
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2301      	movs	r3, #1
 800203e:	2247      	movs	r2, #71	; 0x47
 8002040:	4874      	ldr	r0, [pc, #464]	; (8002214 <calculate_IMU_error+0x60c>)
 8002042:	f002 fdaf 	bl	8004ba4 <HAL_I2C_Mem_Read>
		gyroz = tempval<<8;
 8002046:	4b72      	ldr	r3, [pc, #456]	; (8002210 <calculate_IMU_error+0x608>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b21a      	sxth	r2, r3
 8002050:	4b73      	ldr	r3, [pc, #460]	; (8002220 <calculate_IMU_error+0x618>)
 8002052:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c3, MPU_ADDR, 0x48, 1, &tempval, 1, 50);
 8002054:	2368      	movs	r3, #104	; 0x68
 8002056:	b299      	uxth	r1, r3
 8002058:	2332      	movs	r3, #50	; 0x32
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	2301      	movs	r3, #1
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <calculate_IMU_error+0x608>)
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2301      	movs	r3, #1
 8002066:	2248      	movs	r2, #72	; 0x48
 8002068:	486a      	ldr	r0, [pc, #424]	; (8002214 <calculate_IMU_error+0x60c>)
 800206a:	f002 fd9b 	bl	8004ba4 <HAL_I2C_Mem_Read>
		gyroz = gyroz|tempval;
 800206e:	4b6c      	ldr	r3, [pc, #432]	; (8002220 <calculate_IMU_error+0x618>)
 8002070:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002074:	4b66      	ldr	r3, [pc, #408]	; (8002210 <calculate_IMU_error+0x608>)
 8002076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207a:	4313      	orrs	r3, r2
 800207c:	b21a      	sxth	r2, r3
 800207e:	4b68      	ldr	r3, [pc, #416]	; (8002220 <calculate_IMU_error+0x618>)
 8002080:	801a      	strh	r2, [r3, #0]

		GyroErrorX = GyroErrorX + (gyrox / 131.0);
 8002082:	4b68      	ldr	r3, [pc, #416]	; (8002224 <calculate_IMU_error+0x61c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa5e 	bl	8000548 <__aeabi_f2d>
 800208c:	4604      	mov	r4, r0
 800208e:	460d      	mov	r5, r1
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <calculate_IMU_error+0x610>)
 8002092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa44 	bl	8000524 <__aeabi_i2d>
 800209c:	a35a      	add	r3, pc, #360	; (adr r3, 8002208 <calculate_IMU_error+0x600>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fbd3 	bl	800084c <__aeabi_ddiv>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4620      	mov	r0, r4
 80020ac:	4629      	mov	r1, r5
 80020ae:	f7fe f8ed 	bl	800028c <__adddf3>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f7fe fd95 	bl	8000be8 <__aeabi_d2f>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <calculate_IMU_error+0x61c>)
 80020c2:	6013      	str	r3, [r2, #0]
		GyroErrorY = GyroErrorY + (gyroy / 131.0);
 80020c4:	4b58      	ldr	r3, [pc, #352]	; (8002228 <calculate_IMU_error+0x620>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa3d 	bl	8000548 <__aeabi_f2d>
 80020ce:	4604      	mov	r4, r0
 80020d0:	460d      	mov	r5, r1
 80020d2:	4b52      	ldr	r3, [pc, #328]	; (800221c <calculate_IMU_error+0x614>)
 80020d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fa23 	bl	8000524 <__aeabi_i2d>
 80020de:	a34a      	add	r3, pc, #296	; (adr r3, 8002208 <calculate_IMU_error+0x600>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f7fe fbb2 	bl	800084c <__aeabi_ddiv>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4620      	mov	r0, r4
 80020ee:	4629      	mov	r1, r5
 80020f0:	f7fe f8cc 	bl	800028c <__adddf3>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7fe fd74 	bl	8000be8 <__aeabi_d2f>
 8002100:	4603      	mov	r3, r0
 8002102:	4a49      	ldr	r2, [pc, #292]	; (8002228 <calculate_IMU_error+0x620>)
 8002104:	6013      	str	r3, [r2, #0]
		GyroErrorZ = GyroErrorZ + (gyroz / 131.0);
 8002106:	4b49      	ldr	r3, [pc, #292]	; (800222c <calculate_IMU_error+0x624>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa1c 	bl	8000548 <__aeabi_f2d>
 8002110:	4604      	mov	r4, r0
 8002112:	460d      	mov	r5, r1
 8002114:	4b42      	ldr	r3, [pc, #264]	; (8002220 <calculate_IMU_error+0x618>)
 8002116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa02 	bl	8000524 <__aeabi_i2d>
 8002120:	a339      	add	r3, pc, #228	; (adr r3, 8002208 <calculate_IMU_error+0x600>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fb91 	bl	800084c <__aeabi_ddiv>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe f8ab 	bl	800028c <__adddf3>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fd53 	bl	8000be8 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	4a39      	ldr	r2, [pc, #228]	; (800222c <calculate_IMU_error+0x624>)
 8002146:	6013      	str	r3, [r2, #0]
		c++;
 8002148:	4b39      	ldr	r3, [pc, #228]	; (8002230 <calculate_IMU_error+0x628>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <calculate_IMU_error+0x628>)
 8002150:	6013      	str	r3, [r2, #0]
	while(c<200){
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <calculate_IMU_error+0x628>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2bc7      	cmp	r3, #199	; 0xc7
 8002158:	f77f af12 	ble.w	8001f80 <calculate_IMU_error+0x378>
	}

	GyroErrorX = GyroErrorX / 200;
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <calculate_IMU_error+0x61c>)
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002234 <calculate_IMU_error+0x62c>
 8002166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <calculate_IMU_error+0x61c>)
 800216c:	edc3 7a00 	vstr	s15, [r3]
	GyroErrorY = GyroErrorY / 200;
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <calculate_IMU_error+0x620>)
 8002172:	ed93 7a00 	vldr	s14, [r3]
 8002176:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002234 <calculate_IMU_error+0x62c>
 800217a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <calculate_IMU_error+0x620>)
 8002180:	edc3 7a00 	vstr	s15, [r3]
	GyroErrorZ = GyroErrorZ / 200;
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <calculate_IMU_error+0x624>)
 8002186:	ed93 7a00 	vldr	s14, [r3]
 800218a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002234 <calculate_IMU_error+0x62c>
 800218e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <calculate_IMU_error+0x624>)
 8002194:	edc3 7a00 	vstr	s15, [r3]

	printf("AccErrorX: %f",AccErrorX);
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <calculate_IMU_error+0x630>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9d3 	bl	8000548 <__aeabi_f2d>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4825      	ldr	r0, [pc, #148]	; (800223c <calculate_IMU_error+0x634>)
 80021a8:	f008 ffe2 	bl	800b170 <iprintf>
	printf("AccErrorY: %f",AccErrorY);
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <calculate_IMU_error+0x638>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9c9 	bl	8000548 <__aeabi_f2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4822      	ldr	r0, [pc, #136]	; (8002244 <calculate_IMU_error+0x63c>)
 80021bc:	f008 ffd8 	bl	800b170 <iprintf>
	printf("GyroErrorX: %f",GyroErrorX);
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <calculate_IMU_error+0x61c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f9bf 	bl	8000548 <__aeabi_f2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	481e      	ldr	r0, [pc, #120]	; (8002248 <calculate_IMU_error+0x640>)
 80021d0:	f008 ffce 	bl	800b170 <iprintf>
	printf("GyroErrorY: %f",GyroErrorY);
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <calculate_IMU_error+0x620>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f9b5 	bl	8000548 <__aeabi_f2d>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	481a      	ldr	r0, [pc, #104]	; (800224c <calculate_IMU_error+0x644>)
 80021e4:	f008 ffc4 	bl	800b170 <iprintf>
	printf("GyroErrorZ: %f",GyroErrorZ);
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <calculate_IMU_error+0x624>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f9ab 	bl	8000548 <__aeabi_f2d>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4816      	ldr	r0, [pc, #88]	; (8002250 <calculate_IMU_error+0x648>)
 80021f8:	f008 ffba 	bl	800b170 <iprintf>
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002204:	f3af 8000 	nop.w
 8002208:	00000000 	.word	0x00000000
 800220c:	40606000 	.word	0x40606000
 8002210:	2000036a 	.word	0x2000036a
 8002214:	20000270 	.word	0x20000270
 8002218:	2000036c 	.word	0x2000036c
 800221c:	2000036e 	.word	0x2000036e
 8002220:	20000370 	.word	0x20000370
 8002224:	2000039c 	.word	0x2000039c
 8002228:	200003a0 	.word	0x200003a0
 800222c:	200003a4 	.word	0x200003a4
 8002230:	200003b4 	.word	0x200003b4
 8002234:	43480000 	.word	0x43480000
 8002238:	20000394 	.word	0x20000394
 800223c:	0800fdcc 	.word	0x0800fdcc
 8002240:	20000398 	.word	0x20000398
 8002244:	0800fddc 	.word	0x0800fddc
 8002248:	0800fdec 	.word	0x0800fdec
 800224c:	0800fdfc 	.word	0x0800fdfc
 8002250:	0800fe0c 	.word	0x0800fe0c

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800225c:	e7fe      	b.n	800225c <Error_Handler+0x8>

0800225e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002266:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800226a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d013      	beq.n	800229e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002276:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800227a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800227e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002286:	e000      	b.n	800228a <ITM_SendChar+0x2c>
    {
      __NOP();
 8002288:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800228a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f9      	beq.n	8002288 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002294:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800229e:	687b      	ldr	r3, [r7, #4]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <ITM_SendString>:

#include "stm32f4xx_hal.h"


int ITM_SendString(char *data, int len)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
        int i = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
        for (; i < len; ++i)
 80022ba:	e009      	b.n	80022d0 <ITM_SendString+0x24>
        {
                ITM_SendChar(data[i]);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ffca 	bl	800225e <ITM_SendChar>
        for (; i < len; ++i)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3301      	adds	r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbf1      	blt.n	80022bc <ITM_SendString+0x10>
        }
        return i;
 80022d8:	68fb      	ldr	r3, [r7, #12]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_write>:

int _write(int file, char *data, int len)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
        int sent = ITM_SendString(data, len);
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f7ff ffdb 	bl	80022ac <ITM_SendString>
 80022f6:	6178      	str	r0, [r7, #20]
        return sent;
 80022f8:	697b      	ldr	r3, [r7, #20]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_MspInit+0x4c>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_MspInit+0x4c>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_MspInit+0x4c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_MspInit+0x4c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_MspInit+0x4c>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_MspInit+0x4c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002342:	2007      	movs	r0, #7
 8002344:	f000 fbee 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	; 0x30
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a42      	ldr	r2, [pc, #264]	; (800247c <HAL_I2C_MspInit+0x128>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d12d      	bne.n	80023d2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a40      	ldr	r2, [pc, #256]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002392:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002398:	2312      	movs	r3, #18
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800239c:	2301      	movs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a4:	2304      	movs	r3, #4
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	4619      	mov	r1, r3
 80023ae:	4835      	ldr	r0, [pc, #212]	; (8002484 <HAL_I2C_MspInit+0x130>)
 80023b0:	f000 fbfa 	bl	8002ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	4b31      	ldr	r3, [pc, #196]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a30      	ldr	r2, [pc, #192]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 80023be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c2:	6413      	str	r3, [r2, #64]	; 0x40
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80023d0:	e050      	b.n	8002474 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <HAL_I2C_MspInit+0x134>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d14b      	bne.n	8002474 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	4a26      	ldr	r2, [pc, #152]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6313      	str	r3, [r2, #48]	; 0x30
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6313      	str	r3, [r2, #48]	; 0x30
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241a:	2312      	movs	r3, #18
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002426:	2304      	movs	r3, #4
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4816      	ldr	r0, [pc, #88]	; (800248c <HAL_I2C_MspInit+0x138>)
 8002432:	f000 fbb9 	bl	8002ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243c:	2312      	movs	r3, #18
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002448:	2304      	movs	r3, #4
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	4619      	mov	r1, r3
 8002452:	480f      	ldr	r0, [pc, #60]	; (8002490 <HAL_I2C_MspInit+0x13c>)
 8002454:	f000 fba8 	bl	8002ba8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 8002462:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002466:	6413      	str	r3, [r2, #64]	; 0x40
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_I2C_MspInit+0x12c>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
}
 8002474:	bf00      	nop
 8002476:	3730      	adds	r7, #48	; 0x30
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40005400 	.word	0x40005400
 8002480:	40023800 	.word	0x40023800
 8002484:	40020400 	.word	0x40020400
 8002488:	40005c00 	.word	0x40005c00
 800248c:	40020800 	.word	0x40020800
 8002490:	40020000 	.word	0x40020000

08002494 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	; 0x38
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a31      	ldr	r2, [pc, #196]	; (8002584 <HAL_I2S_MspInit+0xf0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d15a      	bne.n	800257a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80024c4:	2301      	movs	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80024c8:	23c0      	movs	r3, #192	; 0xc0
 80024ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4618      	mov	r0, r3
 80024d6:	f004 fa0b 	bl	80068f0 <HAL_RCCEx_PeriphCLKConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80024e0:	f7ff feb8 	bl	8002254 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	6413      	str	r3, [r2, #64]	; 0x40
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6313      	str	r3, [r2, #48]	; 0x30
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_I2S_MspInit+0xf4>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002538:	2310      	movs	r3, #16
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002548:	2306      	movs	r3, #6
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002550:	4619      	mov	r1, r3
 8002552:	480e      	ldr	r0, [pc, #56]	; (800258c <HAL_I2S_MspInit+0xf8>)
 8002554:	f000 fb28 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002558:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800256a:	2306      	movs	r3, #6
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	4619      	mov	r1, r3
 8002574:	4806      	ldr	r0, [pc, #24]	; (8002590 <HAL_I2S_MspInit+0xfc>)
 8002576:	f000 fb17 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800257a:	bf00      	nop
 800257c:	3738      	adds	r7, #56	; 0x38
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40003c00 	.word	0x40003c00
 8002588:	40023800 	.word	0x40023800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020800 	.word	0x40020800

08002594 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_SPI_MspInit+0x84>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12b      	bne.n	800260e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80025ee:	23e0      	movs	r3, #224	; 0xe0
 80025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025fe:	2305      	movs	r3, #5
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0314 	add.w	r3, r7, #20
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 800260a:	f000 facd 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40013000 	.word	0x40013000
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <NMI_Handler+0x4>

0800262a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <MemManage_Handler+0x4>

08002636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <BusFault_Handler+0x4>

0800263c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <UsageFault_Handler+0x4>

08002642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002670:	f000 f944 	bl	80028fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}

08002678 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <OTG_FS_IRQHandler+0x10>)
 800267e:	f000 feb3 	bl	80033e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000079c 	.word	0x2000079c

0800268c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
	return 1;
 8002690:	2301      	movs	r3, #1
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_kill>:

int _kill(int pid, int sig)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026a6:	f007 fdc7 	bl	800a238 <__errno>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2216      	movs	r2, #22
 80026ae:	601a      	str	r2, [r3, #0]
	return -1;
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_exit>:

void _exit (int status)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ffe7 	bl	800269c <_kill>
	while (1) {}		/* Make sure we hang here */
 80026ce:	e7fe      	b.n	80026ce <_exit+0x12>

080026d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e00a      	b.n	80026f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026e2:	f3af 8000 	nop.w
 80026e6:	4601      	mov	r1, r0
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	60ba      	str	r2, [r7, #8]
 80026ee:	b2ca      	uxtb	r2, r1
 80026f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	dbf0      	blt.n	80026e2 <_read+0x12>
	}

return len;
 8002700:	687b      	ldr	r3, [r7, #4]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_close>:
	}
	return len;
}

int _close(int file)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
	return -1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002732:	605a      	str	r2, [r3, #4]
	return 0;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_isatty>:

int _isatty(int file)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
	return 1;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
	return 0;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <_sbrk+0x5c>)
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_sbrk+0x60>)
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <_sbrk+0x64>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <_sbrk+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a4:	f007 fd48 	bl	800a238 <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	220c      	movs	r2, #12
 80027ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027b2:	e009      	b.n	80027c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <_sbrk+0x64>)
 80027c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20020000 	.word	0x20020000
 80027d4:	00000400 	.word	0x00000400
 80027d8:	200003b8 	.word	0x200003b8
 80027dc:	20000ab0 	.word	0x20000ab0

080027e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <SystemInit+0x20>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <SystemInit+0x20>)
 80027ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800283c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002808:	480d      	ldr	r0, [pc, #52]	; (8002840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800280a:	490e      	ldr	r1, [pc, #56]	; (8002844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a0b      	ldr	r2, [pc, #44]	; (800284c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002820:	4c0b      	ldr	r4, [pc, #44]	; (8002850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800282e:	f7ff ffd7 	bl	80027e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002832:	f007 fd07 	bl	800a244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002836:	f7fe fbdf 	bl	8000ff8 <main>
  bx  lr    
 800283a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800283c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002844:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002848:	08010368 	.word	0x08010368
  ldr r2, =_sbss
 800284c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002850:	20000ab0 	.word	0x20000ab0

08002854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC_IRQHandler>
	...

08002858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_Init+0x40>)
 8002862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_Init+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_Init+0x40>)
 800286e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_Init+0x40>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_Init+0x40>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 f94f 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	2000      	movs	r0, #0
 8002888:	f000 f808 	bl	800289c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f7ff fd3a 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x54>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_InitTick+0x58>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f967 	bl	8002b8e <HAL_SYSTICK_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00e      	b.n	80028e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d80a      	bhi.n	80028e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d8:	f000 f92f 	bl	8002b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <HAL_InitTick+0x5c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000008 	.word	0x20000008
 80028f8:	20000004 	.word	0x20000004

080028fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x20>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x24>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_IncTick+0x24>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000008 	.word	0x20000008
 8002920:	200003bc 	.word	0x200003bc

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200003bc 	.word	0x200003bc

0800293c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff ffee 	bl	8002924 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002954:	d005      	beq.n	8002962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_Delay+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002962:	bf00      	nop
 8002964:	f7ff ffde 	bl	8002924 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d8f7      	bhi.n	8002964 <HAL_Delay+0x28>
  {
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000008 	.word	0x20000008

08002984 <__NVIC_SetPriorityGrouping>:
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b6:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	60d3      	str	r3, [r2, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_GetPriorityGrouping>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <__NVIC_GetPriorityGrouping+0x18>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 0307 	and.w	r3, r3, #7
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_EnableIRQ>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db0b      	blt.n	8002a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4907      	ldr	r1, [pc, #28]	; (8002a20 <__NVIC_EnableIRQ+0x38>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2001      	movs	r0, #1
 8002a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000e100 	.word	0xe000e100

08002a24 <__NVIC_SetPriority>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db0a      	blt.n	8002a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	; (8002a70 <__NVIC_SetPriority+0x4c>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a4c:	e00a      	b.n	8002a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4908      	ldr	r1, [pc, #32]	; (8002a74 <__NVIC_SetPriority+0x50>)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	440b      	add	r3, r1
 8002a62:	761a      	strb	r2, [r3, #24]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000e100 	.word	0xe000e100
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <NVIC_EncodePriority>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	; 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf28      	it	cs
 8002a96:	2304      	movcs	r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d902      	bls.n	8002aa8 <NVIC_EncodePriority+0x30>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b03      	subs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <NVIC_EncodePriority+0x32>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	4313      	orrs	r3, r2
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	; 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <SysTick_Config>:
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af0:	d301      	bcc.n	8002af6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <SysTick_Config+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	210f      	movs	r1, #15
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b04:	f7ff ff8e 	bl	8002a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <SysTick_Config+0x40>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <SysTick_Config+0x40>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	e000e010 	.word	0xe000e010

08002b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff29 	bl	8002984 <__NVIC_SetPriorityGrouping>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4c:	f7ff ff3e 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff8e 	bl	8002a78 <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5d 	bl	8002a24 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff31 	bl	80029e8 <__NVIC_EnableIRQ>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ffa2 	bl	8002ae0 <SysTick_Config>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e16b      	b.n	8002e9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 815a 	bne.w	8002e96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d130      	bne.n	8002c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0201 	and.w	r2, r3, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d017      	beq.n	8002c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d123      	bne.n	8002cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80b4 	beq.w	8002e96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b60      	ldr	r3, [pc, #384]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a5f      	ldr	r2, [pc, #380]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4a:	4a5b      	ldr	r2, [pc, #364]	; (8002eb8 <HAL_GPIO_Init+0x310>)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <HAL_GPIO_Init+0x314>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d02b      	beq.n	8002dce <HAL_GPIO_Init+0x226>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a51      	ldr	r2, [pc, #324]	; (8002ec0 <HAL_GPIO_Init+0x318>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d025      	beq.n	8002dca <HAL_GPIO_Init+0x222>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a50      	ldr	r2, [pc, #320]	; (8002ec4 <HAL_GPIO_Init+0x31c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01f      	beq.n	8002dc6 <HAL_GPIO_Init+0x21e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4f      	ldr	r2, [pc, #316]	; (8002ec8 <HAL_GPIO_Init+0x320>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x21a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4e      	ldr	r2, [pc, #312]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x216>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4d      	ldr	r2, [pc, #308]	; (8002ed0 <HAL_GPIO_Init+0x328>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x212>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4c      	ldr	r2, [pc, #304]	; (8002ed4 <HAL_GPIO_Init+0x32c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x20e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4b      	ldr	r2, [pc, #300]	; (8002ed8 <HAL_GPIO_Init+0x330>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x20a>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00e      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002db2:	2308      	movs	r3, #8
 8002db4:	e00c      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002db6:	2306      	movs	r3, #6
 8002db8:	e00a      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x310>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a32      	ldr	r2, [pc, #200]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f ae90 	bls.w	8002bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40013c00 	.word	0x40013c00

08002ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
 8002eec:	4613      	mov	r3, r2
 8002eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef0:	787b      	ldrb	r3, [r7, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002efc:	e003      	b.n	8002f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f14:	b08f      	sub	sp, #60	; 0x3c
 8002f16:	af0a      	add	r7, sp, #40	; 0x28
 8002f18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e054      	b.n	8002fce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f006 fed0 	bl	8009ce4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 feff 	bl	8006d66 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	687e      	ldr	r6, [r7, #4]
 8002f70:	466d      	mov	r5, sp
 8002f72:	f106 0410 	add.w	r4, r6, #16
 8002f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f82:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f86:	1d33      	adds	r3, r6, #4
 8002f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f8a:	6838      	ldr	r0, [r7, #0]
 8002f8c:	f003 fe79 	bl	8006c82 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fef6 	bl	8006d88 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	687e      	ldr	r6, [r7, #4]
 8002fa4:	466d      	mov	r5, sp
 8002fa6:	f106 0410 	add.w	r4, r6, #16
 8002faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fba:	1d33      	adds	r3, r6, #4
 8002fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fbe:	6838      	ldr	r0, [r7, #0]
 8002fc0:	f004 f87e 	bl	80070c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fd6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002fd6:	b590      	push	{r4, r7, lr}
 8002fd8:	b089      	sub	sp, #36	; 0x24
 8002fda:	af04      	add	r7, sp, #16
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	4608      	mov	r0, r1
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	70fb      	strb	r3, [r7, #3]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70bb      	strb	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_HCD_HC_Init+0x28>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e076      	b.n	80030ec <HAL_HCD_HC_Init+0x116>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	333d      	adds	r3, #61	; 0x3d
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3338      	adds	r3, #56	; 0x38
 8003026:	787a      	ldrb	r2, [r7, #1]
 8003028:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3340      	adds	r3, #64	; 0x40
 8003038:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800303a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3339      	adds	r3, #57	; 0x39
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	333f      	adds	r3, #63	; 0x3f
 800305c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003060:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	78ba      	ldrb	r2, [r7, #2]
 8003066:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800306a:	b2d0      	uxtb	r0, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	333a      	adds	r3, #58	; 0x3a
 8003078:	4602      	mov	r2, r0
 800307a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800307c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003080:	2b00      	cmp	r3, #0
 8003082:	da09      	bge.n	8003098 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	333b      	adds	r3, #59	; 0x3b
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e008      	b.n	80030aa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	333b      	adds	r3, #59	; 0x3b
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	333c      	adds	r3, #60	; 0x3c
 80030b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030bc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	787c      	ldrb	r4, [r7, #1]
 80030c4:	78ba      	ldrb	r2, [r7, #2]
 80030c6:	78f9      	ldrb	r1, [r7, #3]
 80030c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030ca:	9302      	str	r3, [sp, #8]
 80030cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4623      	mov	r3, r4
 80030da:	f004 f977 	bl	80073cc <USB_HC_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd90      	pop	{r4, r7, pc}

080030f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_HCD_HC_Halt+0x1e>
 800310e:	2302      	movs	r3, #2
 8003110:	e00f      	b.n	8003132 <HAL_HCD_HC_Halt+0x3e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fbc7 	bl	80078b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	4608      	mov	r0, r1
 8003146:	4611      	mov	r1, r2
 8003148:	461a      	mov	r2, r3
 800314a:	4603      	mov	r3, r0
 800314c:	70fb      	strb	r3, [r7, #3]
 800314e:	460b      	mov	r3, r1
 8003150:	70bb      	strb	r3, [r7, #2]
 8003152:	4613      	mov	r3, r2
 8003154:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	333b      	adds	r3, #59	; 0x3b
 8003164:	78ba      	ldrb	r2, [r7, #2]
 8003166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	333f      	adds	r3, #63	; 0x3f
 8003176:	787a      	ldrb	r2, [r7, #1]
 8003178:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800317a:	7c3b      	ldrb	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d112      	bne.n	80031a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3342      	adds	r3, #66	; 0x42
 800318e:	2203      	movs	r2, #3
 8003190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	333d      	adds	r3, #61	; 0x3d
 80031a0:	7f3a      	ldrb	r2, [r7, #28]
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e008      	b.n	80031b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	3342      	adds	r3, #66	; 0x42
 80031b4:	2202      	movs	r2, #2
 80031b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80031b8:	787b      	ldrb	r3, [r7, #1]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	f200 80c6 	bhi.w	800334c <HAL_HCD_HC_SubmitRequest+0x210>
 80031c0:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031d9 	.word	0x080031d9
 80031cc:	08003339 	.word	0x08003339
 80031d0:	0800323d 	.word	0x0800323d
 80031d4:	080032bb 	.word	0x080032bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80031d8:	7c3b      	ldrb	r3, [r7, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	f040 80b8 	bne.w	8003350 <HAL_HCD_HC_SubmitRequest+0x214>
 80031e0:	78bb      	ldrb	r3, [r7, #2]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 80b4 	bne.w	8003350 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80031e8:	8b3b      	ldrh	r3, [r7, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3355      	adds	r3, #85	; 0x55
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3355      	adds	r3, #85	; 0x55
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3342      	adds	r3, #66	; 0x42
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003226:	e093      	b.n	8003350 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3342      	adds	r3, #66	; 0x42
 8003236:	2202      	movs	r2, #2
 8003238:	701a      	strb	r2, [r3, #0]
      break;
 800323a:	e089      	b.n	8003350 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800323c:	78bb      	ldrb	r3, [r7, #2]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11d      	bne.n	800327e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3355      	adds	r3, #85	; 0x55
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3342      	adds	r3, #66	; 0x42
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003268:	e073      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3342      	adds	r3, #66	; 0x42
 8003278:	2202      	movs	r2, #2
 800327a:	701a      	strb	r2, [r3, #0]
      break;
 800327c:	e069      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3354      	adds	r3, #84	; 0x54
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3342      	adds	r3, #66	; 0x42
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
      break;
 80032a4:	e055      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	3342      	adds	r3, #66	; 0x42
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
      break;
 80032b8:	e04b      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80032ba:	78bb      	ldrb	r3, [r7, #2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d11d      	bne.n	80032fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3355      	adds	r3, #85	; 0x55
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3342      	adds	r3, #66	; 0x42
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032e6:	e034      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3342      	adds	r3, #66	; 0x42
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]
      break;
 80032fa:	e02a      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3354      	adds	r3, #84	; 0x54
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3342      	adds	r3, #66	; 0x42
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
      break;
 8003322:	e016      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	3342      	adds	r3, #66	; 0x42
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
      break;
 8003336:	e00c      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3342      	adds	r3, #66	; 0x42
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
      break;
 800334a:	e002      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003350:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3344      	adds	r3, #68	; 0x44
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	8b3a      	ldrh	r2, [r7, #24]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	202c      	movs	r0, #44	; 0x2c
 800336c:	fb00 f303 	mul.w	r3, r0, r3
 8003370:	440b      	add	r3, r1
 8003372:	334c      	adds	r3, #76	; 0x4c
 8003374:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3360      	adds	r3, #96	; 0x60
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3350      	adds	r3, #80	; 0x50
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3339      	adds	r3, #57	; 0x39
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3361      	adds	r3, #97	; 0x61
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	222c      	movs	r2, #44	; 0x2c
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	3338      	adds	r3, #56	; 0x38
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	18d1      	adds	r1, r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	f004 f91a 	bl	8007610 <USB_HC_StartXfer>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop

080033e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 fe1b 	bl	800703a <USB_GetMode>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	f040 80f6 	bne.w	80035f8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fdff 	bl	8007014 <USB_ReadInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80ec 	beq.w	80035f6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f003 fdf6 	bl	8007014 <USB_ReadInterrupts>
 8003428:	4603      	mov	r3, r0
 800342a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003432:	d104      	bne.n	800343e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800343c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f003 fde6 	bl	8007014 <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d104      	bne.n	800345e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800345c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f003 fdd6 	bl	8007014 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800346e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003472:	d104      	bne.n	800347e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800347c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f003 fdc6 	bl	8007014 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d103      	bne.n	800349a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2202      	movs	r2, #2
 8003498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f003 fdb8 	bl	8007014 <USB_ReadInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ae:	d11c      	bne.n	80034ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80034ca:	2110      	movs	r1, #16
 80034cc:	6938      	ldr	r0, [r7, #16]
 80034ce:	f003 fca7 	bl	8006e20 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80034d2:	6938      	ldr	r0, [r7, #16]
 80034d4:	f003 fcd8 	bl	8006e88 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 feae 	bl	8007240 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f006 fc7b 	bl	8009de0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 fd90 	bl	8007014 <USB_ReadInterrupts>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034fe:	d102      	bne.n	8003506 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f001 f89e 	bl	8004642 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fd82 	bl	8007014 <USB_ReadInterrupts>
 8003510:	4603      	mov	r3, r0
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b08      	cmp	r3, #8
 8003518:	d106      	bne.n	8003528 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f006 fc44 	bl	8009da8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2208      	movs	r2, #8
 8003526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f003 fd71 	bl	8007014 <USB_ReadInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d101      	bne.n	8003540 <HAL_HCD_IRQHandler+0x158>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_HCD_IRQHandler+0x15a>
 8003540:	2300      	movs	r3, #0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d012      	beq.n	800356c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0210 	bic.w	r2, r2, #16
 8003554:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 ffa1 	bl	800449e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0210 	orr.w	r2, r2, #16
 800356a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f003 fd4f 	bl	8007014 <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003580:	d13a      	bne.n	80035f8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f004 f984 	bl	8007894 <USB_HC_ReadInterrupt>
 800358c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e025      	b.n	80035e0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d018      	beq.n	80035da <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035be:	d106      	bne.n	80035ce <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8ab 	bl	8003722 <HCD_HC_IN_IRQHandler>
 80035cc:	e005      	b.n	80035da <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fbf9 	bl	8003dcc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d3d4      	bcc.n	8003594 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f2:	615a      	str	r2, [r3, #20]
 80035f4:	e000      	b.n	80035f8 <HAL_HCD_IRQHandler+0x210>
      return;
 80035f6:	bf00      	nop
    }
  }
}
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_HCD_Start+0x16>
 8003610:	2302      	movs	r3, #2
 8003612:	e013      	b.n	800363c <HAL_HCD_Start+0x3e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f003 fe70 	bl	8007308 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f003 fb89 	bl	8006d44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_HCD_Stop+0x16>
 8003656:	2302      	movs	r3, #2
 8003658:	e00d      	b.n	8003676 <HAL_HCD_Stop+0x32>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f004 fa5e 	bl	8007b28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fe12 	bl	80072b4 <USB_ResetPort>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	3360      	adds	r3, #96	; 0x60
 80036b4:	781b      	ldrb	r3, [r3, #0]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3350      	adds	r3, #80	; 0x50
 80036dc:	681b      	ldr	r3, [r3, #0]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 fe56 	bl	80073a8 <USB_GetCurrentFrame>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fe31 	bl	800737a <USB_GetHostSpeed>
 8003718:	4603      	mov	r3, r0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b04      	cmp	r3, #4
 8003750:	d11a      	bne.n	8003788 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	461a      	mov	r2, r3
 8003760:	2304      	movs	r3, #4
 8003762:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3361      	adds	r3, #97	; 0x61
 8003772:	2206      	movs	r2, #6
 8003774:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f004 f898 	bl	80078b6 <USB_HC_Halt>
 8003786:	e0af      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379e:	d11b      	bne.n	80037d8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	461a      	mov	r2, r3
 80037ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	3361      	adds	r3, #97	; 0x61
 80037c2:	2207      	movs	r2, #7
 80037c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f004 f870 	bl	80078b6 <USB_HC_Halt>
 80037d6:	e087      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d109      	bne.n	8003802 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fa:	461a      	mov	r2, r3
 80037fc:	2320      	movs	r3, #32
 80037fe:	6093      	str	r3, [r2, #8]
 8003800:	e072      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d11a      	bne.n	800384e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	461a      	mov	r2, r3
 8003826:	2308      	movs	r3, #8
 8003828:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	212c      	movs	r1, #44	; 0x2c
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	4413      	add	r3, r2
 8003836:	3361      	adds	r3, #97	; 0x61
 8003838:	2205      	movs	r2, #5
 800383a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f004 f835 	bl	80078b6 <USB_HC_Halt>
 800384c:	e04c      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d11b      	bne.n	800389e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	461a      	mov	r2, r3
 8003874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003878:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3361      	adds	r3, #97	; 0x61
 8003888:	2208      	movs	r2, #8
 800388a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f004 f80d 	bl	80078b6 <USB_HC_Halt>
 800389c:	e024      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b0:	2b80      	cmp	r3, #128	; 0x80
 80038b2:	d119      	bne.n	80038e8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c0:	461a      	mov	r2, r3
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3361      	adds	r3, #97	; 0x61
 80038d4:	2206      	movs	r2, #6
 80038d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f003 ffe7 	bl	80078b6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fe:	d112      	bne.n	8003926 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f003 ffd3 	bl	80078b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	461a      	mov	r2, r3
 800391e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003922:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003924:	e24e      	b.n	8003dc4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 80df 	bne.w	8003afc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d019      	beq.n	800397a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3348      	adds	r3, #72	; 0x48
 8003954:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	0159      	lsls	r1, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	440b      	add	r3, r1
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003968:	1ad2      	subs	r2, r2, r3
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	202c      	movs	r0, #44	; 0x2c
 8003970:	fb00 f303 	mul.w	r3, r0, r3
 8003974:	440b      	add	r3, r1
 8003976:	3350      	adds	r3, #80	; 0x50
 8003978:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	3361      	adds	r3, #97	; 0x61
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	335c      	adds	r3, #92	; 0x5c
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039aa:	461a      	mov	r2, r3
 80039ac:	2301      	movs	r3, #1
 80039ae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	333f      	adds	r3, #63	; 0x3f
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	333f      	adds	r3, #63	; 0x3f
 80039d2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d111      	bne.n	80039fc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 ff67 	bl	80078b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f4:	461a      	mov	r2, r3
 80039f6:	2310      	movs	r3, #16
 80039f8:	6093      	str	r3, [r2, #8]
 80039fa:	e03a      	b.n	8003a72 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	212c      	movs	r1, #44	; 0x2c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	333f      	adds	r3, #63	; 0x3f
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d009      	beq.n	8003a24 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	333f      	adds	r3, #63	; 0x3f
 8003a1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d126      	bne.n	8003a72 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a42:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	212c      	movs	r1, #44	; 0x2c
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	3360      	adds	r3, #96	; 0x60
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	b2d9      	uxtb	r1, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	202c      	movs	r0, #44	; 0x2c
 8003a60:	fb00 f303 	mul.w	r3, r0, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	3360      	adds	r3, #96	; 0x60
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f006 f9c5 	bl	8009dfc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d12b      	bne.n	8003ad2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3348      	adds	r3, #72	; 0x48
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	202c      	movs	r0, #44	; 0x2c
 8003a90:	fb00 f202 	mul.w	r2, r0, r2
 8003a94:	440a      	add	r2, r1
 8003a96:	3240      	adds	r2, #64	; 0x40
 8003a98:	8812      	ldrh	r2, [r2, #0]
 8003a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 818e 	beq.w	8003dc4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3354      	adds	r3, #84	; 0x54
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	f083 0301 	eor.w	r3, r3, #1
 8003abc:	b2d8      	uxtb	r0, r3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	3354      	adds	r3, #84	; 0x54
 8003acc:	4602      	mov	r2, r0
 8003ace:	701a      	strb	r2, [r3, #0]
}
 8003ad0:	e178      	b.n	8003dc4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	212c      	movs	r1, #44	; 0x2c
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	3354      	adds	r3, #84	; 0x54
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	f083 0301 	eor.w	r3, r3, #1
 8003ae6:	b2d8      	uxtb	r0, r3
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3354      	adds	r3, #84	; 0x54
 8003af6:	4602      	mov	r2, r0
 8003af8:	701a      	strb	r2, [r3, #0]
}
 8003afa:	e163      	b.n	8003dc4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 80f6 	bne.w	8003d00 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	212c      	movs	r1, #44	; 0x2c
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3361      	adds	r3, #97	; 0x61
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d109      	bne.n	8003b3c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3360      	adds	r3, #96	; 0x60
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e0c9      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3361      	adds	r3, #97	; 0x61
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d109      	bne.n	8003b64 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3360      	adds	r3, #96	; 0x60
 8003b5e:	2205      	movs	r2, #5
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e0b5      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3361      	adds	r3, #97	; 0x61
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b06      	cmp	r3, #6
 8003b76:	d009      	beq.n	8003b8c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3361      	adds	r3, #97	; 0x61
 8003b86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d150      	bne.n	8003c2e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	335c      	adds	r3, #92	; 0x5c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	202c      	movs	r0, #44	; 0x2c
 8003ba4:	fb00 f303 	mul.w	r3, r0, r3
 8003ba8:	440b      	add	r3, r1
 8003baa:	335c      	adds	r3, #92	; 0x5c
 8003bac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	335c      	adds	r3, #92	; 0x5c
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d912      	bls.n	8003be8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	335c      	adds	r3, #92	; 0x5c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	3360      	adds	r3, #96	; 0x60
 8003be2:	2204      	movs	r2, #4
 8003be4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003be6:	e073      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3360      	adds	r3, #96	; 0x60
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c10:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c18:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c2c:	e050      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3361      	adds	r3, #97	; 0x61
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d122      	bne.n	8003c88 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	212c      	movs	r1, #44	; 0x2c
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3360      	adds	r3, #96	; 0x60
 8003c50:	2202      	movs	r2, #2
 8003c52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	461a      	mov	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e023      	b.n	8003cd0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3361      	adds	r3, #97	; 0x61
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b07      	cmp	r3, #7
 8003c9a:	d119      	bne.n	8003cd0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	335c      	adds	r3, #92	; 0x5c
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	202c      	movs	r0, #44	; 0x2c
 8003cb4:	fb00 f303 	mul.w	r3, r0, r3
 8003cb8:	440b      	add	r3, r1
 8003cba:	335c      	adds	r3, #92	; 0x5c
 8003cbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	3360      	adds	r3, #96	; 0x60
 8003ccc:	2204      	movs	r2, #4
 8003cce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2302      	movs	r3, #2
 8003ce0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	b2d9      	uxtb	r1, r3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	202c      	movs	r0, #44	; 0x2c
 8003cec:	fb00 f303 	mul.w	r3, r0, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3360      	adds	r3, #96	; 0x60
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f006 f87f 	bl	8009dfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cfe:	e061      	b.n	8003dc4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d156      	bne.n	8003dc4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	333f      	adds	r3, #63	; 0x3f
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d111      	bne.n	8003d4e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	335c      	adds	r3, #92	; 0x5c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 fdb5 	bl	80078b6 <USB_HC_Halt>
 8003d4c:	e031      	b.n	8003db2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	333f      	adds	r3, #63	; 0x3f
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	333f      	adds	r3, #63	; 0x3f
 8003d70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d11d      	bne.n	8003db2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	335c      	adds	r3, #92	; 0x5c
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d110      	bne.n	8003db2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3361      	adds	r3, #97	; 0x61
 8003d9e:	2203      	movs	r2, #3
 8003da0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f003 fd82 	bl	80078b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	6093      	str	r3, [r2, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d11a      	bne.n	8003e32 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3361      	adds	r3, #97	; 0x61
 8003e1c:	2206      	movs	r2, #6
 8003e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f003 fd43 	bl	80078b6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003e30:	e331      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d12e      	bne.n	8003ea6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	461a      	mov	r2, r3
 8003e56:	2320      	movs	r3, #32
 8003e58:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	333d      	adds	r3, #61	; 0x3d
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	f040 8313 	bne.w	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	212c      	movs	r1, #44	; 0x2c
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	333d      	adds	r3, #61	; 0x3d
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3360      	adds	r3, #96	; 0x60
 8003e90:	2202      	movs	r2, #2
 8003e92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f003 fd09 	bl	80078b6 <USB_HC_Halt>
}
 8003ea4:	e2f7      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ebc:	d112      	bne.n	8003ee4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 fcea 	bl	80078b6 <USB_HC_Halt>
}
 8003ee2:	e2d8      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d140      	bne.n	8003f7c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	335c      	adds	r3, #92	; 0x5c
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d111      	bne.n	8003f46 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	333d      	adds	r3, #61	; 0x3d
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f40:	461a      	mov	r2, r3
 8003f42:	2340      	movs	r3, #64	; 0x40
 8003f44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	461a      	mov	r2, r3
 8003f54:	2301      	movs	r3, #1
 8003f56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	3361      	adds	r3, #97	; 0x61
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f003 fc9e 	bl	80078b6 <USB_HC_Halt>
}
 8003f7a:	e28c      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d12c      	bne.n	8003fec <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3361      	adds	r3, #97	; 0x61
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	333d      	adds	r3, #61	; 0x3d
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	335c      	adds	r3, #92	; 0x5c
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 fc6f 	bl	80078b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2340      	movs	r3, #64	; 0x40
 8003fe8:	6093      	str	r3, [r2, #8]
}
 8003fea:	e254      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11a      	bne.n	8004038 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	461a      	mov	r2, r3
 8004010:	2308      	movs	r3, #8
 8004012:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	3361      	adds	r3, #97	; 0x61
 8004022:	2205      	movs	r2, #5
 8004024:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f003 fc40 	bl	80078b6 <USB_HC_Halt>
}
 8004036:	e22e      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	4413      	add	r3, r2
 8004040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b10      	cmp	r3, #16
 800404c:	d140      	bne.n	80040d0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	335c      	adds	r3, #92	; 0x5c
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3361      	adds	r3, #97	; 0x61
 800406e:	2203      	movs	r2, #3
 8004070:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	333d      	adds	r3, #61	; 0x3d
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d112      	bne.n	80040ac <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	333c      	adds	r3, #60	; 0x3c
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d108      	bne.n	80040ac <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	333d      	adds	r3, #61	; 0x3d
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f003 fbfd 	bl	80078b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c8:	461a      	mov	r2, r3
 80040ca:	2310      	movs	r3, #16
 80040cc:	6093      	str	r3, [r2, #8]
}
 80040ce:	e1e2      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	d164      	bne.n	80041b0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d111      	bne.n	8004112 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3361      	adds	r3, #97	; 0x61
 80040fc:	2206      	movs	r2, #6
 80040fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f003 fbd3 	bl	80078b6 <USB_HC_Halt>
 8004110:	e044      	b.n	800419c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	335c      	adds	r3, #92	; 0x5c
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	202c      	movs	r0, #44	; 0x2c
 800412a:	fb00 f303 	mul.w	r3, r0, r3
 800412e:	440b      	add	r3, r1
 8004130:	335c      	adds	r3, #92	; 0x5c
 8004132:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	335c      	adds	r3, #92	; 0x5c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d920      	bls.n	800418a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	335c      	adds	r3, #92	; 0x5c
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	212c      	movs	r1, #44	; 0x2c
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	4413      	add	r3, r2
 8004166:	3360      	adds	r3, #96	; 0x60
 8004168:	2204      	movs	r2, #4
 800416a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	b2d9      	uxtb	r1, r3
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	202c      	movs	r0, #44	; 0x2c
 8004176:	fb00 f303 	mul.w	r3, r0, r3
 800417a:	4413      	add	r3, r2
 800417c:	3360      	adds	r3, #96	; 0x60
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f005 fe3a 	bl	8009dfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004188:	e008      	b.n	800419c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	4413      	add	r3, r2
 8004196:	3360      	adds	r3, #96	; 0x60
 8004198:	2202      	movs	r2, #2
 800419a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	461a      	mov	r2, r3
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	6093      	str	r3, [r2, #8]
}
 80041ae:	e172      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c6:	d11b      	bne.n	8004200 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	3361      	adds	r3, #97	; 0x61
 80041d6:	2208      	movs	r2, #8
 80041d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f003 fb66 	bl	80078b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f6:	461a      	mov	r2, r3
 80041f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041fc:	6093      	str	r3, [r2, #8]
}
 80041fe:	e14a      	b.n	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	f040 813f 	bne.w	8004496 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	212c      	movs	r1, #44	; 0x2c
 800421e:	fb01 f303 	mul.w	r3, r1, r3
 8004222:	4413      	add	r3, r2
 8004224:	3361      	adds	r3, #97	; 0x61
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d17d      	bne.n	8004328 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	212c      	movs	r1, #44	; 0x2c
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	3360      	adds	r3, #96	; 0x60
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	212c      	movs	r1, #44	; 0x2c
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4413      	add	r3, r2
 800424a:	333f      	adds	r3, #63	; 0x3f
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d00a      	beq.n	8004268 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	212c      	movs	r1, #44	; 0x2c
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	333f      	adds	r3, #63	; 0x3f
 8004260:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004262:	2b03      	cmp	r3, #3
 8004264:	f040 8100 	bne.w	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d113      	bne.n	8004298 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	3355      	adds	r3, #85	; 0x55
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	f083 0301 	eor.w	r3, r3, #1
 8004284:	b2d8      	uxtb	r0, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	212c      	movs	r1, #44	; 0x2c
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	4413      	add	r3, r2
 8004292:	3355      	adds	r3, #85	; 0x55
 8004294:	4602      	mov	r2, r0
 8004296:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b01      	cmp	r3, #1
 800429e:	f040 80e3 	bne.w	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	334c      	adds	r3, #76	; 0x4c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80d8 	beq.w	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	212c      	movs	r1, #44	; 0x2c
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	334c      	adds	r3, #76	; 0x4c
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	202c      	movs	r0, #44	; 0x2c
 80042ce:	fb00 f202 	mul.w	r2, r0, r2
 80042d2:	440a      	add	r2, r1
 80042d4:	3240      	adds	r2, #64	; 0x40
 80042d6:	8812      	ldrh	r2, [r2, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	3b01      	subs	r3, #1
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	202c      	movs	r0, #44	; 0x2c
 80042e2:	fb00 f202 	mul.w	r2, r0, r2
 80042e6:	440a      	add	r2, r1
 80042e8:	3240      	adds	r2, #64	; 0x40
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80b5 	beq.w	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	212c      	movs	r1, #44	; 0x2c
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	4413      	add	r3, r2
 800430a:	3355      	adds	r3, #85	; 0x55
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	f083 0301 	eor.w	r3, r3, #1
 8004312:	b2d8      	uxtb	r0, r3
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	3355      	adds	r3, #85	; 0x55
 8004322:	4602      	mov	r2, r0
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e09f      	b.n	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	3361      	adds	r3, #97	; 0x61
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d109      	bne.n	8004350 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3360      	adds	r3, #96	; 0x60
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e08b      	b.n	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	212c      	movs	r1, #44	; 0x2c
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	4413      	add	r3, r2
 800435c:	3361      	adds	r3, #97	; 0x61
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d109      	bne.n	8004378 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	3360      	adds	r3, #96	; 0x60
 8004372:	2202      	movs	r2, #2
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	e077      	b.n	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3361      	adds	r3, #97	; 0x61
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d109      	bne.n	80043a0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3360      	adds	r3, #96	; 0x60
 800439a:	2205      	movs	r2, #5
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e063      	b.n	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3361      	adds	r3, #97	; 0x61
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b06      	cmp	r3, #6
 80043b2:	d009      	beq.n	80043c8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3361      	adds	r3, #97	; 0x61
 80043c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d14f      	bne.n	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	212c      	movs	r1, #44	; 0x2c
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	335c      	adds	r3, #92	; 0x5c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	202c      	movs	r0, #44	; 0x2c
 80043e0:	fb00 f303 	mul.w	r3, r0, r3
 80043e4:	440b      	add	r3, r1
 80043e6:	335c      	adds	r3, #92	; 0x5c
 80043e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	335c      	adds	r3, #92	; 0x5c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d912      	bls.n	8004424 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	212c      	movs	r1, #44	; 0x2c
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	335c      	adds	r3, #92	; 0x5c
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	212c      	movs	r1, #44	; 0x2c
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	3360      	adds	r3, #96	; 0x60
 800441e:	2204      	movs	r2, #4
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e021      	b.n	8004468 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	212c      	movs	r1, #44	; 0x2c
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	3360      	adds	r3, #96	; 0x60
 8004432:	2202      	movs	r2, #2
 8004434:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800444c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004454:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	461a      	mov	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004474:	461a      	mov	r2, r3
 8004476:	2302      	movs	r3, #2
 8004478:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	b2d9      	uxtb	r1, r3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	202c      	movs	r0, #44	; 0x2c
 8004484:	fb00 f303 	mul.w	r3, r0, r3
 8004488:	4413      	add	r3, r2
 800448a:	3360      	adds	r3, #96	; 0x60
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f005 fcb3 	bl	8009dfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004496:	bf00      	nop
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b08a      	sub	sp, #40	; 0x28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	0c5b      	lsrs	r3, r3, #17
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d004      	beq.n	80044e4 <HCD_RXQLVL_IRQHandler+0x46>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b05      	cmp	r3, #5
 80044de:	f000 80a9 	beq.w	8004634 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044e2:	e0aa      	b.n	800463a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80a6 	beq.w	8004638 <HCD_RXQLVL_IRQHandler+0x19a>
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	212c      	movs	r1, #44	; 0x2c
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	3344      	adds	r3, #68	; 0x44
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 809b 	beq.w	8004638 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	3350      	adds	r3, #80	; 0x50
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	441a      	add	r2, r3
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	202c      	movs	r0, #44	; 0x2c
 800451c:	fb00 f303 	mul.w	r3, r0, r3
 8004520:	440b      	add	r3, r1
 8004522:	334c      	adds	r3, #76	; 0x4c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d87a      	bhi.n	8004620 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3344      	adds	r3, #68	; 0x44
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	b292      	uxth	r2, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f002 fd0e 	bl	8006f64 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	212c      	movs	r1, #44	; 0x2c
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	4413      	add	r3, r2
 8004554:	3344      	adds	r3, #68	; 0x44
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	441a      	add	r2, r3
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	202c      	movs	r0, #44	; 0x2c
 8004562:	fb00 f303 	mul.w	r3, r0, r3
 8004566:	440b      	add	r3, r1
 8004568:	3344      	adds	r3, #68	; 0x44
 800456a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3350      	adds	r3, #80	; 0x50
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	441a      	add	r2, r3
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	202c      	movs	r0, #44	; 0x2c
 8004586:	fb00 f303 	mul.w	r3, r0, r3
 800458a:	440b      	add	r3, r1
 800458c:	3350      	adds	r3, #80	; 0x50
 800458e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	0cdb      	lsrs	r3, r3, #19
 80045a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	212c      	movs	r1, #44	; 0x2c
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	3340      	adds	r3, #64	; 0x40
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d13c      	bne.n	8004638 <HCD_RXQLVL_IRQHandler+0x19a>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d039      	beq.n	8004638 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045da:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045e2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	461a      	mov	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	3354      	adds	r3, #84	; 0x54
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f083 0301 	eor.w	r3, r3, #1
 800460a:	b2d8      	uxtb	r0, r3
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	212c      	movs	r1, #44	; 0x2c
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	4413      	add	r3, r2
 8004618:	3354      	adds	r3, #84	; 0x54
 800461a:	4602      	mov	r2, r0
 800461c:	701a      	strb	r2, [r3, #0]
      break;
 800461e:	e00b      	b.n	8004638 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	212c      	movs	r1, #44	; 0x2c
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	4413      	add	r3, r2
 800462c:	3360      	adds	r3, #96	; 0x60
 800462e:	2204      	movs	r2, #4
 8004630:	701a      	strb	r2, [r3, #0]
      break;
 8004632:	e001      	b.n	8004638 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004634:	bf00      	nop
 8004636:	e000      	b.n	800463a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004638:	bf00      	nop
  }
}
 800463a:	bf00      	nop
 800463c:	3728      	adds	r7, #40	; 0x28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800466e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b02      	cmp	r3, #2
 8004678:	d10b      	bne.n	8004692 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f005 fb9d 	bl	8009dc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f043 0302 	orr.w	r3, r3, #2
 8004690:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b08      	cmp	r3, #8
 800469a:	d132      	bne.n	8004702 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f043 0308 	orr.w	r3, r3, #8
 80046a2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d126      	bne.n	80046fc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d113      	bne.n	80046de <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046c0:	d106      	bne.n	80046d0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2102      	movs	r1, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f002 fdb9 	bl	8007240 <USB_InitFSLSPClkSel>
 80046ce:	e011      	b.n	80046f4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f002 fdb2 	bl	8007240 <USB_InitFSLSPClkSel>
 80046dc:	e00a      	b.n	80046f4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d106      	bne.n	80046f4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ec:	461a      	mov	r2, r3
 80046ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80046f2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f005 fb8f 	bl	8009e18 <HAL_HCD_PortEnabled_Callback>
 80046fa:	e002      	b.n	8004702 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f005 fb99 	bl	8009e34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b20      	cmp	r3, #32
 800470a:	d103      	bne.n	8004714 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f043 0320 	orr.w	r3, r3, #32
 8004712:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6013      	str	r3, [r2, #0]
}
 8004720:	bf00      	nop
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e12b      	b.n	8004992 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd fe00 	bl	8002354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800478a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800478c:	f002 f89c 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 8004790:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4a81      	ldr	r2, [pc, #516]	; (800499c <HAL_I2C_Init+0x274>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d807      	bhi.n	80047ac <HAL_I2C_Init+0x84>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a80      	ldr	r2, [pc, #512]	; (80049a0 <HAL_I2C_Init+0x278>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	bf94      	ite	ls
 80047a4:	2301      	movls	r3, #1
 80047a6:	2300      	movhi	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e006      	b.n	80047ba <HAL_I2C_Init+0x92>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a7d      	ldr	r2, [pc, #500]	; (80049a4 <HAL_I2C_Init+0x27c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bf94      	ite	ls
 80047b4:	2301      	movls	r3, #1
 80047b6:	2300      	movhi	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0e7      	b.n	8004992 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a78      	ldr	r2, [pc, #480]	; (80049a8 <HAL_I2C_Init+0x280>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	0c9b      	lsrs	r3, r3, #18
 80047cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4a6a      	ldr	r2, [pc, #424]	; (800499c <HAL_I2C_Init+0x274>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d802      	bhi.n	80047fc <HAL_I2C_Init+0xd4>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	3301      	adds	r3, #1
 80047fa:	e009      	b.n	8004810 <HAL_I2C_Init+0xe8>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	4a69      	ldr	r2, [pc, #420]	; (80049ac <HAL_I2C_Init+0x284>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	3301      	adds	r3, #1
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	430b      	orrs	r3, r1
 8004816:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004822:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	495c      	ldr	r1, [pc, #368]	; (800499c <HAL_I2C_Init+0x274>)
 800482c:	428b      	cmp	r3, r1
 800482e:	d819      	bhi.n	8004864 <HAL_I2C_Init+0x13c>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e59      	subs	r1, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	fbb1 f3f3 	udiv	r3, r1, r3
 800483e:	1c59      	adds	r1, r3, #1
 8004840:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004844:	400b      	ands	r3, r1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_I2C_Init+0x138>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1e59      	subs	r1, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	fbb1 f3f3 	udiv	r3, r1, r3
 8004858:	3301      	adds	r3, #1
 800485a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485e:	e051      	b.n	8004904 <HAL_I2C_Init+0x1dc>
 8004860:	2304      	movs	r3, #4
 8004862:	e04f      	b.n	8004904 <HAL_I2C_Init+0x1dc>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d111      	bne.n	8004890 <HAL_I2C_Init+0x168>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1e58      	subs	r0, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	440b      	add	r3, r1
 800487a:	fbb0 f3f3 	udiv	r3, r0, r3
 800487e:	3301      	adds	r3, #1
 8004880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e012      	b.n	80048b6 <HAL_I2C_Init+0x18e>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e58      	subs	r0, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	0099      	lsls	r1, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_I2C_Init+0x196>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e022      	b.n	8004904 <HAL_I2C_Init+0x1dc>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10e      	bne.n	80048e4 <HAL_I2C_Init+0x1bc>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1e58      	subs	r0, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	440b      	add	r3, r1
 80048d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d8:	3301      	adds	r3, #1
 80048da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	e00f      	b.n	8004904 <HAL_I2C_Init+0x1dc>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1e58      	subs	r0, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	0099      	lsls	r1, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fa:	3301      	adds	r3, #1
 80048fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	6809      	ldr	r1, [r1, #0]
 8004908:	4313      	orrs	r3, r2
 800490a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6911      	ldr	r1, [r2, #16]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68d2      	ldr	r2, [r2, #12]
 800493e:	4311      	orrs	r1, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	430b      	orrs	r3, r1
 8004946:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	000186a0 	.word	0x000186a0
 80049a0:	001e847f 	.word	0x001e847f
 80049a4:	003d08ff 	.word	0x003d08ff
 80049a8:	431bde83 	.word	0x431bde83
 80049ac:	10624dd3 	.word	0x10624dd3

080049b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	817b      	strh	r3, [r7, #10]
 80049c2:	460b      	mov	r3, r1
 80049c4:	813b      	strh	r3, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ca:	f7fd ffab 	bl	8002924 <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	f040 80d9 	bne.w	8004b90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2319      	movs	r3, #25
 80049e4:	2201      	movs	r2, #1
 80049e6:	496d      	ldr	r1, [pc, #436]	; (8004b9c <HAL_I2C_Mem_Write+0x1ec>)
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fc7f 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
 80049f6:	e0cc      	b.n	8004b92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_I2C_Mem_Write+0x56>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e0c5      	b.n	8004b92 <HAL_I2C_Mem_Write+0x1e2>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d007      	beq.n	8004a2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2221      	movs	r2, #33	; 0x21
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a3a      	ldr	r2, [r7, #32]
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a4d      	ldr	r2, [pc, #308]	; (8004ba0 <HAL_I2C_Mem_Write+0x1f0>)
 8004a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a6e:	88f8      	ldrh	r0, [r7, #6]
 8004a70:	893a      	ldrh	r2, [r7, #8]
 8004a72:	8979      	ldrh	r1, [r7, #10]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fab6 	bl	8004ff0 <I2C_RequestMemoryWrite>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d052      	beq.n	8004b30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e081      	b.n	8004b92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fd00 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d107      	bne.n	8004ab6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e06b      	b.n	8004b92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	781a      	ldrb	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d11b      	bne.n	8004b30 <HAL_I2C_Mem_Write+0x180>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1aa      	bne.n	8004a8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fcec 	bl	800551a <I2C_WaitOnBTFFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d107      	bne.n	8004b60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e016      	b.n	8004b92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	00100002 	.word	0x00100002
 8004ba0:	ffff0000 	.word	0xffff0000

08004ba4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08c      	sub	sp, #48	; 0x30
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	4608      	mov	r0, r1
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	817b      	strh	r3, [r7, #10]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	813b      	strh	r3, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bbe:	f7fd feb1 	bl	8002924 <HAL_GetTick>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	f040 8208 	bne.w	8004fe2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2319      	movs	r3, #25
 8004bd8:	2201      	movs	r2, #1
 8004bda:	497b      	ldr	r1, [pc, #492]	; (8004dc8 <HAL_I2C_Mem_Read+0x224>)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fb85 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
 8004bea:	e1fb      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2C_Mem_Read+0x56>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e1f4      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d007      	beq.n	8004c20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2222      	movs	r2, #34	; 0x22
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2240      	movs	r2, #64	; 0x40
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a5b      	ldr	r2, [pc, #364]	; (8004dcc <HAL_I2C_Mem_Read+0x228>)
 8004c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c62:	88f8      	ldrh	r0, [r7, #6]
 8004c64:	893a      	ldrh	r2, [r7, #8]
 8004c66:	8979      	ldrh	r1, [r7, #10]
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4603      	mov	r3, r0
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa52 	bl	800511c <I2C_RequestMemoryRead>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e1b0      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d113      	bne.n	8004cb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	623b      	str	r3, [r7, #32]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e184      	b.n	8004fbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d11b      	bne.n	8004cf2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	e164      	b.n	8004fbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d11b      	bne.n	8004d32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	e144      	b.n	8004fbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d48:	e138      	b.n	8004fbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	f200 80f1 	bhi.w	8004f36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d123      	bne.n	8004da4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fc1b 	bl	800559c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e139      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004da2:	e10b      	b.n	8004fbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d14e      	bne.n	8004e4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	2200      	movs	r2, #0
 8004db4:	4906      	ldr	r1, [pc, #24]	; (8004dd0 <HAL_I2C_Mem_Read+0x22c>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fa98 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e10e      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
 8004dc6:	bf00      	nop
 8004dc8:	00100002 	.word	0x00100002
 8004dcc:	ffff0000 	.word	0xffff0000
 8004dd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e48:	e0b8      	b.n	8004fbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	2200      	movs	r2, #0
 8004e52:	4966      	ldr	r1, [pc, #408]	; (8004fec <HAL_I2C_Mem_Read+0x448>)
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fa49 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0bf      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2200      	movs	r2, #0
 8004eae:	494f      	ldr	r1, [pc, #316]	; (8004fec <HAL_I2C_Mem_Read+0x448>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fa1b 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e091      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f34:	e042      	b.n	8004fbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fb2e 	bl	800559c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e04c      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d118      	bne.n	8004fbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f47f aec2 	bne.w	8004d4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3728      	adds	r7, #40	; 0x28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	00010004 	.word	0x00010004

08004ff0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	817b      	strh	r3, [r7, #10]
 8005002:	460b      	mov	r3, r1
 8005004:	813b      	strh	r3, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2200      	movs	r2, #0
 8005022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f960 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005040:	d103      	bne.n	800504a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e05f      	b.n	800510e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800504e:	897b      	ldrh	r3, [r7, #10]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800505c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	6a3a      	ldr	r2, [r7, #32]
 8005062:	492d      	ldr	r1, [pc, #180]	; (8005118 <I2C_RequestMemoryWrite+0x128>)
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f998 	bl	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e04c      	b.n	800510e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	6a39      	ldr	r1, [r7, #32]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fa02 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00d      	beq.n	80050b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d107      	bne.n	80050b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e02b      	b.n	800510e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d105      	bne.n	80050c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050bc:	893b      	ldrh	r3, [r7, #8]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	611a      	str	r2, [r3, #16]
 80050c6:	e021      	b.n	800510c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050c8:	893b      	ldrh	r3, [r7, #8]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d8:	6a39      	ldr	r1, [r7, #32]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f9dc 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d107      	bne.n	80050fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e005      	b.n	800510e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005102:	893b      	ldrh	r3, [r7, #8]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	00010002 	.word	0x00010002

0800511c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	4608      	mov	r0, r1
 8005126:	4611      	mov	r1, r2
 8005128:	461a      	mov	r2, r3
 800512a:	4603      	mov	r3, r0
 800512c:	817b      	strh	r3, [r7, #10]
 800512e:	460b      	mov	r3, r1
 8005130:	813b      	strh	r3, [r7, #8]
 8005132:	4613      	mov	r3, r2
 8005134:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005144:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005154:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	2200      	movs	r2, #0
 800515e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f8c2 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00d      	beq.n	800518a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517c:	d103      	bne.n	8005186 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e0aa      	b.n	80052e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800518a:	897b      	ldrh	r3, [r7, #10]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005198:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	4952      	ldr	r1, [pc, #328]	; (80052e8 <I2C_RequestMemoryRead+0x1cc>)
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f8fa 	bl	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e097      	b.n	80052e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c8:	6a39      	ldr	r1, [r7, #32]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f964 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00d      	beq.n	80051f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d107      	bne.n	80051ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e076      	b.n	80052e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d105      	bne.n	8005204 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051f8:	893b      	ldrh	r3, [r7, #8]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	611a      	str	r2, [r3, #16]
 8005202:	e021      	b.n	8005248 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005204:	893b      	ldrh	r3, [r7, #8]
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	b29b      	uxth	r3, r3
 800520a:	b2da      	uxtb	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	6a39      	ldr	r1, [r7, #32]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f93e 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00d      	beq.n	800523e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b04      	cmp	r3, #4
 8005228:	d107      	bne.n	800523a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005238:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e050      	b.n	80052e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800523e:	893b      	ldrh	r3, [r7, #8]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524a:	6a39      	ldr	r1, [r7, #32]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f923 	bl	8005498 <I2C_WaitOnTXEFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2b04      	cmp	r3, #4
 800525e:	d107      	bne.n	8005270 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e035      	b.n	80052e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005282:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	2200      	movs	r2, #0
 800528c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f82b 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052aa:	d103      	bne.n	80052b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e013      	b.n	80052e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052b8:	897b      	ldrh	r3, [r7, #10]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	6a3a      	ldr	r2, [r7, #32]
 80052cc:	4906      	ldr	r1, [pc, #24]	; (80052e8 <I2C_RequestMemoryRead+0x1cc>)
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f863 	bl	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	00010002 	.word	0x00010002

080052ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052fc:	e025      	b.n	800534a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005304:	d021      	beq.n	800534a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005306:	f7fd fb0d 	bl	8002924 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d116      	bne.n	800534a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e023      	b.n	8005392 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10d      	bne.n	8005370 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	43da      	mvns	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	bf0c      	ite	eq
 8005366:	2301      	moveq	r3, #1
 8005368:	2300      	movne	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	461a      	mov	r2, r3
 800536e:	e00c      	b.n	800538a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	43da      	mvns	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4013      	ands	r3, r2
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	429a      	cmp	r2, r3
 800538e:	d0b6      	beq.n	80052fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a8:	e051      	b.n	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b8:	d123      	bne.n	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f043 0204 	orr.w	r2, r3, #4
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e046      	b.n	8005490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005408:	d021      	beq.n	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540a:	f7fd fa8b 	bl	8002924 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d302      	bcc.n	8005420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d116      	bne.n	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f043 0220 	orr.w	r2, r3, #32
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e020      	b.n	8005490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	0c1b      	lsrs	r3, r3, #16
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d10c      	bne.n	8005472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	43da      	mvns	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4013      	ands	r3, r2
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf14      	ite	ne
 800546a:	2301      	movne	r3, #1
 800546c:	2300      	moveq	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e00b      	b.n	800548a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	43da      	mvns	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4013      	ands	r3, r2
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d18d      	bne.n	80053aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a4:	e02d      	b.n	8005502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f8ce 	bl	8005648 <I2C_IsAcknowledgeFailed>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e02d      	b.n	8005512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054bc:	d021      	beq.n	8005502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054be:	f7fd fa31 	bl	8002924 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d116      	bne.n	8005502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f043 0220 	orr.w	r2, r3, #32
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e007      	b.n	8005512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	d1ca      	bne.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005526:	e02d      	b.n	8005584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f88d 	bl	8005648 <I2C_IsAcknowledgeFailed>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e02d      	b.n	8005594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553e:	d021      	beq.n	8005584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005540:	f7fd f9f0 	bl	8002924 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d116      	bne.n	8005584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e007      	b.n	8005594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b04      	cmp	r3, #4
 8005590:	d1ca      	bne.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a8:	e042      	b.n	8005630 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d119      	bne.n	80055ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0210 	mvn.w	r2, #16
 80055c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e029      	b.n	8005640 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ec:	f7fd f99a 	bl	8002924 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d116      	bne.n	8005630 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e007      	b.n	8005640 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d1b5      	bne.n	80055aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800565a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565e:	d11b      	bne.n	8005698 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005668:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f043 0204 	orr.w	r2, r3, #4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e128      	b.n	800590c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a90      	ldr	r2, [pc, #576]	; (8005914 <HAL_I2S_Init+0x26c>)
 80056d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7fc fedd 	bl	8002494 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80056f0:	f023 030f 	bic.w	r3, r3, #15
 80056f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2202      	movs	r2, #2
 80056fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d060      	beq.n	80057c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800570e:	2310      	movs	r3, #16
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e001      	b.n	8005718 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005714:	2320      	movs	r3, #32
 8005716:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b20      	cmp	r3, #32
 800571e:	d802      	bhi.n	8005726 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005726:	2001      	movs	r0, #1
 8005728:	f001 f9c4 	bl	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq>
 800572c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005736:	d125      	bne.n	8005784 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d010      	beq.n	8005762 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	fbb2 f2f3 	udiv	r2, r2, r3
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	3305      	adds	r3, #5
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	e01f      	b.n	80057a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	fbb2 f2f3 	udiv	r2, r2, r3
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	461a      	mov	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	3305      	adds	r3, #5
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e00e      	b.n	80057a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	fbb2 f2f3 	udiv	r2, r2, r3
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	461a      	mov	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	fbb2 f3f3 	udiv	r3, r2, r3
 800579e:	3305      	adds	r3, #5
 80057a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4a5c      	ldr	r2, [pc, #368]	; (8005918 <HAL_I2S_Init+0x270>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	08db      	lsrs	r3, r3, #3
 80057ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	085b      	lsrs	r3, r3, #1
 80057be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e003      	b.n	80057d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80057c8:	2302      	movs	r3, #2
 80057ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d902      	bls.n	80057dc <HAL_I2S_Init+0x134>
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2bff      	cmp	r3, #255	; 0xff
 80057da:	d907      	bls.n	80057ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e0:	f043 0210 	orr.w	r2, r3, #16
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e08f      	b.n	800590c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	ea42 0103 	orr.w	r1, r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800580a:	f023 030f 	bic.w	r3, r3, #15
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6851      	ldr	r1, [r2, #4]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6892      	ldr	r2, [r2, #8]
 8005816:	4311      	orrs	r1, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68d2      	ldr	r2, [r2, #12]
 800581c:	4311      	orrs	r1, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6992      	ldr	r2, [r2, #24]
 8005822:	430a      	orrs	r2, r1
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800582e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d161      	bne.n	80058fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a38      	ldr	r2, [pc, #224]	; (800591c <HAL_I2S_Init+0x274>)
 800583c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a37      	ldr	r2, [pc, #220]	; (8005920 <HAL_I2S_Init+0x278>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d101      	bne.n	800584c <HAL_I2S_Init+0x1a4>
 8005848:	4b36      	ldr	r3, [pc, #216]	; (8005924 <HAL_I2S_Init+0x27c>)
 800584a:	e001      	b.n	8005850 <HAL_I2S_Init+0x1a8>
 800584c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	4932      	ldr	r1, [pc, #200]	; (8005920 <HAL_I2S_Init+0x278>)
 8005858:	428a      	cmp	r2, r1
 800585a:	d101      	bne.n	8005860 <HAL_I2S_Init+0x1b8>
 800585c:	4a31      	ldr	r2, [pc, #196]	; (8005924 <HAL_I2S_Init+0x27c>)
 800585e:	e001      	b.n	8005864 <HAL_I2S_Init+0x1bc>
 8005860:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005864:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005868:	f023 030f 	bic.w	r3, r3, #15
 800586c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <HAL_I2S_Init+0x278>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_I2S_Init+0x1d4>
 8005878:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <HAL_I2S_Init+0x27c>)
 800587a:	e001      	b.n	8005880 <HAL_I2S_Init+0x1d8>
 800587c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005880:	2202      	movs	r2, #2
 8005882:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a25      	ldr	r2, [pc, #148]	; (8005920 <HAL_I2S_Init+0x278>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d101      	bne.n	8005892 <HAL_I2S_Init+0x1ea>
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <HAL_I2S_Init+0x27c>)
 8005890:	e001      	b.n	8005896 <HAL_I2S_Init+0x1ee>
 8005892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a2:	d003      	beq.n	80058ac <HAL_I2S_Init+0x204>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80058ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e001      	b.n	80058b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058c2:	4313      	orrs	r3, r2
 80058c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058cc:	4313      	orrs	r3, r2
 80058ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	4313      	orrs	r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a0d      	ldr	r2, [pc, #52]	; (8005920 <HAL_I2S_Init+0x278>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d101      	bne.n	80058f4 <HAL_I2S_Init+0x24c>
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <HAL_I2S_Init+0x27c>)
 80058f2:	e001      	b.n	80058f8 <HAL_I2S_Init+0x250>
 80058f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058f8:	897a      	ldrh	r2, [r7, #10]
 80058fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	08005a1f 	.word	0x08005a1f
 8005918:	cccccccd 	.word	0xcccccccd
 800591c:	08005b35 	.word	0x08005b35
 8005920:	40003800 	.word	0x40003800
 8005924:	40003400 	.word	0x40003400

08005928 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	881a      	ldrh	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	1c9a      	adds	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10e      	bne.n	80059b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff ffb8 	bl	8005928 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	b292      	uxth	r2, r2
 80059d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10e      	bne.n	8005a16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff93 	bl	800593c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d13a      	bne.n	8005ab0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d109      	bne.n	8005a58 <I2S_IRQHandler+0x3a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d102      	bne.n	8005a58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff ffb4 	bl	80059c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	d126      	bne.n	8005ab0 <I2S_IRQHandler+0x92>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d11f      	bne.n	8005ab0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f043 0202 	orr.w	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ff50 	bl	8005950 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d136      	bne.n	8005b2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d109      	bne.n	8005ada <I2S_IRQHandler+0xbc>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d102      	bne.n	8005ada <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ff45 	bl	8005964 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d122      	bne.n	8005b2a <I2S_IRQHandler+0x10c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d11b      	bne.n	8005b2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1c:	f043 0204 	orr.w	r2, r3, #4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ff13 	bl	8005950 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a92      	ldr	r2, [pc, #584]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005b4e:	4b92      	ldr	r3, [pc, #584]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b50:	e001      	b.n	8005b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a8b      	ldr	r2, [pc, #556]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d101      	bne.n	8005b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005b6c:	4b8a      	ldr	r3, [pc, #552]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b6e:	e001      	b.n	8005b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005b70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b80:	d004      	beq.n	8005b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f040 8099 	bne.w	8005cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d107      	bne.n	8005ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f925 	bl	8005df0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9c8 	bl	8005f50 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d13a      	bne.n	8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d035      	beq.n	8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6e      	ldr	r2, [pc, #440]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d101      	bne.n	8005be2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005bde:	4b6e      	ldr	r3, [pc, #440]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005be0:	e001      	b.n	8005be6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4969      	ldr	r1, [pc, #420]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bee:	428b      	cmp	r3, r1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005bf2:	4b69      	ldr	r3, [pc, #420]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bf4:	e001      	b.n	8005bfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bfe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f043 0202 	orr.w	r2, r3, #2
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fe88 	bl	8005950 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	f040 80c3 	bne.w	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80bd 	beq.w	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a49      	ldr	r2, [pc, #292]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d101      	bne.n	8005c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005c72:	4b49      	ldr	r3, [pc, #292]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c74:	e001      	b.n	8005c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4944      	ldr	r1, [pc, #272]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c82:	428b      	cmp	r3, r1
 8005c84:	d101      	bne.n	8005c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005c86:	4b44      	ldr	r3, [pc, #272]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c88:	e001      	b.n	8005c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c94:	2300      	movs	r3, #0
 8005c96:	60bb      	str	r3, [r7, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	f043 0204 	orr.w	r2, r3, #4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff fe4a 	bl	8005950 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005cbc:	e089      	b.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d107      	bne.n	8005cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f8be 	bl	8005e54 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d107      	bne.n	8005cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8fd 	bl	8005eec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d12f      	bne.n	8005d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d02a      	beq.n	8005d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d101      	bne.n	8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005d20:	4b1d      	ldr	r3, [pc, #116]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d22:	e001      	b.n	8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4919      	ldr	r1, [pc, #100]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d30:	428b      	cmp	r3, r1
 8005d32:	d101      	bne.n	8005d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d34:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d36:	e001      	b.n	8005d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	f043 0202 	orr.w	r2, r3, #2
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fdfa 	bl	8005950 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d136      	bne.n	8005dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d031      	beq.n	8005dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005d7a:	4b07      	ldr	r3, [pc, #28]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d7c:	e001      	b.n	8005d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4902      	ldr	r1, [pc, #8]	; (8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d8a:	428b      	cmp	r3, r1
 8005d8c:	d106      	bne.n	8005d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005d8e:	4b02      	ldr	r3, [pc, #8]	; (8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d90:	e006      	b.n	8005da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005d92:	bf00      	nop
 8005d94:	40003800 	.word	0x40003800
 8005d98:	40003400 	.word	0x40003400
 8005d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005da4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005db4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	f043 0204 	orr.w	r2, r3, #4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fdc0 	bl	8005950 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dd0:	e000      	b.n	8005dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dd2:	bf00      	nop
}
 8005dd4:	bf00      	nop
 8005dd6:	3720      	adds	r7, #32
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	1c99      	adds	r1, r3, #2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6251      	str	r1, [r2, #36]	; 0x24
 8005e02:	881a      	ldrh	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d113      	bne.n	8005e4a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff ffc9 	bl	8005ddc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	1c99      	adds	r1, r3, #2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6251      	str	r1, [r2, #36]	; 0x24
 8005e66:	8819      	ldrh	r1, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <I2SEx_TxISR_I2SExt+0x90>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <I2SEx_TxISR_I2SExt+0x22>
 8005e72:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <I2SEx_TxISR_I2SExt+0x94>)
 8005e74:	e001      	b.n	8005e7a <I2SEx_TxISR_I2SExt+0x26>
 8005e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d121      	bne.n	8005eda <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a12      	ldr	r2, [pc, #72]	; (8005ee4 <I2SEx_TxISR_I2SExt+0x90>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <I2SEx_TxISR_I2SExt+0x50>
 8005ea0:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <I2SEx_TxISR_I2SExt+0x94>)
 8005ea2:	e001      	b.n	8005ea8 <I2SEx_TxISR_I2SExt+0x54>
 8005ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	490d      	ldr	r1, [pc, #52]	; (8005ee4 <I2SEx_TxISR_I2SExt+0x90>)
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	d101      	bne.n	8005eb8 <I2SEx_TxISR_I2SExt+0x64>
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <I2SEx_TxISR_I2SExt+0x94>)
 8005eb6:	e001      	b.n	8005ebc <I2SEx_TxISR_I2SExt+0x68>
 8005eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ebc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ec0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff ff81 	bl	8005ddc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40003800 	.word	0x40003800
 8005ee8:	40003400 	.word	0x40003400

08005eec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68d8      	ldr	r0, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	1c99      	adds	r1, r3, #2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f04:	b282      	uxth	r2, r0
 8005f06:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d113      	bne.n	8005f48 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f2e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff ff4a 	bl	8005ddc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a20      	ldr	r2, [pc, #128]	; (8005fe0 <I2SEx_RxISR_I2SExt+0x90>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d101      	bne.n	8005f66 <I2SEx_RxISR_I2SExt+0x16>
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <I2SEx_RxISR_I2SExt+0x94>)
 8005f64:	e001      	b.n	8005f6a <I2SEx_RxISR_I2SExt+0x1a>
 8005f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f6a:	68d8      	ldr	r0, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	1c99      	adds	r1, r3, #2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f76:	b282      	uxth	r2, r0
 8005f78:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d121      	bne.n	8005fd6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <I2SEx_RxISR_I2SExt+0x90>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d101      	bne.n	8005fa0 <I2SEx_RxISR_I2SExt+0x50>
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <I2SEx_RxISR_I2SExt+0x94>)
 8005f9e:	e001      	b.n	8005fa4 <I2SEx_RxISR_I2SExt+0x54>
 8005fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	490d      	ldr	r1, [pc, #52]	; (8005fe0 <I2SEx_RxISR_I2SExt+0x90>)
 8005fac:	428b      	cmp	r3, r1
 8005fae:	d101      	bne.n	8005fb4 <I2SEx_RxISR_I2SExt+0x64>
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <I2SEx_RxISR_I2SExt+0x94>)
 8005fb2:	e001      	b.n	8005fb8 <I2SEx_RxISR_I2SExt+0x68>
 8005fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fbc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff03 	bl	8005ddc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40003800 	.word	0x40003800
 8005fe4:	40003400 	.word	0x40003400

08005fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e267      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d075      	beq.n	80060f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006006:	4b88      	ldr	r3, [pc, #544]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 030c 	and.w	r3, r3, #12
 800600e:	2b04      	cmp	r3, #4
 8006010:	d00c      	beq.n	800602c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006012:	4b85      	ldr	r3, [pc, #532]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800601a:	2b08      	cmp	r3, #8
 800601c:	d112      	bne.n	8006044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800601e:	4b82      	ldr	r3, [pc, #520]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800602a:	d10b      	bne.n	8006044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602c:	4b7e      	ldr	r3, [pc, #504]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d05b      	beq.n	80060f0 <HAL_RCC_OscConfig+0x108>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d157      	bne.n	80060f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e242      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d106      	bne.n	800605c <HAL_RCC_OscConfig+0x74>
 800604e:	4b76      	ldr	r3, [pc, #472]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a75      	ldr	r2, [pc, #468]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	e01d      	b.n	8006098 <HAL_RCC_OscConfig+0xb0>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006064:	d10c      	bne.n	8006080 <HAL_RCC_OscConfig+0x98>
 8006066:	4b70      	ldr	r3, [pc, #448]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a6f      	ldr	r2, [pc, #444]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 800606c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	4b6d      	ldr	r3, [pc, #436]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a6c      	ldr	r2, [pc, #432]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e00b      	b.n	8006098 <HAL_RCC_OscConfig+0xb0>
 8006080:	4b69      	ldr	r3, [pc, #420]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a68      	ldr	r2, [pc, #416]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	4b66      	ldr	r3, [pc, #408]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a65      	ldr	r2, [pc, #404]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d013      	beq.n	80060c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fc fc40 	bl	8002924 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a8:	f7fc fc3c 	bl	8002924 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	; 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e207      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ba:	4b5b      	ldr	r3, [pc, #364]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0xc0>
 80060c6:	e014      	b.n	80060f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fc fc2c 	bl	8002924 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060d0:	f7fc fc28 	bl	8002924 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b64      	cmp	r3, #100	; 0x64
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e1f3      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e2:	4b51      	ldr	r3, [pc, #324]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f0      	bne.n	80060d0 <HAL_RCC_OscConfig+0xe8>
 80060ee:	e000      	b.n	80060f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d063      	beq.n	80061c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060fe:	4b4a      	ldr	r3, [pc, #296]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800610a:	4b47      	ldr	r3, [pc, #284]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006112:	2b08      	cmp	r3, #8
 8006114:	d11c      	bne.n	8006150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006116:	4b44      	ldr	r3, [pc, #272]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d116      	bne.n	8006150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006122:	4b41      	ldr	r3, [pc, #260]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_RCC_OscConfig+0x152>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d001      	beq.n	800613a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e1c7      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613a:	4b3b      	ldr	r3, [pc, #236]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4937      	ldr	r1, [pc, #220]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 800614a:	4313      	orrs	r3, r2
 800614c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614e:	e03a      	b.n	80061c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d020      	beq.n	800619a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006158:	4b34      	ldr	r3, [pc, #208]	; (800622c <HAL_RCC_OscConfig+0x244>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fc fbe1 	bl	8002924 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006166:	f7fc fbdd 	bl	8002924 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e1a8      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006178:	4b2b      	ldr	r3, [pc, #172]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006184:	4b28      	ldr	r3, [pc, #160]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	4925      	ldr	r1, [pc, #148]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 8006194:	4313      	orrs	r3, r2
 8006196:	600b      	str	r3, [r1, #0]
 8006198:	e015      	b.n	80061c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619a:	4b24      	ldr	r3, [pc, #144]	; (800622c <HAL_RCC_OscConfig+0x244>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fc fbc0 	bl	8002924 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061a8:	f7fc fbbc 	bl	8002924 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e187      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d036      	beq.n	8006240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061da:	4b15      	ldr	r3, [pc, #84]	; (8006230 <HAL_RCC_OscConfig+0x248>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e0:	f7fc fba0 	bl	8002924 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061e8:	f7fc fb9c 	bl	8002924 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e167      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_RCC_OscConfig+0x240>)
 80061fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0f0      	beq.n	80061e8 <HAL_RCC_OscConfig+0x200>
 8006206:	e01b      	b.n	8006240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006208:	4b09      	ldr	r3, [pc, #36]	; (8006230 <HAL_RCC_OscConfig+0x248>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800620e:	f7fc fb89 	bl	8002924 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006214:	e00e      	b.n	8006234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006216:	f7fc fb85 	bl	8002924 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d907      	bls.n	8006234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e150      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
 8006228:	40023800 	.word	0x40023800
 800622c:	42470000 	.word	0x42470000
 8006230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006234:	4b88      	ldr	r3, [pc, #544]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1ea      	bne.n	8006216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8097 	beq.w	800637c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006252:	4b81      	ldr	r3, [pc, #516]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	4b7d      	ldr	r3, [pc, #500]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	4a7c      	ldr	r2, [pc, #496]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626c:	6413      	str	r3, [r2, #64]	; 0x40
 800626e:	4b7a      	ldr	r3, [pc, #488]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627e:	4b77      	ldr	r3, [pc, #476]	; (800645c <HAL_RCC_OscConfig+0x474>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d118      	bne.n	80062bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628a:	4b74      	ldr	r3, [pc, #464]	; (800645c <HAL_RCC_OscConfig+0x474>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a73      	ldr	r2, [pc, #460]	; (800645c <HAL_RCC_OscConfig+0x474>)
 8006290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006296:	f7fc fb45 	bl	8002924 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629e:	f7fc fb41 	bl	8002924 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e10c      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b0:	4b6a      	ldr	r3, [pc, #424]	; (800645c <HAL_RCC_OscConfig+0x474>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f0      	beq.n	800629e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d106      	bne.n	80062d2 <HAL_RCC_OscConfig+0x2ea>
 80062c4:	4b64      	ldr	r3, [pc, #400]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c8:	4a63      	ldr	r2, [pc, #396]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	6713      	str	r3, [r2, #112]	; 0x70
 80062d0:	e01c      	b.n	800630c <HAL_RCC_OscConfig+0x324>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d10c      	bne.n	80062f4 <HAL_RCC_OscConfig+0x30c>
 80062da:	4b5f      	ldr	r3, [pc, #380]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a5e      	ldr	r2, [pc, #376]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80062e0:	f043 0304 	orr.w	r3, r3, #4
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
 80062e6:	4b5c      	ldr	r3, [pc, #368]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	4a5b      	ldr	r2, [pc, #364]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	6713      	str	r3, [r2, #112]	; 0x70
 80062f2:	e00b      	b.n	800630c <HAL_RCC_OscConfig+0x324>
 80062f4:	4b58      	ldr	r3, [pc, #352]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	4a57      	ldr	r2, [pc, #348]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80062fa:	f023 0301 	bic.w	r3, r3, #1
 80062fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006300:	4b55      	ldr	r3, [pc, #340]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006304:	4a54      	ldr	r2, [pc, #336]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006306:	f023 0304 	bic.w	r3, r3, #4
 800630a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d015      	beq.n	8006340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006314:	f7fc fb06 	bl	8002924 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631a:	e00a      	b.n	8006332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fc fb02 	bl	8002924 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e0cb      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006332:	4b49      	ldr	r3, [pc, #292]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0ee      	beq.n	800631c <HAL_RCC_OscConfig+0x334>
 800633e:	e014      	b.n	800636a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006340:	f7fc faf0 	bl	8002924 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006346:	e00a      	b.n	800635e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fc faec 	bl	8002924 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	; 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e0b5      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635e:	4b3e      	ldr	r3, [pc, #248]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ee      	bne.n	8006348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d105      	bne.n	800637c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006370:	4b39      	ldr	r3, [pc, #228]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	4a38      	ldr	r2, [pc, #224]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800637a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80a1 	beq.w	80064c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006386:	4b34      	ldr	r3, [pc, #208]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 030c 	and.w	r3, r3, #12
 800638e:	2b08      	cmp	r3, #8
 8006390:	d05c      	beq.n	800644c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d141      	bne.n	800641e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639a:	4b31      	ldr	r3, [pc, #196]	; (8006460 <HAL_RCC_OscConfig+0x478>)
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a0:	f7fc fac0 	bl	8002924 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a8:	f7fc fabc 	bl	8002924 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e087      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ba:	4b27      	ldr	r3, [pc, #156]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69da      	ldr	r2, [r3, #28]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	019b      	lsls	r3, r3, #6
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	3b01      	subs	r3, #1
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	061b      	lsls	r3, r3, #24
 80063ea:	491b      	ldr	r1, [pc, #108]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <HAL_RCC_OscConfig+0x478>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f6:	f7fc fa95 	bl	8002924 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fe:	f7fc fa91 	bl	8002924 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e05c      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006410:	4b11      	ldr	r3, [pc, #68]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0f0      	beq.n	80063fe <HAL_RCC_OscConfig+0x416>
 800641c:	e054      	b.n	80064c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <HAL_RCC_OscConfig+0x478>)
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006424:	f7fc fa7e 	bl	8002924 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800642c:	f7fc fa7a 	bl	8002924 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e045      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <HAL_RCC_OscConfig+0x470>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x444>
 800644a:	e03d      	b.n	80064c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d107      	bne.n	8006464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e038      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
 8006458:	40023800 	.word	0x40023800
 800645c:	40007000 	.word	0x40007000
 8006460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006464:	4b1b      	ldr	r3, [pc, #108]	; (80064d4 <HAL_RCC_OscConfig+0x4ec>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d028      	beq.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800647c:	429a      	cmp	r2, r3
 800647e:	d121      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648a:	429a      	cmp	r2, r3
 800648c:	d11a      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006494:	4013      	ands	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800649a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800649c:	4293      	cmp	r3, r2
 800649e:	d111      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	3b01      	subs	r3, #1
 80064ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d107      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d001      	beq.n	80064c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800

080064d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0cc      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064ec:	4b68      	ldr	r3, [pc, #416]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90c      	bls.n	8006514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b65      	ldr	r3, [pc, #404]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b63      	ldr	r3, [pc, #396]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0b8      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800652c:	4b59      	ldr	r3, [pc, #356]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a58      	ldr	r2, [pc, #352]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006544:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a52      	ldr	r2, [pc, #328]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800654e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006550:	4b50      	ldr	r3, [pc, #320]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	494d      	ldr	r1, [pc, #308]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d044      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b47      	ldr	r3, [pc, #284]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d119      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e07f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d003      	beq.n	8006596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006592:	2b03      	cmp	r3, #3
 8006594:	d107      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006596:	4b3f      	ldr	r3, [pc, #252]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e06f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a6:	4b3b      	ldr	r3, [pc, #236]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e067      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 0203 	bic.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4934      	ldr	r1, [pc, #208]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c8:	f7fc f9ac 	bl	8002924 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d0:	f7fc f9a8 	bl	8002924 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	; 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e04f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 020c 	and.w	r2, r3, #12
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1eb      	bne.n	80065d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d20c      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b22      	ldr	r3, [pc, #136]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b20      	ldr	r3, [pc, #128]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e032      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4916      	ldr	r1, [pc, #88]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	490e      	ldr	r1, [pc, #56]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800665e:	f000 f821 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8006662:	4602      	mov	r2, r0
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	490a      	ldr	r1, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x1c0>)
 8006670:	5ccb      	ldrb	r3, [r1, r3]
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <HAL_RCC_ClockConfig+0x1c4>)
 8006678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <HAL_RCC_ClockConfig+0x1c8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fc f90c 	bl	800289c <HAL_InitTick>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40023c00 	.word	0x40023c00
 8006694:	40023800 	.word	0x40023800
 8006698:	0800fe20 	.word	0x0800fe20
 800669c:	20000000 	.word	0x20000000
 80066a0:	20000004 	.word	0x20000004

080066a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a8:	b094      	sub	sp, #80	; 0x50
 80066aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	647b      	str	r3, [r7, #68]	; 0x44
 80066b0:	2300      	movs	r3, #0
 80066b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b4:	2300      	movs	r3, #0
 80066b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066bc:	4b79      	ldr	r3, [pc, #484]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 030c 	and.w	r3, r3, #12
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d00d      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0x40>
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	f200 80e1 	bhi.w	8006890 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_RCC_GetSysClockFreq+0x34>
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d003      	beq.n	80066de <HAL_RCC_GetSysClockFreq+0x3a>
 80066d6:	e0db      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d8:	4b73      	ldr	r3, [pc, #460]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80066da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80066dc:	e0db      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066de:	4b73      	ldr	r3, [pc, #460]	; (80068ac <HAL_RCC_GetSysClockFreq+0x208>)
 80066e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066e2:	e0d8      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066e4:	4b6f      	ldr	r3, [pc, #444]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ee:	4b6d      	ldr	r3, [pc, #436]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d063      	beq.n	80067c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066fa:	4b6a      	ldr	r3, [pc, #424]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	099b      	lsrs	r3, r3, #6
 8006700:	2200      	movs	r2, #0
 8006702:	63bb      	str	r3, [r7, #56]	; 0x38
 8006704:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670c:	633b      	str	r3, [r7, #48]	; 0x30
 800670e:	2300      	movs	r3, #0
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
 8006712:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	f04f 0000 	mov.w	r0, #0
 800671e:	f04f 0100 	mov.w	r1, #0
 8006722:	0159      	lsls	r1, r3, #5
 8006724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006728:	0150      	lsls	r0, r2, #5
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4621      	mov	r1, r4
 8006730:	1a51      	subs	r1, r2, r1
 8006732:	6139      	str	r1, [r7, #16]
 8006734:	4629      	mov	r1, r5
 8006736:	eb63 0301 	sbc.w	r3, r3, r1
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006748:	4659      	mov	r1, fp
 800674a:	018b      	lsls	r3, r1, #6
 800674c:	4651      	mov	r1, sl
 800674e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006752:	4651      	mov	r1, sl
 8006754:	018a      	lsls	r2, r1, #6
 8006756:	4651      	mov	r1, sl
 8006758:	ebb2 0801 	subs.w	r8, r2, r1
 800675c:	4659      	mov	r1, fp
 800675e:	eb63 0901 	sbc.w	r9, r3, r1
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800676e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006776:	4690      	mov	r8, r2
 8006778:	4699      	mov	r9, r3
 800677a:	4623      	mov	r3, r4
 800677c:	eb18 0303 	adds.w	r3, r8, r3
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	462b      	mov	r3, r5
 8006784:	eb49 0303 	adc.w	r3, r9, r3
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006796:	4629      	mov	r1, r5
 8006798:	024b      	lsls	r3, r1, #9
 800679a:	4621      	mov	r1, r4
 800679c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067a0:	4621      	mov	r1, r4
 80067a2:	024a      	lsls	r2, r1, #9
 80067a4:	4610      	mov	r0, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067aa:	2200      	movs	r2, #0
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067b4:	f7fa fa68 	bl	8000c88 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4613      	mov	r3, r2
 80067be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c0:	e058      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c2:	4b38      	ldr	r3, [pc, #224]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	2200      	movs	r2, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	4611      	mov	r1, r2
 80067ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067d2:	623b      	str	r3, [r7, #32]
 80067d4:	2300      	movs	r3, #0
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
 80067d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067dc:	4642      	mov	r2, r8
 80067de:	464b      	mov	r3, r9
 80067e0:	f04f 0000 	mov.w	r0, #0
 80067e4:	f04f 0100 	mov.w	r1, #0
 80067e8:	0159      	lsls	r1, r3, #5
 80067ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067ee:	0150      	lsls	r0, r2, #5
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4641      	mov	r1, r8
 80067f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80067fa:	4649      	mov	r1, r9
 80067fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800680c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006814:	ebb2 040a 	subs.w	r4, r2, sl
 8006818:	eb63 050b 	sbc.w	r5, r3, fp
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	00eb      	lsls	r3, r5, #3
 8006826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800682a:	00e2      	lsls	r2, r4, #3
 800682c:	4614      	mov	r4, r2
 800682e:	461d      	mov	r5, r3
 8006830:	4643      	mov	r3, r8
 8006832:	18e3      	adds	r3, r4, r3
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	464b      	mov	r3, r9
 8006838:	eb45 0303 	adc.w	r3, r5, r3
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800684a:	4629      	mov	r1, r5
 800684c:	028b      	lsls	r3, r1, #10
 800684e:	4621      	mov	r1, r4
 8006850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006854:	4621      	mov	r1, r4
 8006856:	028a      	lsls	r2, r1, #10
 8006858:	4610      	mov	r0, r2
 800685a:	4619      	mov	r1, r3
 800685c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685e:	2200      	movs	r2, #0
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	61fa      	str	r2, [r7, #28]
 8006864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006868:	f7fa fa0e 	bl	8000c88 <__aeabi_uldivmod>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4613      	mov	r3, r2
 8006872:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	0c1b      	lsrs	r3, r3, #16
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	3301      	adds	r3, #1
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800688e:	e002      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006892:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006898:	4618      	mov	r0, r3
 800689a:	3750      	adds	r7, #80	; 0x50
 800689c:	46bd      	mov	sp, r7
 800689e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800
 80068a8:	00f42400 	.word	0x00f42400
 80068ac:	007a1200 	.word	0x007a1200

080068b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068b4:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068b6:	681b      	ldr	r3, [r3, #0]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000000 	.word	0x20000000

080068c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068cc:	f7ff fff0 	bl	80068b0 <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	0a9b      	lsrs	r3, r3, #10
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4903      	ldr	r1, [pc, #12]	; (80068ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40023800 	.word	0x40023800
 80068ec:	0800fe30 	.word	0x0800fe30

080068f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006914:	2b00      	cmp	r3, #0
 8006916:	d035      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006918:	4b62      	ldr	r3, [pc, #392]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800691e:	f7fc f801 	bl	8002924 <HAL_GetTick>
 8006922:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006924:	e008      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006926:	f7fb fffd 	bl	8002924 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e0b0      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006938:	4b5b      	ldr	r3, [pc, #364]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1f0      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	019a      	lsls	r2, r3, #6
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	071b      	lsls	r3, r3, #28
 8006950:	4955      	ldr	r1, [pc, #340]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006958:	4b52      	ldr	r3, [pc, #328]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800695e:	f7fb ffe1 	bl	8002924 <HAL_GetTick>
 8006962:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006966:	f7fb ffdd 	bl	8002924 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e090      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006978:	4b4b      	ldr	r3, [pc, #300]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8083 	beq.w	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	4b44      	ldr	r3, [pc, #272]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	4a43      	ldr	r2, [pc, #268]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800699c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a0:	6413      	str	r3, [r2, #64]	; 0x40
 80069a2:	4b41      	ldr	r3, [pc, #260]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069ae:	4b3f      	ldr	r3, [pc, #252]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a3e      	ldr	r2, [pc, #248]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069ba:	f7fb ffb3 	bl	8002924 <HAL_GetTick>
 80069be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069c0:	e008      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069c2:	f7fb ffaf 	bl	8002924 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e062      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069d4:	4b35      	ldr	r3, [pc, #212]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f0      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069e0:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d02f      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d028      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069fe:	4b2a      	ldr	r3, [pc, #168]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a08:	4b29      	ldr	r3, [pc, #164]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a0e:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a14:	4a24      	ldr	r2, [pc, #144]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a1a:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d114      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a26:	f7fb ff7d 	bl	8002924 <HAL_GetTick>
 8006a2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2c:	e00a      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a2e:	f7fb ff79 	bl	8002924 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e02a      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a44:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0ee      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a5c:	d10d      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a72:	490d      	ldr	r1, [pc, #52]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	608b      	str	r3, [r1, #8]
 8006a78:	e005      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a84:	6093      	str	r3, [r2, #8]
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a92:	4905      	ldr	r1, [pc, #20]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	42470068 	.word	0x42470068
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40007000 	.word	0x40007000
 8006ab0:	42470e40 	.word	0x42470e40

08006ab4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d13e      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ad2:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d12f      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ae8:	4b1e      	ldr	r3, [pc, #120]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006aea:	617b      	str	r3, [r7, #20]
          break;
 8006aec:	e02f      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006aee:	4b1c      	ldr	r3, [pc, #112]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006afa:	d108      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006afc:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b04:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	e007      	b.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b16:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b1e:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b24:	099b      	lsrs	r3, r3, #6
 8006b26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	fb02 f303 	mul.w	r3, r2, r3
 8006b30:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b38:	0f1b      	lsrs	r3, r3, #28
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	617b      	str	r3, [r7, #20]
          break;
 8006b46:	e002      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
          break;
 8006b4c:	bf00      	nop
        }
      }
      break;
 8006b4e:	bf00      	nop
    }
  }
  return frequency;
 8006b50:	697b      	ldr	r3, [r7, #20]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40023800 	.word	0x40023800
 8006b64:	00bb8000 	.word	0x00bb8000
 8006b68:	007a1200 	.word	0x007a1200
 8006b6c:	00f42400 	.word	0x00f42400

08006b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e07b      	b.n	8006c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d108      	bne.n	8006b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b92:	d009      	beq.n	8006ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	61da      	str	r2, [r3, #28]
 8006b9a:	e005      	b.n	8006ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fb fce6 	bl	8002594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2c:	ea42 0103 	orr.w	r1, r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	f003 0104 	and.w	r1, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0210 	and.w	r2, r3, #16
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c82:	b084      	sub	sp, #16
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	f107 001c 	add.w	r0, r7, #28
 8006c90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d122      	bne.n	8006ce0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d105      	bne.n	8006cd4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f9bf 	bl	8007058 <USB_CoreReset>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e01a      	b.n	8006d16 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f9b3 	bl	8007058 <USB_CoreReset>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d106      	bne.n	8006d0a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
 8006d08:	e005      	b.n	8006d16 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d10b      	bne.n	8006d34 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f043 0206 	orr.w	r2, r3, #6
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f043 0220 	orr.w	r2, r3, #32
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d40:	b004      	add	sp, #16
 8006d42:	4770      	bx	lr

08006d44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f043 0201 	orr.w	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f023 0201 	bic.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d115      	bne.n	8006dd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006db6:	2001      	movs	r0, #1
 8006db8:	f7fb fdc0 	bl	800293c <HAL_Delay>
      ms++;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f939 	bl	800703a <USB_GetMode>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d01e      	beq.n	8006e0c <USB_SetCurrentMode+0x84>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b31      	cmp	r3, #49	; 0x31
 8006dd2:	d9f0      	bls.n	8006db6 <USB_SetCurrentMode+0x2e>
 8006dd4:	e01a      	b.n	8006e0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d115      	bne.n	8006e08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006de8:	2001      	movs	r0, #1
 8006dea:	f7fb fda7 	bl	800293c <HAL_Delay>
      ms++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f920 	bl	800703a <USB_GetMode>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <USB_SetCurrentMode+0x84>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b31      	cmp	r3, #49	; 0x31
 8006e04:	d9f0      	bls.n	8006de8 <USB_SetCurrentMode+0x60>
 8006e06:	e001      	b.n	8006e0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e005      	b.n	8006e18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b32      	cmp	r3, #50	; 0x32
 8006e10:	d101      	bne.n	8006e16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <USB_FlushTxFifo+0x64>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d901      	bls.n	8006e40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e01b      	b.n	8006e78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	daf2      	bge.n	8006e2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	019b      	lsls	r3, r3, #6
 8006e50:	f043 0220 	orr.w	r2, r3, #32
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a08      	ldr	r2, [pc, #32]	; (8006e84 <USB_FlushTxFifo+0x64>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d901      	bls.n	8006e6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e006      	b.n	8006e78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d0f0      	beq.n	8006e58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	00030d40 	.word	0x00030d40

08006e88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4a11      	ldr	r2, [pc, #68]	; (8006ee4 <USB_FlushRxFifo+0x5c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d901      	bls.n	8006ea6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e018      	b.n	8006ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	daf2      	bge.n	8006e94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2210      	movs	r2, #16
 8006eb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <USB_FlushRxFifo+0x5c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e006      	b.n	8006ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0310 	and.w	r3, r3, #16
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d0f0      	beq.n	8006eb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	00030d40 	.word	0x00030d40

08006ee8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b089      	sub	sp, #36	; 0x24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	71fb      	strb	r3, [r7, #7]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d123      	bne.n	8006f56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f0e:	88bb      	ldrh	r3, [r7, #4]
 8006f10:	3303      	adds	r3, #3
 8006f12:	089b      	lsrs	r3, r3, #2
 8006f14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	e018      	b.n	8006f4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	031a      	lsls	r2, r3, #12
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f28:	461a      	mov	r2, r3
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	3301      	adds	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	3301      	adds	r3, #1
 8006f46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d3e2      	bcc.n	8006f1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3724      	adds	r7, #36	; 0x24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b08b      	sub	sp, #44	; 0x2c
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	089b      	lsrs	r3, r3, #2
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	f003 0303 	and.w	r3, r3, #3
 8006f88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	623b      	str	r3, [r7, #32]
 8006f8e:	e014      	b.n	8006fba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	3301      	adds	r3, #1
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	6a3a      	ldr	r2, [r7, #32]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d3e6      	bcc.n	8006f90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fc2:	8bfb      	ldrh	r3, [r7, #30]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01e      	beq.n	8007006 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f107 0310 	add.w	r3, r7, #16
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	701a      	strb	r2, [r3, #0]
      i++;
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ffa:	8bfb      	ldrh	r3, [r7, #30]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007000:	8bfb      	ldrh	r3, [r7, #30]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1ea      	bne.n	8006fdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007008:	4618      	mov	r0, r3
 800700a:	372c      	adds	r7, #44	; 0x2c
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4013      	ands	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800702c:	68fb      	ldr	r3, [r7, #12]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	f003 0301 	and.w	r3, r3, #1
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3301      	adds	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a13      	ldr	r2, [pc, #76]	; (80070bc <USB_CoreReset+0x64>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e01b      	b.n	80070ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	daf2      	bge.n	8007064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f043 0201 	orr.w	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3301      	adds	r3, #1
 8007092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a09      	ldr	r2, [pc, #36]	; (80070bc <USB_CoreReset+0x64>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d901      	bls.n	80070a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e006      	b.n	80070ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d0f0      	beq.n	800708e <USB_CoreReset+0x36>

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	00030d40 	.word	0x00030d40

080070c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070c0:	b084      	sub	sp, #16
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070e0:	461a      	mov	r2, r3
 80070e2:	2300      	movs	r3, #0
 80070e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d018      	beq.n	8007148 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	2b01      	cmp	r3, #1
 800711a:	d10a      	bne.n	8007132 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800712a:	f043 0304 	orr.w	r3, r3, #4
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	e014      	b.n	800715c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007140:	f023 0304 	bic.w	r3, r3, #4
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e009      	b.n	800715c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007156:	f023 0304 	bic.w	r3, r3, #4
 800715a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800715c:	2110      	movs	r1, #16
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff fe5e 	bl	8006e20 <USB_FlushTxFifo>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff fe8a 	bl	8006e88 <USB_FlushRxFifo>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	e015      	b.n	80071b0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007190:	461a      	mov	r2, r3
 8007192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007196:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a4:	461a      	mov	r2, r3
 80071a6:	2300      	movs	r3, #0
 80071a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3301      	adds	r3, #1
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3e5      	bcc.n	8007184 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a13      	ldr	r2, [pc, #76]	; (800722c <USB_HostInit+0x16c>)
 80071de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a13      	ldr	r2, [pc, #76]	; (8007230 <USB_HostInit+0x170>)
 80071e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80071e8:	e009      	b.n	80071fe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2280      	movs	r2, #128	; 0x80
 80071ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a10      	ldr	r2, [pc, #64]	; (8007234 <USB_HostInit+0x174>)
 80071f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a0f      	ldr	r2, [pc, #60]	; (8007238 <USB_HostInit+0x178>)
 80071fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	2b00      	cmp	r3, #0
 8007202:	d105      	bne.n	8007210 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	f043 0210 	orr.w	r2, r3, #16
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699a      	ldr	r2, [r3, #24]
 8007214:	4b09      	ldr	r3, [pc, #36]	; (800723c <USB_HostInit+0x17c>)
 8007216:	4313      	orrs	r3, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007228:	b004      	add	sp, #16
 800722a:	4770      	bx	lr
 800722c:	01000200 	.word	0x01000200
 8007230:	00e00300 	.word	0x00e00300
 8007234:	00600080 	.word	0x00600080
 8007238:	004000e0 	.word	0x004000e0
 800723c:	a3200008 	.word	0xa3200008

08007240 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800725e:	f023 0303 	bic.w	r3, r3, #3
 8007262:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	68f9      	ldr	r1, [r7, #12]
 8007274:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007278:	4313      	orrs	r3, r2
 800727a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d107      	bne.n	8007292 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007288:	461a      	mov	r2, r3
 800728a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800728e:	6053      	str	r3, [r2, #4]
 8007290:	e009      	b.n	80072a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d106      	bne.n	80072a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800729e:	461a      	mov	r2, r3
 80072a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80072a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80072de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80072e4:	2064      	movs	r0, #100	; 0x64
 80072e6:	f7fb fb29 	bl	800293c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80072f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80072f8:	200a      	movs	r0, #10
 80072fa:	f7fb fb1f 	bl	800293c <HAL_Delay>

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800732c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d109      	bne.n	800734c <USB_DriveVbus+0x44>
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d106      	bne.n	800734c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800734a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007356:	d109      	bne.n	800736c <USB_DriveVbus+0x64>
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800736a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	0c5b      	lsrs	r3, r3, #17
 8007398:	f003 0303 	and.w	r3, r3, #3
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	b29b      	uxth	r3, r3
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
	...

080073cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	4608      	mov	r0, r1
 80073d6:	4611      	mov	r1, r2
 80073d8:	461a      	mov	r2, r3
 80073da:	4603      	mov	r3, r0
 80073dc:	70fb      	strb	r3, [r7, #3]
 80073de:	460b      	mov	r3, r1
 80073e0:	70bb      	strb	r3, [r7, #2]
 80073e2:	4613      	mov	r3, r2
 80073e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fa:	461a      	mov	r2, r3
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007400:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007402:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007406:	2b03      	cmp	r3, #3
 8007408:	d87e      	bhi.n	8007508 <USB_HC_Init+0x13c>
 800740a:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <USB_HC_Init+0x44>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007421 	.word	0x08007421
 8007414:	080074cb 	.word	0x080074cb
 8007418:	08007421 	.word	0x08007421
 800741c:	0800748d 	.word	0x0800748d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742c:	461a      	mov	r2, r3
 800742e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007432:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007434:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007438:	2b00      	cmp	r3, #0
 800743a:	da10      	bge.n	800745e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	4413      	add	r3, r2
 8007444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	0151      	lsls	r1, r2, #5
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	440a      	add	r2, r1
 8007452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800745c:	e057      	b.n	800750e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007466:	2b00      	cmp	r3, #0
 8007468:	d051      	beq.n	800750e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	440a      	add	r2, r1
 8007480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007484:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007488:	60d3      	str	r3, [r2, #12]
      break;
 800748a:	e040      	b.n	800750e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800748c:	78fb      	ldrb	r3, [r7, #3]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	4413      	add	r3, r2
 8007494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007498:	461a      	mov	r2, r3
 800749a:	f240 639d 	movw	r3, #1693	; 0x69d
 800749e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da34      	bge.n	8007512 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80074c8:	e023      	b.n	8007512 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d6:	461a      	mov	r2, r3
 80074d8:	f240 2325 	movw	r3, #549	; 0x225
 80074dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da17      	bge.n	8007516 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	78fa      	ldrb	r2, [r7, #3]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007500:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007504:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007506:	e006      	b.n	8007516 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	77fb      	strb	r3, [r7, #31]
      break;
 800750c:	e004      	b.n	8007518 <USB_HC_Init+0x14c>
      break;
 800750e:	bf00      	nop
 8007510:	e002      	b.n	8007518 <USB_HC_Init+0x14c>
      break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <USB_HC_Init+0x14c>
      break;
 8007516:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	4413      	add	r3, r2
 8007520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	0151      	lsls	r1, r2, #5
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	440a      	add	r2, r1
 800752e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007532:	f043 0302 	orr.w	r3, r3, #2
 8007536:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	2101      	movs	r1, #1
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	6939      	ldr	r1, [r7, #16]
 800754e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007552:	4313      	orrs	r3, r2
 8007554:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007562:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007566:	2b00      	cmp	r3, #0
 8007568:	da03      	bge.n	8007572 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800756a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800756e:	61bb      	str	r3, [r7, #24]
 8007570:	e001      	b.n	8007576 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff feff 	bl	800737a <USB_GetHostSpeed>
 800757c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800757e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007582:	2b02      	cmp	r3, #2
 8007584:	d106      	bne.n	8007594 <USB_HC_Init+0x1c8>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b02      	cmp	r3, #2
 800758a:	d003      	beq.n	8007594 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800758c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	e001      	b.n	8007598 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007598:	787b      	ldrb	r3, [r7, #1]
 800759a:	059b      	lsls	r3, r3, #22
 800759c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075a0:	78bb      	ldrb	r3, [r7, #2]
 80075a2:	02db      	lsls	r3, r3, #11
 80075a4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075ae:	049b      	lsls	r3, r3, #18
 80075b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80075b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	0159      	lsls	r1, r3, #5
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	440b      	add	r3, r1
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075d4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80075d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d003      	beq.n	80075e6 <USB_HC_Init+0x21a>
 80075de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d10f      	bne.n	8007606 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80075e6:	78fb      	ldrb	r3, [r7, #3]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007604:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007606:	7ffb      	ldrb	r3, [r7, #31]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08c      	sub	sp, #48	; 0x30
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	4613      	mov	r3, r2
 800761c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800762c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007636:	2b00      	cmp	r3, #0
 8007638:	d02d      	beq.n	8007696 <USB_HC_StartXfer+0x86>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	791b      	ldrb	r3, [r3, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d129      	bne.n	8007696 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d117      	bne.n	8007678 <USB_HC_StartXfer+0x68>
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	79db      	ldrb	r3, [r3, #7]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <USB_HC_StartXfer+0x48>
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	79db      	ldrb	r3, [r3, #7]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d10f      	bne.n	8007678 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	4413      	add	r3, r2
 8007660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	6a3a      	ldr	r2, [r7, #32]
 800766c:	440a      	add	r2, r1
 800766e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007676:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10b      	bne.n	8007696 <USB_HC_StartXfer+0x86>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	795b      	ldrb	r3, [r3, #5]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d107      	bne.n	8007696 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	4619      	mov	r1, r3
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fa0f 	bl	8007ab0 <USB_DoPing>
      return HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	e0f8      	b.n	8007888 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d018      	beq.n	80076d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	8912      	ldrh	r2, [r2, #8]
 80076a6:	4413      	add	r3, r2
 80076a8:	3b01      	subs	r3, #1
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	8912      	ldrh	r2, [r2, #8]
 80076ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80076b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076b6:	8b7b      	ldrh	r3, [r7, #26]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d90b      	bls.n	80076d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80076bc:	8b7b      	ldrh	r3, [r7, #26]
 80076be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	8912      	ldrh	r2, [r2, #8]
 80076c6:	fb03 f202 	mul.w	r2, r3, r2
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	611a      	str	r2, [r3, #16]
 80076ce:	e001      	b.n	80076d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80076d0:	2301      	movs	r3, #1
 80076d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	78db      	ldrb	r3, [r3, #3]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	8912      	ldrh	r2, [r2, #8]
 80076e2:	fb03 f202 	mul.w	r2, r3, r2
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	611a      	str	r2, [r3, #16]
 80076ea:	e003      	b.n	80076f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	695a      	ldr	r2, [r3, #20]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076fe:	04d9      	lsls	r1, r3, #19
 8007700:	4b63      	ldr	r3, [pc, #396]	; (8007890 <USB_HC_StartXfer+0x280>)
 8007702:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007704:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	7a9b      	ldrb	r3, [r3, #10]
 800770a:	075b      	lsls	r3, r3, #29
 800770c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	0148      	lsls	r0, r1, #5
 8007714:	6a39      	ldr	r1, [r7, #32]
 8007716:	4401      	add	r1, r0
 8007718:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800771c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800771e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007720:	79fb      	ldrb	r3, [r7, #7]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	68d9      	ldr	r1, [r3, #12]
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	4413      	add	r3, r2
 8007732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007736:	460a      	mov	r2, r1
 8007738:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	bf0c      	ite	eq
 800774a:	2301      	moveq	r3, #1
 800774c:	2300      	movne	r3, #0
 800774e:	b2db      	uxtb	r3, r3
 8007750:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	4413      	add	r3, r2
 800775a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	6a3a      	ldr	r2, [r7, #32]
 8007766:	440a      	add	r2, r1
 8007768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800776c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007770:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	4413      	add	r3, r2
 800777a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	7e7b      	ldrb	r3, [r7, #25]
 8007782:	075b      	lsls	r3, r3, #29
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	0148      	lsls	r0, r1, #5
 8007788:	6a39      	ldr	r1, [r7, #32]
 800778a:	4401      	add	r1, r0
 800778c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007790:	4313      	orrs	r3, r2
 8007792:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	4413      	add	r3, r2
 800779c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077aa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	78db      	ldrb	r3, [r3, #3]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	e003      	b.n	80077c6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077c4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077cc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077da:	461a      	mov	r2, r3
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e04e      	b.n	8007888 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	78db      	ldrb	r3, [r3, #3]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d149      	bne.n	8007886 <USB_HC_StartXfer+0x276>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d045      	beq.n	8007886 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	79db      	ldrb	r3, [r3, #7]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d830      	bhi.n	8007864 <USB_HC_StartXfer+0x254>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <USB_HC_StartXfer+0x1f8>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007819 	.word	0x08007819
 800780c:	0800783d 	.word	0x0800783d
 8007810:	08007819 	.word	0x08007819
 8007814:	0800783d 	.word	0x0800783d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	3303      	adds	r3, #3
 800781e:	089b      	lsrs	r3, r3, #2
 8007820:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007822:	8afa      	ldrh	r2, [r7, #22]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	b29b      	uxth	r3, r3
 800782a:	429a      	cmp	r2, r3
 800782c:	d91c      	bls.n	8007868 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f043 0220 	orr.w	r2, r3, #32
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	619a      	str	r2, [r3, #24]
        }
        break;
 800783a:	e015      	b.n	8007868 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	3303      	adds	r3, #3
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007846:	8afa      	ldrh	r2, [r7, #22]
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	b29b      	uxth	r3, r3
 8007852:	429a      	cmp	r2, r3
 8007854:	d90a      	bls.n	800786c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	619a      	str	r2, [r3, #24]
        }
        break;
 8007862:	e003      	b.n	800786c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007864:	bf00      	nop
 8007866:	e002      	b.n	800786e <USB_HC_StartXfer+0x25e>
        break;
 8007868:	bf00      	nop
 800786a:	e000      	b.n	800786e <USB_HC_StartXfer+0x25e>
        break;
 800786c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	68d9      	ldr	r1, [r3, #12]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	785a      	ldrb	r2, [r3, #1]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	b29b      	uxth	r3, r3
 800787c:	2000      	movs	r0, #0
 800787e:	9000      	str	r0, [sp, #0]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fb31 	bl	8006ee8 <USB_WritePacket>
  }

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3728      	adds	r7, #40	; 0x28
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	1ff80000 	.word	0x1ff80000

08007894 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	b29b      	uxth	r3, r3
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b089      	sub	sp, #36	; 0x24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80078c6:	78fb      	ldrb	r3, [r7, #3]
 80078c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	0c9b      	lsrs	r3, r3, #18
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	0fdb      	lsrs	r3, r3, #31
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0320 	and.w	r3, r3, #32
 8007902:	2b20      	cmp	r3, #32
 8007904:	d104      	bne.n	8007910 <USB_HC_Halt+0x5a>
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	e0c8      	b.n	8007aa2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <USB_HC_Halt+0x66>
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d163      	bne.n	80079e4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	440a      	add	r2, r1
 8007932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800793a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	f040 80ab 	bne.w	8007aa0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d133      	bne.n	80079be <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	440a      	add	r2, r1
 800796c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007974:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	440a      	add	r2, r1
 800798c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007994:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079a2:	d81d      	bhi.n	80079e0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ba:	d0ec      	beq.n	8007996 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079bc:	e070      	b.n	8007aa0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079de:	e05f      	b.n	8007aa0 <USB_HC_Halt+0x1ea>
            break;
 80079e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079e2:	e05d      	b.n	8007aa0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a02:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d133      	bne.n	8007a7c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	0151      	lsls	r1, r2, #5
 8007a26:	69fa      	ldr	r2, [r7, #28]
 8007a28:	440a      	add	r2, r1
 8007a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a52:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a60:	d81d      	bhi.n	8007a9e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a78:	d0ec      	beq.n	8007a54 <USB_HC_Halt+0x19e>
 8007a7a:	e011      	b.n	8007aa0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	e000      	b.n	8007aa0 <USB_HC_Halt+0x1ea>
          break;
 8007a9e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3724      	adds	r7, #36	; 0x24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	04da      	lsls	r2, r3, #19
 8007acc:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <USB_DoPing+0x74>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	0151      	lsls	r1, r2, #5
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	440a      	add	r2, r1
 8007ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ae0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007af8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0e:	461a      	mov	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	1ff80000 	.word	0x1ff80000

08007b28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff f912 	bl	8006d66 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b42:	2110      	movs	r1, #16
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff f96b 	bl	8006e20 <USB_FlushTxFifo>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff f997 	bl	8006e88 <USB_FlushRxFifo>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007b64:	2300      	movs	r3, #0
 8007b66:	61bb      	str	r3, [r7, #24]
 8007b68:	e01f      	b.n	8007baa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	61bb      	str	r3, [r7, #24]
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	2b0f      	cmp	r3, #15
 8007bae:	d9dc      	bls.n	8007b6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61bb      	str	r3, [r7, #24]
 8007bb4:	e034      	b.n	8007c20 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bcc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bdc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bea:	461a      	mov	r2, r3
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bfc:	d80c      	bhi.n	8007c18 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c14:	d0ec      	beq.n	8007bf0 <USB_StopHost+0xc8>
 8007c16:	e000      	b.n	8007c1a <USB_StopHost+0xf2>
        break;
 8007c18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	61bb      	str	r3, [r7, #24]
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	2b0f      	cmp	r3, #15
 8007c24:	d9c7      	bls.n	8007bb6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff f881 	bl	8006d44 <USB_EnableGlobalInt>

  return ret;
 8007c42:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3720      	adds	r7, #32
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b089      	sub	sp, #36	; 0x24
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007c54:	2301      	movs	r3, #1
 8007c56:	2202      	movs	r2, #2
 8007c58:	2102      	movs	r1, #2
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fc66 	bl	800852c <USBH_FindInterface>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2bff      	cmp	r3, #255	; 0xff
 8007c68:	d002      	beq.n	8007c70 <USBH_CDC_InterfaceInit+0x24>
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d901      	bls.n	8007c74 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c70:	2302      	movs	r3, #2
 8007c72:	e13d      	b.n	8007ef0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fc3b 	bl	80084f4 <USBH_SelectInterface>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e131      	b.n	8007ef0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007c92:	2050      	movs	r0, #80	; 0x50
 8007c94:	f002 fafa 	bl	800a28c <malloc>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007cac:	2302      	movs	r3, #2
 8007cae:	e11f      	b.n	8007ef0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007cb0:	2250      	movs	r2, #80	; 0x50
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	68b8      	ldr	r0, [r7, #8]
 8007cb6:	f002 faf9 	bl	800a2ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	211a      	movs	r1, #26
 8007cc0:	fb01 f303 	mul.w	r3, r1, r3
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b25b      	sxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	da15      	bge.n	8007cfe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	211a      	movs	r1, #26
 8007cd8:	fb01 f303 	mul.w	r3, r1, r3
 8007cdc:	4413      	add	r3, r2
 8007cde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ce2:	781a      	ldrb	r2, [r3, #0]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	211a      	movs	r1, #26
 8007cee:	fb01 f303 	mul.w	r3, r1, r3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007cf8:	881a      	ldrh	r2, [r3, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	785b      	ldrb	r3, [r3, #1]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 ff2c 	bl	8009b62 <USBH_AllocPipe>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	7819      	ldrb	r1, [r3, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	7858      	ldrb	r0, [r3, #1]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	8952      	ldrh	r2, [r2, #10]
 8007d2a:	9202      	str	r2, [sp, #8]
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	9201      	str	r2, [sp, #4]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4623      	mov	r3, r4
 8007d34:	4602      	mov	r2, r0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fee4 	bl	8009b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2200      	movs	r2, #0
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f002 f9f3 	bl	800a130 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	210a      	movs	r1, #10
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fbeb 	bl	800852c <USBH_FindInterface>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2bff      	cmp	r3, #255	; 0xff
 8007d5e:	d002      	beq.n	8007d66 <USBH_CDC_InterfaceInit+0x11a>
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d901      	bls.n	8007d6a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d66:	2302      	movs	r3, #2
 8007d68:	e0c2      	b.n	8007ef0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	211a      	movs	r1, #26
 8007d70:	fb01 f303 	mul.w	r3, r1, r3
 8007d74:	4413      	add	r3, r2
 8007d76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b25b      	sxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	da16      	bge.n	8007db0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	211a      	movs	r1, #26
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	211a      	movs	r1, #26
 8007d9e:	fb01 f303 	mul.w	r3, r1, r3
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007da8:	881a      	ldrh	r2, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	835a      	strh	r2, [r3, #26]
 8007dae:	e015      	b.n	8007ddc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	211a      	movs	r1, #26
 8007db6:	fb01 f303 	mul.w	r3, r1, r3
 8007dba:	4413      	add	r3, r2
 8007dbc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007dc0:	781a      	ldrb	r2, [r3, #0]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	211a      	movs	r1, #26
 8007dcc:	fb01 f303 	mul.w	r3, r1, r3
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007dd6:	881a      	ldrh	r2, [r3, #0]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	211a      	movs	r1, #26
 8007de2:	fb01 f303 	mul.w	r3, r1, r3
 8007de6:	4413      	add	r3, r2
 8007de8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	da16      	bge.n	8007e22 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	211a      	movs	r1, #26
 8007dfa:	fb01 f303 	mul.w	r3, r1, r3
 8007dfe:	4413      	add	r3, r2
 8007e00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e04:	781a      	ldrb	r2, [r3, #0]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	211a      	movs	r1, #26
 8007e10:	fb01 f303 	mul.w	r3, r1, r3
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e1a:	881a      	ldrh	r2, [r3, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	835a      	strh	r2, [r3, #26]
 8007e20:	e015      	b.n	8007e4e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	211a      	movs	r1, #26
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e32:	781a      	ldrb	r2, [r3, #0]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	211a      	movs	r1, #26
 8007e3e:	fb01 f303 	mul.w	r3, r1, r3
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e48:	881a      	ldrh	r2, [r3, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	7b9b      	ldrb	r3, [r3, #14]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 fe84 	bl	8009b62 <USBH_AllocPipe>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	7bdb      	ldrb	r3, [r3, #15]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fe7a 	bl	8009b62 <USBH_AllocPipe>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	461a      	mov	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	7b59      	ldrb	r1, [r3, #13]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	7b98      	ldrb	r0, [r3, #14]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	8b12      	ldrh	r2, [r2, #24]
 8007e8e:	9202      	str	r2, [sp, #8]
 8007e90:	2202      	movs	r2, #2
 8007e92:	9201      	str	r2, [sp, #4]
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	4623      	mov	r3, r4
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 fe32 	bl	8009b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	7b19      	ldrb	r1, [r3, #12]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	7bd8      	ldrb	r0, [r3, #15]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	8b52      	ldrh	r2, [r2, #26]
 8007eb8:	9202      	str	r2, [sp, #8]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	9201      	str	r2, [sp, #4]
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 fe1d 	bl	8009b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	7b5b      	ldrb	r3, [r3, #13]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f002 f928 	bl	800a130 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	7b1b      	ldrb	r3, [r3, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f002 f921 	bl	800a130 <USBH_LL_SetToggle>

  return USBH_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd90      	pop	{r4, r7, pc}

08007ef8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00e      	beq.n	8007f30 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fe12 	bl	8009b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fe3d 	bl	8009ba4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	7b1b      	ldrb	r3, [r3, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00e      	beq.n	8007f56 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	7b1b      	ldrb	r3, [r3, #12]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 fdff 	bl	8009b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	7b1b      	ldrb	r3, [r3, #12]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fe2a 	bl	8009ba4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	7b5b      	ldrb	r3, [r3, #13]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	7b5b      	ldrb	r3, [r3, #13]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 fdec 	bl	8009b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	7b5b      	ldrb	r3, [r3, #13]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 fe17 	bl	8009ba4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00b      	beq.n	8007fa0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f002 f983 	bl	800a29c <free>
    phost->pActiveClass->pData = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3340      	adds	r3, #64	; 0x40
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8b1 	bl	800812a <GetLineCoding>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d105      	bne.n	8007fde <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fd8:	2102      	movs	r1, #2
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007fde:	7afb      	ldrb	r3, [r7, #11]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008008:	2b04      	cmp	r3, #4
 800800a:	d877      	bhi.n	80080fc <USBH_CDC_Process+0x114>
 800800c:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBH_CDC_Process+0x2c>)
 800800e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008012:	bf00      	nop
 8008014:	08008029 	.word	0x08008029
 8008018:	0800802f 	.word	0x0800802f
 800801c:	0800805f 	.word	0x0800805f
 8008020:	080080d3 	.word	0x080080d3
 8008024:	080080e1 	.word	0x080080e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	e06d      	b.n	800810a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f897 	bl	8008168 <SetLineCoding>
 800803a:	4603      	mov	r3, r0
 800803c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d104      	bne.n	800804e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800804c:	e058      	b.n	8008100 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d055      	beq.n	8008100 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2204      	movs	r2, #4
 8008058:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800805c:	e050      	b.n	8008100 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3340      	adds	r3, #64	; 0x40
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f860 	bl	800812a <GetLineCoding>
 800806a:	4603      	mov	r3, r0
 800806c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d126      	bne.n	80080c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	429a      	cmp	r2, r3
 800808a:	d13b      	bne.n	8008104 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008096:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008098:	429a      	cmp	r2, r3
 800809a:	d133      	bne.n	8008104 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d12b      	bne.n	8008104 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d124      	bne.n	8008104 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f958 	bl	8008370 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80080c0:	e020      	b.n	8008104 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d01d      	beq.n	8008104 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2204      	movs	r2, #4
 80080cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80080d0:	e018      	b.n	8008104 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f867 	bl	80081a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f8da 	bl	8008292 <CDC_ProcessReception>
      break;
 80080de:	e014      	b.n	800810a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 ffef 	bl	80090c6 <USBH_ClrFeature>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80080fa:	e005      	b.n	8008108 <USBH_CDC_Process+0x120>

    default:
      break;
 80080fc:	bf00      	nop
 80080fe:	e004      	b.n	800810a <USBH_CDC_Process+0x122>
      break;
 8008100:	bf00      	nop
 8008102:	e002      	b.n	800810a <USBH_CDC_Process+0x122>
      break;
 8008104:	bf00      	nop
 8008106:	e000      	b.n	800810a <USBH_CDC_Process+0x122>
      break;
 8008108:	bf00      	nop

  }

  return status;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	22a1      	movs	r2, #161	; 0xa1
 8008138:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2221      	movs	r2, #33	; 0x21
 800813e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2207      	movs	r2, #7
 8008150:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2207      	movs	r2, #7
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 fa81 	bl	8009660 <USBH_CtlReq>
 800815e:	4603      	mov	r3, r0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2221      	movs	r2, #33	; 0x21
 8008176:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2207      	movs	r2, #7
 800818e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2207      	movs	r2, #7
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fa62 	bl	8009660 <USBH_CtlReq>
 800819c:	4603      	mov	r3, r0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b086      	sub	sp, #24
 80081aa:	af02      	add	r7, sp, #8
 80081ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d002      	beq.n	80081cc <CDC_ProcessTransmission+0x26>
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d023      	beq.n	8008212 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80081ca:	e05e      	b.n	800828a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	8b12      	ldrh	r2, [r2, #24]
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d90b      	bls.n	80081f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	69d9      	ldr	r1, [r3, #28]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8b1a      	ldrh	r2, [r3, #24]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	7b5b      	ldrb	r3, [r3, #13]
 80081e4:	2001      	movs	r0, #1
 80081e6:	9000      	str	r0, [sp, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 fc48 	bl	8009a7e <USBH_BulkSendData>
 80081ee:	e00b      	b.n	8008208 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	7b5b      	ldrb	r3, [r3, #13]
 80081fe:	2001      	movs	r0, #1
 8008200:	9000      	str	r0, [sp, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fc3b 	bl	8009a7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008210:	e03b      	b.n	800828a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	7b5b      	ldrb	r3, [r3, #13]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 ff5f 	bl	800a0dc <USBH_LL_GetURBState>
 800821e:	4603      	mov	r3, r0
 8008220:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d128      	bne.n	800827a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	8b12      	ldrh	r2, [r2, #24]
 8008230:	4293      	cmp	r3, r2
 8008232:	d90e      	bls.n	8008252 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	8b12      	ldrh	r2, [r2, #24]
 800823c:	1a9a      	subs	r2, r3, r2
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	8b12      	ldrh	r2, [r2, #24]
 800824a:	441a      	add	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	61da      	str	r2, [r3, #28]
 8008250:	e002      	b.n	8008258 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008268:	e00e      	b.n	8008288 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f868 	bl	8008348 <USBH_CDC_TransmitCallback>
      break;
 8008278:	e006      	b.n	8008288 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800827a:	7afb      	ldrb	r3, [r7, #11]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d103      	bne.n	8008288 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008288:	bf00      	nop
  }
}
 800828a:	bf00      	nop
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b086      	sub	sp, #24
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d002      	beq.n	80082b8 <CDC_ProcessReception+0x26>
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d00e      	beq.n	80082d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80082b6:	e043      	b.n	8008340 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	6a19      	ldr	r1, [r3, #32]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	8b5a      	ldrh	r2, [r3, #26]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	7b1b      	ldrb	r3, [r3, #12]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 fbff 	bl	8009ac8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2204      	movs	r2, #4
 80082ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80082d2:	e035      	b.n	8008340 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	7b1b      	ldrb	r3, [r3, #12]
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f001 fefe 	bl	800a0dc <USBH_LL_GetURBState>
 80082e0:	4603      	mov	r3, r0
 80082e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80082e4:	7cfb      	ldrb	r3, [r7, #19]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d129      	bne.n	800833e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	7b1b      	ldrb	r3, [r3, #12]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 fe61 	bl	8009fb8 <USBH_LL_GetLastXferSize>
 80082f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d016      	beq.n	8008330 <CDC_ProcessReception+0x9e>
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	8b5b      	ldrh	r3, [r3, #26]
 8008306:	461a      	mov	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4293      	cmp	r3, r2
 800830c:	d910      	bls.n	8008330 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	6a1a      	ldr	r2, [r3, #32]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	441a      	add	r2, r3
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2203      	movs	r2, #3
 800832a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800832e:	e006      	b.n	800833e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f80f 	bl	800835c <USBH_CDC_ReceiveCallback>
      break;
 800833e:	bf00      	nop
  }
}
 8008340:	bf00      	nop
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008398:	2302      	movs	r3, #2
 800839a:	e029      	b.n	80083f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	79fa      	ldrb	r2, [r7, #7]
 80083a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f81f 	bl	80083f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f001 fd31 	bl	8009e50 <USBH_LL_Init>

  return USBH_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	e009      	b.n	800841e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	33e0      	adds	r3, #224	; 0xe0
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b0f      	cmp	r3, #15
 8008422:	d9f2      	bls.n	800840a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	e009      	b.n	800843e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3301      	adds	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008444:	d3f1      	bcc.n	800842a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2240      	movs	r2, #64	; 0x40
 800846a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d016      	beq.n	80084e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10e      	bne.n	80084dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084c4:	1c59      	adds	r1, r3, #1
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	33de      	adds	r3, #222	; 0xde
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
 80084da:	e004      	b.n	80084e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80084dc:	2302      	movs	r3, #2
 80084de:	73fb      	strb	r3, [r7, #15]
 80084e0:	e001      	b.n	80084e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80084e2:	2302      	movs	r3, #2
 80084e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	429a      	cmp	r2, r3
 800850e:	d204      	bcs.n	800851a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	78fa      	ldrb	r2, [r7, #3]
 8008514:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008518:	e001      	b.n	800851e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800851e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	461a      	mov	r2, r3
 800853a:	4603      	mov	r3, r0
 800853c:	70fb      	strb	r3, [r7, #3]
 800853e:	460b      	mov	r3, r1
 8008540:	70bb      	strb	r3, [r7, #2]
 8008542:	4613      	mov	r3, r2
 8008544:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008554:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008556:	e025      	b.n	80085a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	221a      	movs	r2, #26
 800855c:	fb02 f303 	mul.w	r3, r2, r3
 8008560:	3308      	adds	r3, #8
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	3302      	adds	r3, #2
 8008568:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	795b      	ldrb	r3, [r3, #5]
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	429a      	cmp	r2, r3
 8008572:	d002      	beq.n	800857a <USBH_FindInterface+0x4e>
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	2bff      	cmp	r3, #255	; 0xff
 8008578:	d111      	bne.n	800859e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800857e:	78ba      	ldrb	r2, [r7, #2]
 8008580:	429a      	cmp	r2, r3
 8008582:	d002      	beq.n	800858a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008584:	78bb      	ldrb	r3, [r7, #2]
 8008586:	2bff      	cmp	r3, #255	; 0xff
 8008588:	d109      	bne.n	800859e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800858e:	787a      	ldrb	r2, [r7, #1]
 8008590:	429a      	cmp	r2, r3
 8008592:	d002      	beq.n	800859a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008594:	787b      	ldrb	r3, [r7, #1]
 8008596:	2bff      	cmp	r3, #255	; 0xff
 8008598:	d101      	bne.n	800859e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	e006      	b.n	80085ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	3301      	adds	r3, #1
 80085a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d9d6      	bls.n	8008558 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80085aa:	23ff      	movs	r3, #255	; 0xff
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fc81 	bl	8009ec8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80085c6:	2101      	movs	r1, #1
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fd9a 	bl	800a102 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af04      	add	r7, sp, #16
 80085de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80085e0:	2302      	movs	r3, #2
 80085e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d102      	bne.n	80085fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2203      	movs	r2, #3
 80085f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b0b      	cmp	r3, #11
 8008602:	f200 81be 	bhi.w	8008982 <USBH_Process+0x3aa>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <USBH_Process+0x34>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	0800863d 	.word	0x0800863d
 8008610:	0800866f 	.word	0x0800866f
 8008614:	080086d7 	.word	0x080086d7
 8008618:	0800891d 	.word	0x0800891d
 800861c:	08008983 	.word	0x08008983
 8008620:	0800877b 	.word	0x0800877b
 8008624:	080088c3 	.word	0x080088c3
 8008628:	080087b1 	.word	0x080087b1
 800862c:	080087d1 	.word	0x080087d1
 8008630:	080087f1 	.word	0x080087f1
 8008634:	08008835 	.word	0x08008835
 8008638:	08008905 	.word	0x08008905
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 819e 	beq.w	8008986 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008650:	20c8      	movs	r0, #200	; 0xc8
 8008652:	f001 fd9d 	bl	800a190 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 fc93 	bl	8009f82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800866c:	e18b      	b.n	8008986 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008674:	2b01      	cmp	r3, #1
 8008676:	d107      	bne.n	8008688 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008686:	e18d      	b.n	80089a4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800868e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008692:	d914      	bls.n	80086be <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800869a:	3301      	adds	r3, #1
 800869c:	b2da      	uxtb	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d903      	bls.n	80086b6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	220d      	movs	r2, #13
 80086b2:	701a      	strb	r2, [r3, #0]
      break;
 80086b4:	e176      	b.n	80089a4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
      break;
 80086bc:	e172      	b.n	80089a4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80086c4:	f103 020a 	add.w	r2, r3, #10
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80086ce:	200a      	movs	r0, #10
 80086d0:	f001 fd5e 	bl	800a190 <USBH_Delay>
      break;
 80086d4:	e166      	b.n	80089a4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086e6:	2104      	movs	r1, #4
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80086ec:	2064      	movs	r0, #100	; 0x64
 80086ee:	f001 fd4f 	bl	800a190 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fc1e 	bl	8009f34 <USBH_LL_GetSpeed>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2205      	movs	r2, #5
 8008706:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008708:	2100      	movs	r1, #0
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 fa29 	bl	8009b62 <USBH_AllocPipe>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008718:	2180      	movs	r1, #128	; 0x80
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fa21 	bl	8009b62 <USBH_AllocPipe>
 8008720:	4603      	mov	r3, r0
 8008722:	461a      	mov	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7919      	ldrb	r1, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800873c:	b292      	uxth	r2, r2
 800873e:	9202      	str	r2, [sp, #8]
 8008740:	2200      	movs	r2, #0
 8008742:	9201      	str	r2, [sp, #4]
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	4603      	mov	r3, r0
 8008748:	2280      	movs	r2, #128	; 0x80
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 f9da 	bl	8009b04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7959      	ldrb	r1, [r3, #5]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008764:	b292      	uxth	r2, r2
 8008766:	9202      	str	r2, [sp, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	9201      	str	r2, [sp, #4]
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4603      	mov	r3, r0
 8008770:	2200      	movs	r2, #0
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 f9c6 	bl	8009b04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008778:	e114      	b.n	80089a4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f918 	bl	80089b0 <USBH_HandleEnum>
 8008780:	4603      	mov	r3, r0
 8008782:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	f040 80fe 	bne.w	800898a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800879c:	2b01      	cmp	r3, #1
 800879e:	d103      	bne.n	80087a8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2208      	movs	r2, #8
 80087a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087a6:	e0f0      	b.n	800898a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2207      	movs	r2, #7
 80087ac:	701a      	strb	r2, [r3, #0]
      break;
 80087ae:	e0ec      	b.n	800898a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80e9 	beq.w	800898e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087c2:	2101      	movs	r1, #1
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2208      	movs	r2, #8
 80087cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80087ce:	e0de      	b.n	800898e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fc2c 	bl	8009038 <USBH_SetCfg>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f040 80d5 	bne.w	8008992 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2209      	movs	r2, #9
 80087ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80087ee:	e0d0      	b.n	8008992 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80087f6:	f003 0320 	and.w	r3, r3, #32
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d016      	beq.n	800882c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80087fe:	2101      	movs	r1, #1
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fc3c 	bl	800907e <USBH_SetFeature>
 8008806:	4603      	mov	r3, r0
 8008808:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	220a      	movs	r2, #10
 8008816:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008818:	e0bd      	b.n	8008996 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b03      	cmp	r3, #3
 8008820:	f040 80b9 	bne.w	8008996 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	220a      	movs	r2, #10
 8008828:	701a      	strb	r2, [r3, #0]
      break;
 800882a:	e0b4      	b.n	8008996 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	220a      	movs	r2, #10
 8008830:	701a      	strb	r2, [r3, #0]
      break;
 8008832:	e0b0      	b.n	8008996 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80ad 	beq.w	800899a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
 800884c:	e016      	b.n	800887c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800884e:	7bfa      	ldrb	r2, [r7, #15]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	32de      	adds	r2, #222	; 0xde
 8008854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008858:	791a      	ldrb	r2, [r3, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008860:	429a      	cmp	r2, r3
 8008862:	d108      	bne.n	8008876 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008864:	7bfa      	ldrb	r2, [r7, #15]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	32de      	adds	r2, #222	; 0xde
 800886a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008874:	e005      	b.n	8008882 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	3301      	adds	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0e5      	beq.n	800884e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d016      	beq.n	80088ba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	4798      	blx	r3
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d109      	bne.n	80088b2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2206      	movs	r2, #6
 80088a2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088aa:	2103      	movs	r1, #3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088b0:	e073      	b.n	800899a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	220d      	movs	r2, #13
 80088b6:	701a      	strb	r2, [r3, #0]
      break;
 80088b8:	e06f      	b.n	800899a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	220d      	movs	r2, #13
 80088be:	701a      	strb	r2, [r3, #0]
      break;
 80088c0:	e06b      	b.n	800899a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d017      	beq.n	80088fc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	4798      	blx	r3
 80088d8:	4603      	mov	r3, r0
 80088da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d103      	bne.n	80088ec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	220b      	movs	r2, #11
 80088e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088ea:	e058      	b.n	800899e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d154      	bne.n	800899e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	220d      	movs	r2, #13
 80088f8:	701a      	strb	r2, [r3, #0]
      break;
 80088fa:	e050      	b.n	800899e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	220d      	movs	r2, #13
 8008900:	701a      	strb	r2, [r3, #0]
      break;
 8008902:	e04c      	b.n	800899e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d049      	beq.n	80089a2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
      }
      break;
 800891a:	e042      	b.n	80089a2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fd67 	bl	80083f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008958:	2105      	movs	r1, #5
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b01      	cmp	r3, #1
 8008968:	d107      	bne.n	800897a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff fe20 	bl	80085b8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008978:	e014      	b.n	80089a4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 faa4 	bl	8009ec8 <USBH_LL_Start>
      break;
 8008980:	e010      	b.n	80089a4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008982:	bf00      	nop
 8008984:	e00e      	b.n	80089a4 <USBH_Process+0x3cc>
      break;
 8008986:	bf00      	nop
 8008988:	e00c      	b.n	80089a4 <USBH_Process+0x3cc>
      break;
 800898a:	bf00      	nop
 800898c:	e00a      	b.n	80089a4 <USBH_Process+0x3cc>
    break;
 800898e:	bf00      	nop
 8008990:	e008      	b.n	80089a4 <USBH_Process+0x3cc>
      break;
 8008992:	bf00      	nop
 8008994:	e006      	b.n	80089a4 <USBH_Process+0x3cc>
      break;
 8008996:	bf00      	nop
 8008998:	e004      	b.n	80089a4 <USBH_Process+0x3cc>
      break;
 800899a:	bf00      	nop
 800899c:	e002      	b.n	80089a4 <USBH_Process+0x3cc>
      break;
 800899e:	bf00      	nop
 80089a0:	e000      	b.n	80089a4 <USBH_Process+0x3cc>
      break;
 80089a2:	bf00      	nop
  }
  return USBH_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop

080089b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b088      	sub	sp, #32
 80089b4:	af04      	add	r7, sp, #16
 80089b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80089b8:	2301      	movs	r3, #1
 80089ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80089bc:	2301      	movs	r3, #1
 80089be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b07      	cmp	r3, #7
 80089c6:	f200 81c1 	bhi.w	8008d4c <USBH_HandleEnum+0x39c>
 80089ca:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <USBH_HandleEnum+0x20>)
 80089cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d0:	080089f1 	.word	0x080089f1
 80089d4:	08008aaf 	.word	0x08008aaf
 80089d8:	08008b19 	.word	0x08008b19
 80089dc:	08008ba7 	.word	0x08008ba7
 80089e0:	08008c11 	.word	0x08008c11
 80089e4:	08008c81 	.word	0x08008c81
 80089e8:	08008cc7 	.word	0x08008cc7
 80089ec:	08008d0d 	.word	0x08008d0d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80089f0:	2108      	movs	r1, #8
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa50 	bl	8008e98 <USBH_Get_DevDesc>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d130      	bne.n	8008a64 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	7919      	ldrb	r1, [r3, #4]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a26:	b292      	uxth	r2, r2
 8008a28:	9202      	str	r2, [sp, #8]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	9201      	str	r2, [sp, #4]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	4603      	mov	r3, r0
 8008a32:	2280      	movs	r2, #128	; 0x80
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f865 	bl	8009b04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7959      	ldrb	r1, [r3, #5]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a4e:	b292      	uxth	r2, r2
 8008a50:	9202      	str	r2, [sp, #8]
 8008a52:	2200      	movs	r2, #0
 8008a54:	9201      	str	r2, [sp, #4]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 f851 	bl	8009b04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a62:	e175      	b.n	8008d50 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	f040 8172 	bne.w	8008d50 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a72:	3301      	adds	r3, #1
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d903      	bls.n	8008a8e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	220d      	movs	r2, #13
 8008a8a:	701a      	strb	r2, [r3, #0]
      break;
 8008a8c:	e160      	b.n	8008d50 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	795b      	ldrb	r3, [r3, #5]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 f885 	bl	8009ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	791b      	ldrb	r3, [r3, #4]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 f87f 	bl	8009ba4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	701a      	strb	r2, [r3, #0]
      break;
 8008aac:	e150      	b.n	8008d50 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008aae:	2112      	movs	r1, #18
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f9f1 	bl	8008e98 <USBH_Get_DevDesc>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d103      	bne.n	8008ac8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ac6:	e145      	b.n	8008d54 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	f040 8142 	bne.w	8008d54 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d903      	bls.n	8008af2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	220d      	movs	r2, #13
 8008aee:	701a      	strb	r2, [r3, #0]
      break;
 8008af0:	e130      	b.n	8008d54 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	795b      	ldrb	r3, [r3, #5]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f853 	bl	8009ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	791b      	ldrb	r3, [r3, #4]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f84d 	bl	8009ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]
      break;
 8008b16:	e11d      	b.n	8008d54 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008b18:	2101      	movs	r1, #1
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa68 	bl	8008ff0 <USBH_SetAddress>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d132      	bne.n	8008b90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008b2a:	2002      	movs	r0, #2
 8008b2c:	f001 fb30 	bl	800a190 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2203      	movs	r2, #3
 8008b3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7919      	ldrb	r1, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b52:	b292      	uxth	r2, r2
 8008b54:	9202      	str	r2, [sp, #8]
 8008b56:	2200      	movs	r2, #0
 8008b58:	9201      	str	r2, [sp, #4]
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2280      	movs	r2, #128	; 0x80
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 ffcf 	bl	8009b04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7959      	ldrb	r1, [r3, #5]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b7a:	b292      	uxth	r2, r2
 8008b7c:	9202      	str	r2, [sp, #8]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	9201      	str	r2, [sp, #4]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	4603      	mov	r3, r0
 8008b86:	2200      	movs	r2, #0
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 ffbb 	bl	8009b04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b8e:	e0e3      	b.n	8008d58 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	f040 80e0 	bne.w	8008d58 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	220d      	movs	r2, #13
 8008b9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	705a      	strb	r2, [r3, #1]
      break;
 8008ba4:	e0d8      	b.n	8008d58 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008ba6:	2109      	movs	r1, #9
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f99d 	bl	8008ee8 <USBH_Get_CfgDesc>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2204      	movs	r2, #4
 8008bbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008bbe:	e0cd      	b.n	8008d5c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	f040 80ca 	bne.w	8008d5c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d903      	bls.n	8008bea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	220d      	movs	r2, #13
 8008be6:	701a      	strb	r2, [r3, #0]
      break;
 8008be8:	e0b8      	b.n	8008d5c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	795b      	ldrb	r3, [r3, #5]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 ffd7 	bl	8009ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	791b      	ldrb	r3, [r3, #4]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 ffd1 	bl	8009ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	701a      	strb	r2, [r3, #0]
      break;
 8008c0e:	e0a5      	b.n	8008d5c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f965 	bl	8008ee8 <USBH_Get_CfgDesc>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2205      	movs	r2, #5
 8008c2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c2e:	e097      	b.n	8008d60 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	f040 8094 	bne.w	8008d60 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c3e:	3301      	adds	r3, #1
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d903      	bls.n	8008c5a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	220d      	movs	r2, #13
 8008c56:	701a      	strb	r2, [r3, #0]
      break;
 8008c58:	e082      	b.n	8008d60 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	795b      	ldrb	r3, [r3, #5]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 ff9f 	bl	8009ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	791b      	ldrb	r3, [r3, #4]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 ff99 	bl	8009ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
      break;
 8008c7e:	e06f      	b.n	8008d60 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d019      	beq.n	8008cbe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c96:	23ff      	movs	r3, #255	; 0xff
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f949 	bl	8008f30 <USBH_Get_StringDesc>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d103      	bne.n	8008cb0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2206      	movs	r2, #6
 8008cac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008cae:	e059      	b.n	8008d64 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d156      	bne.n	8008d64 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2206      	movs	r2, #6
 8008cba:	705a      	strb	r2, [r3, #1]
      break;
 8008cbc:	e052      	b.n	8008d64 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2206      	movs	r2, #6
 8008cc2:	705a      	strb	r2, [r3, #1]
      break;
 8008cc4:	e04e      	b.n	8008d64 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d019      	beq.n	8008d04 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008cdc:	23ff      	movs	r3, #255	; 0xff
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f926 	bl	8008f30 <USBH_Get_StringDesc>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008cf4:	e038      	b.n	8008d68 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d135      	bne.n	8008d68 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2207      	movs	r2, #7
 8008d00:	705a      	strb	r2, [r3, #1]
      break;
 8008d02:	e031      	b.n	8008d68 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2207      	movs	r2, #7
 8008d08:	705a      	strb	r2, [r3, #1]
      break;
 8008d0a:	e02d      	b.n	8008d68 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d017      	beq.n	8008d46 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d22:	23ff      	movs	r3, #255	; 0xff
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f903 	bl	8008f30 <USBH_Get_StringDesc>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d102      	bne.n	8008d3a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008d38:	e018      	b.n	8008d6c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d115      	bne.n	8008d6c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e012      	b.n	8008d6c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]
      break;
 8008d4a:	e00f      	b.n	8008d6c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008d4c:	bf00      	nop
 8008d4e:	e00e      	b.n	8008d6e <USBH_HandleEnum+0x3be>
      break;
 8008d50:	bf00      	nop
 8008d52:	e00c      	b.n	8008d6e <USBH_HandleEnum+0x3be>
      break;
 8008d54:	bf00      	nop
 8008d56:	e00a      	b.n	8008d6e <USBH_HandleEnum+0x3be>
      break;
 8008d58:	bf00      	nop
 8008d5a:	e008      	b.n	8008d6e <USBH_HandleEnum+0x3be>
      break;
 8008d5c:	bf00      	nop
 8008d5e:	e006      	b.n	8008d6e <USBH_HandleEnum+0x3be>
      break;
 8008d60:	bf00      	nop
 8008d62:	e004      	b.n	8008d6e <USBH_HandleEnum+0x3be>
      break;
 8008d64:	bf00      	nop
 8008d66:	e002      	b.n	8008d6e <USBH_HandleEnum+0x3be>
      break;
 8008d68:	bf00      	nop
 8008d6a:	e000      	b.n	8008d6e <USBH_HandleEnum+0x3be>
      break;
 8008d6c:	bf00      	nop
  }
  return Status;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f804 	bl	8008dba <USBH_HandleSof>
}
 8008db2:	bf00      	nop
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b0b      	cmp	r3, #11
 8008dca:	d10a      	bne.n	8008de2 <USBH_HandleSof+0x28>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
  }
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008dfa:	bf00      	nop
}
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008e16:	bf00      	nop
}
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 f844 	bl	8009efe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	791b      	ldrb	r3, [r3, #4]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fe91 	bl	8009ba4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	795b      	ldrb	r3, [r3, #5]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fe8b 	bl	8009ba4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f864 	bl	8008f86 <USBH_GetDescriptor>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	f000 f918 	bl	800910e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	331c      	adds	r3, #28
 8008ef8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008efa:	887b      	ldrh	r3, [r7, #2]
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f04:	2100      	movs	r1, #0
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f83d 	bl	8008f86 <USBH_GetDescriptor>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d107      	bne.n	8008f26 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008f16:	887b      	ldrh	r3, [r7, #2]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f987 	bl	8009230 <USBH_ParseCfgDesc>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	607a      	str	r2, [r7, #4]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	72fb      	strb	r3, [r7, #11]
 8008f40:	4613      	mov	r3, r2
 8008f42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008f4c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008f54:	893b      	ldrh	r3, [r7, #8]
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f812 	bl	8008f86 <USBH_GetDescriptor>
 8008f62:	4603      	mov	r3, r0
 8008f64:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d107      	bne.n	8008f7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f72:	893a      	ldrh	r2, [r7, #8]
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fb24 	bl	80095c4 <USBH_ParseStringDesc>
  }

  return status;
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	607b      	str	r3, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	72fb      	strb	r3, [r7, #11]
 8008f94:	4613      	mov	r3, r2
 8008f96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	789b      	ldrb	r3, [r3, #2]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d11c      	bne.n	8008fda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008fa0:	7afb      	ldrb	r3, [r7, #11]
 8008fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2206      	movs	r2, #6
 8008fb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	893a      	ldrh	r2, [r7, #8]
 8008fb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008fb8:	893b      	ldrh	r3, [r7, #8]
 8008fba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fc2:	d104      	bne.n	8008fce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f240 4209 	movw	r2, #1033	; 0x409
 8008fca:	829a      	strh	r2, [r3, #20]
 8008fcc:	e002      	b.n	8008fd4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8b3a      	ldrh	r2, [r7, #24]
 8008fd8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008fda:	8b3b      	ldrh	r3, [r7, #24]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fb3d 	bl	8009660 <USBH_CtlReq>
 8008fe6:	4603      	mov	r3, r0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	789b      	ldrb	r3, [r3, #2]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d10f      	bne.n	8009024 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2205      	movs	r2, #5
 800900e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009024:	2200      	movs	r2, #0
 8009026:	2100      	movs	r1, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fb19 	bl	8009660 <USBH_CtlReq>
 800902e:	4603      	mov	r3, r0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	789b      	ldrb	r3, [r3, #2]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d10e      	bne.n	800906a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2209      	movs	r2, #9
 8009056:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	887a      	ldrh	r2, [r7, #2]
 800905c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 faf6 	bl	8009660 <USBH_CtlReq>
 8009074:	4603      	mov	r3, r0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	460b      	mov	r3, r1
 8009088:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	789b      	ldrb	r3, [r3, #2]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d10f      	bne.n	80090b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2203      	movs	r2, #3
 800909c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090b2:	2200      	movs	r2, #0
 80090b4:	2100      	movs	r1, #0
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fad2 	bl	8009660 <USBH_CtlReq>
 80090bc:	4603      	mov	r3, r0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	789b      	ldrb	r3, [r3, #2]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d10f      	bne.n	80090fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80090fa:	2200      	movs	r2, #0
 80090fc:	2100      	movs	r1, #0
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 faae 	bl	8009660 <USBH_CtlReq>
 8009104:	4603      	mov	r3, r0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800910e:	b480      	push	{r7}
 8009110:	b085      	sub	sp, #20
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	4613      	mov	r3, r2
 800911a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	785a      	ldrb	r2, [r3, #1]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3302      	adds	r3, #2
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	b29a      	uxth	r2, r3
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	3303      	adds	r3, #3
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	b29b      	uxth	r3, r3
 8009140:	4313      	orrs	r3, r2
 8009142:	b29a      	uxth	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	791a      	ldrb	r2, [r3, #4]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	795a      	ldrb	r2, [r3, #5]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	799a      	ldrb	r2, [r3, #6]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	79da      	ldrb	r2, [r3, #7]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	79db      	ldrb	r3, [r3, #7]
 800916c:	2b20      	cmp	r3, #32
 800916e:	dc11      	bgt.n	8009194 <USBH_ParseDevDesc+0x86>
 8009170:	2b08      	cmp	r3, #8
 8009172:	db16      	blt.n	80091a2 <USBH_ParseDevDesc+0x94>
 8009174:	3b08      	subs	r3, #8
 8009176:	2201      	movs	r2, #1
 8009178:	fa02 f303 	lsl.w	r3, r2, r3
 800917c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009184:	2b00      	cmp	r3, #0
 8009186:	bf14      	ite	ne
 8009188:	2301      	movne	r3, #1
 800918a:	2300      	moveq	r3, #0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d102      	bne.n	8009198 <USBH_ParseDevDesc+0x8a>
 8009192:	e006      	b.n	80091a2 <USBH_ParseDevDesc+0x94>
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d104      	bne.n	80091a2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	79da      	ldrb	r2, [r3, #7]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	71da      	strb	r2, [r3, #7]
      break;
 80091a0:	e003      	b.n	80091aa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2240      	movs	r2, #64	; 0x40
 80091a6:	71da      	strb	r2, [r3, #7]
      break;
 80091a8:	bf00      	nop
  }

  if (length > 8U)
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d939      	bls.n	8009224 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	3308      	adds	r3, #8
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	3309      	adds	r3, #9
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4313      	orrs	r3, r2
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	330a      	adds	r3, #10
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	330b      	adds	r3, #11
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	021b      	lsls	r3, r3, #8
 80091de:	b29b      	uxth	r3, r3
 80091e0:	4313      	orrs	r3, r2
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	330c      	adds	r3, #12
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	330d      	adds	r3, #13
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	4313      	orrs	r3, r2
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	7b9a      	ldrb	r2, [r3, #14]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	7bda      	ldrb	r2, [r3, #15]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	7c1a      	ldrb	r2, [r3, #16]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	7c5a      	ldrb	r2, [r3, #17]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	745a      	strb	r2, [r3, #17]
  }
}
 8009224:	bf00      	nop
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08c      	sub	sp, #48	; 0x30
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009244:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	785a      	ldrb	r2, [r3, #1]
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	3302      	adds	r3, #2
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	b29a      	uxth	r2, r3
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	3303      	adds	r3, #3
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	b29b      	uxth	r3, r3
 8009280:	021b      	lsls	r3, r3, #8
 8009282:	b29b      	uxth	r3, r3
 8009284:	4313      	orrs	r3, r2
 8009286:	b29b      	uxth	r3, r3
 8009288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800928c:	bf28      	it	cs
 800928e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009292:	b29a      	uxth	r2, r3
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	791a      	ldrb	r2, [r3, #4]
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	795a      	ldrb	r2, [r3, #5]
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	799a      	ldrb	r2, [r3, #6]
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	79da      	ldrb	r2, [r3, #7]
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	7a1a      	ldrb	r2, [r3, #8]
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b09      	cmp	r3, #9
 80092c6:	d002      	beq.n	80092ce <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	2209      	movs	r2, #9
 80092cc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80092ce:	88fb      	ldrh	r3, [r7, #6]
 80092d0:	2b09      	cmp	r3, #9
 80092d2:	f240 809d 	bls.w	8009410 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80092d6:	2309      	movs	r3, #9
 80092d8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80092de:	e081      	b.n	80093e4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80092e0:	f107 0316 	add.w	r3, r7, #22
 80092e4:	4619      	mov	r1, r3
 80092e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e8:	f000 f99f 	bl	800962a <USBH_GetNextDesc>
 80092ec:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	785b      	ldrb	r3, [r3, #1]
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d176      	bne.n	80093e4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80092f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b09      	cmp	r3, #9
 80092fc:	d002      	beq.n	8009304 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	2209      	movs	r2, #9
 8009302:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009308:	221a      	movs	r2, #26
 800930a:	fb02 f303 	mul.w	r3, r2, r3
 800930e:	3308      	adds	r3, #8
 8009310:	6a3a      	ldr	r2, [r7, #32]
 8009312:	4413      	add	r3, r2
 8009314:	3302      	adds	r3, #2
 8009316:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800931a:	69f8      	ldr	r0, [r7, #28]
 800931c:	f000 f87e 	bl	800941c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009320:	2300      	movs	r3, #0
 8009322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800932a:	e043      	b.n	80093b4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800932c:	f107 0316 	add.w	r3, r7, #22
 8009330:	4619      	mov	r1, r3
 8009332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009334:	f000 f979 	bl	800962a <USBH_GetNextDesc>
 8009338:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	2b05      	cmp	r3, #5
 8009340:	d138      	bne.n	80093b4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	795b      	ldrb	r3, [r3, #5]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d10f      	bne.n	800936a <USBH_ParseCfgDesc+0x13a>
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	799b      	ldrb	r3, [r3, #6]
 800934e:	2b02      	cmp	r3, #2
 8009350:	d10b      	bne.n	800936a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	79db      	ldrb	r3, [r3, #7]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10f      	bne.n	800937a <USBH_ParseCfgDesc+0x14a>
 800935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b09      	cmp	r3, #9
 8009360:	d00b      	beq.n	800937a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	2209      	movs	r2, #9
 8009366:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009368:	e007      	b.n	800937a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b07      	cmp	r3, #7
 8009370:	d004      	beq.n	800937c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	2207      	movs	r2, #7
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	e000      	b.n	800937c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800937a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800937c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009380:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009384:	3201      	adds	r2, #1
 8009386:	00d2      	lsls	r2, r2, #3
 8009388:	211a      	movs	r1, #26
 800938a:	fb01 f303 	mul.w	r3, r1, r3
 800938e:	4413      	add	r3, r2
 8009390:	3308      	adds	r3, #8
 8009392:	6a3a      	ldr	r2, [r7, #32]
 8009394:	4413      	add	r3, r2
 8009396:	3304      	adds	r3, #4
 8009398:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800939a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800939c:	69b9      	ldr	r1, [r7, #24]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f86b 	bl	800947a <USBH_ParseEPDesc>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80093aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093ae:	3301      	adds	r3, #1
 80093b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	791b      	ldrb	r3, [r3, #4]
 80093b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80093bc:	429a      	cmp	r2, r3
 80093be:	d204      	bcs.n	80093ca <USBH_ParseCfgDesc+0x19a>
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	885a      	ldrh	r2, [r3, #2]
 80093c4:	8afb      	ldrh	r3, [r7, #22]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d8b0      	bhi.n	800932c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	791b      	ldrb	r3, [r3, #4]
 80093ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d201      	bcs.n	80093da <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e01c      	b.n	8009414 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80093da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093de:	3301      	adds	r3, #1
 80093e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80093e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d805      	bhi.n	80093f8 <USBH_ParseCfgDesc+0x1c8>
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	885a      	ldrh	r2, [r3, #2]
 80093f0:	8afb      	ldrh	r3, [r7, #22]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f63f af74 	bhi.w	80092e0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	791b      	ldrb	r3, [r3, #4]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	bf28      	it	cs
 8009400:	2302      	movcs	r3, #2
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009408:	429a      	cmp	r2, r3
 800940a:	d201      	bcs.n	8009410 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800940c:	2303      	movs	r3, #3
 800940e:	e001      	b.n	8009414 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009414:	4618      	mov	r0, r3
 8009416:	3730      	adds	r7, #48	; 0x30
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	785a      	ldrb	r2, [r3, #1]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	789a      	ldrb	r2, [r3, #2]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	78da      	ldrb	r2, [r3, #3]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	791a      	ldrb	r2, [r3, #4]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	795a      	ldrb	r2, [r3, #5]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	799a      	ldrb	r2, [r3, #6]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	79da      	ldrb	r2, [r3, #7]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	7a1a      	ldrb	r2, [r3, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	721a      	strb	r2, [r3, #8]
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800947a:	b480      	push	{r7}
 800947c:	b087      	sub	sp, #28
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	781a      	ldrb	r2, [r3, #0]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	785a      	ldrb	r2, [r3, #1]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	789a      	ldrb	r2, [r3, #2]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	78da      	ldrb	r2, [r3, #3]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	3304      	adds	r3, #4
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3305      	adds	r3, #5
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	021b      	lsls	r3, r3, #8
 80094bc:	b29b      	uxth	r3, r3
 80094be:	4313      	orrs	r3, r2
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	799a      	ldrb	r2, [r3, #6]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	889b      	ldrh	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d102      	bne.n	80094dc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80094d6:	2303      	movs	r3, #3
 80094d8:	75fb      	strb	r3, [r7, #23]
 80094da:	e033      	b.n	8009544 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	889b      	ldrh	r3, [r3, #4]
 80094e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80094e4:	f023 0307 	bic.w	r3, r3, #7
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	889b      	ldrh	r3, [r3, #4]
 80094f2:	b21a      	sxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3304      	adds	r3, #4
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	b299      	uxth	r1, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3305      	adds	r3, #5
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	021b      	lsls	r3, r3, #8
 8009506:	b29b      	uxth	r3, r3
 8009508:	430b      	orrs	r3, r1
 800950a:	b29b      	uxth	r3, r3
 800950c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009510:	2b00      	cmp	r3, #0
 8009512:	d110      	bne.n	8009536 <USBH_ParseEPDesc+0xbc>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3304      	adds	r3, #4
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	b299      	uxth	r1, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3305      	adds	r3, #5
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	021b      	lsls	r3, r3, #8
 8009526:	b29b      	uxth	r3, r3
 8009528:	430b      	orrs	r3, r1
 800952a:	b29b      	uxth	r3, r3
 800952c:	b21b      	sxth	r3, r3
 800952e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009532:	b21b      	sxth	r3, r3
 8009534:	e001      	b.n	800953a <USBH_ParseEPDesc+0xc0>
 8009536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800953a:	4313      	orrs	r3, r2
 800953c:	b21b      	sxth	r3, r3
 800953e:	b29a      	uxth	r2, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800954a:	2b00      	cmp	r3, #0
 800954c:	d116      	bne.n	800957c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	78db      	ldrb	r3, [r3, #3]
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	2b01      	cmp	r3, #1
 8009558:	d005      	beq.n	8009566 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	78db      	ldrb	r3, [r3, #3]
 800955e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009562:	2b03      	cmp	r3, #3
 8009564:	d127      	bne.n	80095b6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	799b      	ldrb	r3, [r3, #6]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <USBH_ParseEPDesc+0xfc>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	799b      	ldrb	r3, [r3, #6]
 8009572:	2b10      	cmp	r3, #16
 8009574:	d91f      	bls.n	80095b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009576:	2303      	movs	r3, #3
 8009578:	75fb      	strb	r3, [r7, #23]
 800957a:	e01c      	b.n	80095b6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	78db      	ldrb	r3, [r3, #3]
 8009580:	f003 0303 	and.w	r3, r3, #3
 8009584:	2b01      	cmp	r3, #1
 8009586:	d10a      	bne.n	800959e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	799b      	ldrb	r3, [r3, #6]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <USBH_ParseEPDesc+0x11e>
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	799b      	ldrb	r3, [r3, #6]
 8009594:	2b10      	cmp	r3, #16
 8009596:	d90e      	bls.n	80095b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009598:	2303      	movs	r3, #3
 800959a:	75fb      	strb	r3, [r7, #23]
 800959c:	e00b      	b.n	80095b6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	78db      	ldrb	r3, [r3, #3]
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d105      	bne.n	80095b6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	799b      	ldrb	r3, [r3, #6]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80095b2:	2303      	movs	r3, #3
 80095b4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	4613      	mov	r3, r2
 80095d0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d120      	bne.n	800961e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	1e9a      	subs	r2, r3, #2
 80095e2:	88fb      	ldrh	r3, [r7, #6]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bf28      	it	cs
 80095e8:	4613      	movcs	r3, r2
 80095ea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	3302      	adds	r3, #2
 80095f0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80095f2:	2300      	movs	r3, #0
 80095f4:	82fb      	strh	r3, [r7, #22]
 80095f6:	e00b      	b.n	8009610 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80095f8:	8afb      	ldrh	r3, [r7, #22]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	4413      	add	r3, r2
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	3301      	adds	r3, #1
 8009608:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800960a:	8afb      	ldrh	r3, [r7, #22]
 800960c:	3302      	adds	r3, #2
 800960e:	82fb      	strh	r3, [r7, #22]
 8009610:	8afa      	ldrh	r2, [r7, #22]
 8009612:	8abb      	ldrh	r3, [r7, #20]
 8009614:	429a      	cmp	r2, r3
 8009616:	d3ef      	bcc.n	80095f8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]
  }
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800962a:	b480      	push	{r7}
 800962c:	b085      	sub	sp, #20
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	881a      	ldrh	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	b29b      	uxth	r3, r3
 800963e:	4413      	add	r3, r2
 8009640:	b29a      	uxth	r2, r3
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009652:	68fb      	ldr	r3, [r7, #12]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800966e:	2301      	movs	r3, #1
 8009670:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	789b      	ldrb	r3, [r3, #2]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d002      	beq.n	8009680 <USBH_CtlReq+0x20>
 800967a:	2b02      	cmp	r3, #2
 800967c:	d00f      	beq.n	800969e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800967e:	e027      	b.n	80096d0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	88fa      	ldrh	r2, [r7, #6]
 800968a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2201      	movs	r2, #1
 8009690:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2202      	movs	r2, #2
 8009696:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009698:	2301      	movs	r3, #1
 800969a:	75fb      	strb	r3, [r7, #23]
      break;
 800969c:	e018      	b.n	80096d0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f81c 	bl	80096dc <USBH_HandleControl>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <USBH_CtlReq+0x54>
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d106      	bne.n	80096c2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2201      	movs	r2, #1
 80096b8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	761a      	strb	r2, [r3, #24]
      break;
 80096c0:	e005      	b.n	80096ce <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d102      	bne.n	80096ce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2201      	movs	r2, #1
 80096cc:	709a      	strb	r2, [r3, #2]
      break;
 80096ce:	bf00      	nop
  }
  return status;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af02      	add	r7, sp, #8
 80096e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80096e4:	2301      	movs	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	7e1b      	ldrb	r3, [r3, #24]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	2b0a      	cmp	r3, #10
 80096f4:	f200 8156 	bhi.w	80099a4 <USBH_HandleControl+0x2c8>
 80096f8:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <USBH_HandleControl+0x24>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	0800972d 	.word	0x0800972d
 8009704:	08009747 	.word	0x08009747
 8009708:	080097b1 	.word	0x080097b1
 800970c:	080097d7 	.word	0x080097d7
 8009710:	0800980f 	.word	0x0800980f
 8009714:	08009839 	.word	0x08009839
 8009718:	0800988b 	.word	0x0800988b
 800971c:	080098ad 	.word	0x080098ad
 8009720:	080098e9 	.word	0x080098e9
 8009724:	0800990f 	.word	0x0800990f
 8009728:	0800994d 	.word	0x0800994d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f103 0110 	add.w	r1, r3, #16
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	795b      	ldrb	r3, [r3, #5]
 8009736:	461a      	mov	r2, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f943 	bl	80099c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	761a      	strb	r2, [r3, #24]
      break;
 8009744:	e139      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	795b      	ldrb	r3, [r3, #5]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fcc5 	bl	800a0dc <USBH_LL_GetURBState>
 8009752:	4603      	mov	r3, r0
 8009754:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d11e      	bne.n	800979a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7c1b      	ldrb	r3, [r3, #16]
 8009760:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009764:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	8adb      	ldrh	r3, [r3, #22]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800976e:	7b7b      	ldrb	r3, [r7, #13]
 8009770:	2b80      	cmp	r3, #128	; 0x80
 8009772:	d103      	bne.n	800977c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2203      	movs	r2, #3
 8009778:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800977a:	e115      	b.n	80099a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2205      	movs	r2, #5
 8009780:	761a      	strb	r2, [r3, #24]
      break;
 8009782:	e111      	b.n	80099a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009784:	7b7b      	ldrb	r3, [r7, #13]
 8009786:	2b80      	cmp	r3, #128	; 0x80
 8009788:	d103      	bne.n	8009792 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2209      	movs	r2, #9
 800978e:	761a      	strb	r2, [r3, #24]
      break;
 8009790:	e10a      	b.n	80099a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2207      	movs	r2, #7
 8009796:	761a      	strb	r2, [r3, #24]
      break;
 8009798:	e106      	b.n	80099a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b04      	cmp	r3, #4
 800979e:	d003      	beq.n	80097a8 <USBH_HandleControl+0xcc>
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	f040 8100 	bne.w	80099a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	220b      	movs	r2, #11
 80097ac:	761a      	strb	r2, [r3, #24]
      break;
 80097ae:	e0fb      	b.n	80099a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6899      	ldr	r1, [r3, #8]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	899a      	ldrh	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	791b      	ldrb	r3, [r3, #4]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f93a 	bl	8009a42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2204      	movs	r2, #4
 80097d2:	761a      	strb	r2, [r3, #24]
      break;
 80097d4:	e0f1      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	791b      	ldrb	r3, [r3, #4]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fc7d 	bl	800a0dc <USBH_LL_GetURBState>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d102      	bne.n	80097f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2209      	movs	r2, #9
 80097f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b05      	cmp	r3, #5
 80097f6:	d102      	bne.n	80097fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80097f8:	2303      	movs	r3, #3
 80097fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097fc:	e0d6      	b.n	80099ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b04      	cmp	r3, #4
 8009802:	f040 80d3 	bne.w	80099ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	220b      	movs	r2, #11
 800980a:	761a      	strb	r2, [r3, #24]
      break;
 800980c:	e0ce      	b.n	80099ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6899      	ldr	r1, [r3, #8]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	899a      	ldrh	r2, [r3, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	795b      	ldrb	r3, [r3, #5]
 800981a:	2001      	movs	r0, #1
 800981c:	9000      	str	r0, [sp, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f8ea 	bl	80099f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800982a:	b29a      	uxth	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2206      	movs	r2, #6
 8009834:	761a      	strb	r2, [r3, #24]
      break;
 8009836:	e0c0      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	795b      	ldrb	r3, [r3, #5]
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fc4c 	bl	800a0dc <USBH_LL_GetURBState>
 8009844:	4603      	mov	r3, r0
 8009846:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d103      	bne.n	8009856 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2207      	movs	r2, #7
 8009852:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009854:	e0ac      	b.n	80099b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b05      	cmp	r3, #5
 800985a:	d105      	bne.n	8009868 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	220c      	movs	r2, #12
 8009860:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009862:	2303      	movs	r3, #3
 8009864:	73fb      	strb	r3, [r7, #15]
      break;
 8009866:	e0a3      	b.n	80099b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d103      	bne.n	8009876 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2205      	movs	r2, #5
 8009872:	761a      	strb	r2, [r3, #24]
      break;
 8009874:	e09c      	b.n	80099b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	2b04      	cmp	r3, #4
 800987a:	f040 8099 	bne.w	80099b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	220b      	movs	r2, #11
 8009882:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009884:	2302      	movs	r3, #2
 8009886:	73fb      	strb	r3, [r7, #15]
      break;
 8009888:	e092      	b.n	80099b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	791b      	ldrb	r3, [r3, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	2100      	movs	r1, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f8d5 	bl	8009a42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2208      	movs	r2, #8
 80098a8:	761a      	strb	r2, [r3, #24]

      break;
 80098aa:	e086      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	791b      	ldrb	r3, [r3, #4]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fc12 	bl	800a0dc <USBH_LL_GetURBState>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d105      	bne.n	80098ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220d      	movs	r2, #13
 80098c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098cc:	e072      	b.n	80099b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	d103      	bne.n	80098dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	220b      	movs	r2, #11
 80098d8:	761a      	strb	r2, [r3, #24]
      break;
 80098da:	e06b      	b.n	80099b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b05      	cmp	r3, #5
 80098e0:	d168      	bne.n	80099b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80098e2:	2303      	movs	r3, #3
 80098e4:	73fb      	strb	r3, [r7, #15]
      break;
 80098e6:	e065      	b.n	80099b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	795b      	ldrb	r3, [r3, #5]
 80098ec:	2201      	movs	r2, #1
 80098ee:	9200      	str	r2, [sp, #0]
 80098f0:	2200      	movs	r2, #0
 80098f2:	2100      	movs	r1, #0
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f87f 	bl	80099f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	220a      	movs	r2, #10
 800990a:	761a      	strb	r2, [r3, #24]
      break;
 800990c:	e055      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	795b      	ldrb	r3, [r3, #5]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fbe1 	bl	800a0dc <USBH_LL_GetURBState>
 800991a:	4603      	mov	r3, r0
 800991c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d105      	bne.n	8009930 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	220d      	movs	r2, #13
 800992c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800992e:	e043      	b.n	80099b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d103      	bne.n	800993e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2209      	movs	r2, #9
 800993a:	761a      	strb	r2, [r3, #24]
      break;
 800993c:	e03c      	b.n	80099b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	2b04      	cmp	r3, #4
 8009942:	d139      	bne.n	80099b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	220b      	movs	r2, #11
 8009948:	761a      	strb	r2, [r3, #24]
      break;
 800994a:	e035      	b.n	80099b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7e5b      	ldrb	r3, [r3, #25]
 8009950:	3301      	adds	r3, #1
 8009952:	b2da      	uxtb	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	765a      	strb	r2, [r3, #25]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7e5b      	ldrb	r3, [r3, #25]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d806      	bhi.n	800996e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800996c:	e025      	b.n	80099ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009974:	2106      	movs	r1, #6
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	795b      	ldrb	r3, [r3, #5]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f90c 	bl	8009ba4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	791b      	ldrb	r3, [r3, #4]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f906 	bl	8009ba4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800999e:	2302      	movs	r3, #2
 80099a0:	73fb      	strb	r3, [r7, #15]
      break;
 80099a2:	e00a      	b.n	80099ba <USBH_HandleControl+0x2de>

    default:
      break;
 80099a4:	bf00      	nop
 80099a6:	e008      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099a8:	bf00      	nop
 80099aa:	e006      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099ac:	bf00      	nop
 80099ae:	e004      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099b0:	bf00      	nop
 80099b2:	e002      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099b4:	bf00      	nop
 80099b6:	e000      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099b8:	bf00      	nop
  }

  return status;
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af04      	add	r7, sp, #16
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099d2:	79f9      	ldrb	r1, [r7, #7]
 80099d4:	2300      	movs	r3, #0
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	2308      	movs	r3, #8
 80099da:	9302      	str	r3, [sp, #8]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	9301      	str	r3, [sp, #4]
 80099e0:	2300      	movs	r3, #0
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	2300      	movs	r3, #0
 80099e6:	2200      	movs	r2, #0
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 fb46 	bl	800a07a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b088      	sub	sp, #32
 80099fc:	af04      	add	r7, sp, #16
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	4611      	mov	r1, r2
 8009a04:	461a      	mov	r2, r3
 8009a06:	460b      	mov	r3, r1
 8009a08:	80fb      	strh	r3, [r7, #6]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a1c:	7979      	ldrb	r1, [r7, #5]
 8009a1e:	7e3b      	ldrb	r3, [r7, #24]
 8009a20:	9303      	str	r3, [sp, #12]
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	9302      	str	r3, [sp, #8]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2200      	movs	r2, #0
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 fb21 	bl	800a07a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b088      	sub	sp, #32
 8009a46:	af04      	add	r7, sp, #16
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	461a      	mov	r2, r3
 8009a50:	460b      	mov	r3, r1
 8009a52:	80fb      	strh	r3, [r7, #6]
 8009a54:	4613      	mov	r3, r2
 8009a56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a58:	7979      	ldrb	r1, [r7, #5]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	9303      	str	r3, [sp, #12]
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	9302      	str	r3, [sp, #8]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	2301      	movs	r3, #1
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fb03 	bl	800a07a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a74:	2300      	movs	r3, #0

}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b088      	sub	sp, #32
 8009a82:	af04      	add	r7, sp, #16
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	80fb      	strh	r3, [r7, #6]
 8009a90:	4613      	mov	r3, r2
 8009a92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009aa2:	7979      	ldrb	r1, [r7, #5]
 8009aa4:	7e3b      	ldrb	r3, [r7, #24]
 8009aa6:	9303      	str	r3, [sp, #12]
 8009aa8:	88fb      	ldrh	r3, [r7, #6]
 8009aaa:	9302      	str	r3, [sp, #8]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 fade 	bl	800a07a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af04      	add	r7, sp, #16
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	80fb      	strh	r3, [r7, #6]
 8009ada:	4613      	mov	r3, r2
 8009adc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ade:	7979      	ldrb	r1, [r7, #5]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9303      	str	r3, [sp, #12]
 8009ae4:	88fb      	ldrh	r3, [r7, #6]
 8009ae6:	9302      	str	r3, [sp, #8]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	9301      	str	r3, [sp, #4]
 8009aec:	2301      	movs	r3, #1
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	2302      	movs	r3, #2
 8009af2:	2201      	movs	r2, #1
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 fac0 	bl	800a07a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af04      	add	r7, sp, #16
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	461a      	mov	r2, r3
 8009b12:	4603      	mov	r3, r0
 8009b14:	70fb      	strb	r3, [r7, #3]
 8009b16:	460b      	mov	r3, r1
 8009b18:	70bb      	strb	r3, [r7, #2]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009b1e:	7878      	ldrb	r0, [r7, #1]
 8009b20:	78ba      	ldrb	r2, [r7, #2]
 8009b22:	78f9      	ldrb	r1, [r7, #3]
 8009b24:	8b3b      	ldrh	r3, [r7, #24]
 8009b26:	9302      	str	r3, [sp, #8]
 8009b28:	7d3b      	ldrb	r3, [r7, #20]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	7c3b      	ldrb	r3, [r7, #16]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	4603      	mov	r3, r0
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa53 	bl	8009fde <USBH_LL_OpenPipe>

  return USBH_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa72 	bl	800a03c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f836 	bl	8009be0 <USBH_GetFreePipe>
 8009b74:	4603      	mov	r3, r0
 8009b76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009b78:	89fb      	ldrh	r3, [r7, #14]
 8009b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d00a      	beq.n	8009b98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	89fb      	ldrh	r3, [r7, #14]
 8009b86:	f003 030f 	and.w	r3, r3, #15
 8009b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	33e0      	adds	r3, #224	; 0xe0
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	440b      	add	r3, r1
 8009b96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009b98:	89fb      	ldrh	r3, [r7, #14]
 8009b9a:	b2db      	uxtb	r3, r3
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	2b0f      	cmp	r3, #15
 8009bb4:	d80d      	bhi.n	8009bd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009bb6:	78fb      	ldrb	r3, [r7, #3]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	33e0      	adds	r3, #224	; 0xe0
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	33e0      	adds	r3, #224	; 0xe0
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	440b      	add	r3, r1
 8009bd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]
 8009bf0:	e00f      	b.n	8009c12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	33e0      	adds	r3, #224	; 0xe0
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d102      	bne.n	8009c0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	e007      	b.n	8009c1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	73fb      	strb	r3, [r7, #15]
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	2b0f      	cmp	r3, #15
 8009c16:	d9ec      	bls.n	8009bf2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	490e      	ldr	r1, [pc, #56]	; (8009c68 <MX_USB_HOST_Init+0x40>)
 8009c30:	480e      	ldr	r0, [pc, #56]	; (8009c6c <MX_USB_HOST_Init+0x44>)
 8009c32:	f7fe fba7 	bl	8008384 <USBH_Init>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009c3c:	f7f8 fb0a 	bl	8002254 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009c40:	490b      	ldr	r1, [pc, #44]	; (8009c70 <MX_USB_HOST_Init+0x48>)
 8009c42:	480a      	ldr	r0, [pc, #40]	; (8009c6c <MX_USB_HOST_Init+0x44>)
 8009c44:	f7fe fc2c 	bl	80084a0 <USBH_RegisterClass>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009c4e:	f7f8 fb01 	bl	8002254 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009c52:	4806      	ldr	r0, [pc, #24]	; (8009c6c <MX_USB_HOST_Init+0x44>)
 8009c54:	f7fe fcb0 	bl	80085b8 <USBH_Start>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009c5e:	f7f8 faf9 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009c62:	bf00      	nop
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	08009c89 	.word	0x08009c89
 8009c6c:	200003c0 	.word	0x200003c0
 8009c70:	2000000c 	.word	0x2000000c

08009c74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009c78:	4802      	ldr	r0, [pc, #8]	; (8009c84 <MX_USB_HOST_Process+0x10>)
 8009c7a:	f7fe fcad 	bl	80085d8 <USBH_Process>
}
 8009c7e:	bf00      	nop
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200003c0 	.word	0x200003c0

08009c88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d819      	bhi.n	8009cd0 <USBH_UserProcess+0x48>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <USBH_UserProcess+0x1c>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cd1 	.word	0x08009cd1
 8009ca8:	08009cc1 	.word	0x08009cc1
 8009cac:	08009cd1 	.word	0x08009cd1
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cb9 	.word	0x08009cb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009cb8:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <USBH_UserProcess+0x58>)
 8009cba:	2203      	movs	r2, #3
 8009cbc:	701a      	strb	r2, [r3, #0]
  break;
 8009cbe:	e008      	b.n	8009cd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009cc0:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <USBH_UserProcess+0x58>)
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	701a      	strb	r2, [r3, #0]
  break;
 8009cc6:	e004      	b.n	8009cd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009cc8:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <USBH_UserProcess+0x58>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	701a      	strb	r2, [r3, #0]
  break;
 8009cce:	e000      	b.n	8009cd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8009cd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20000798 	.word	0x20000798

08009ce4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08a      	sub	sp, #40	; 0x28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cec:	f107 0314 	add.w	r3, r7, #20
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	605a      	str	r2, [r3, #4]
 8009cf6:	609a      	str	r2, [r3, #8]
 8009cf8:	60da      	str	r2, [r3, #12]
 8009cfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d04:	d147      	bne.n	8009d96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d06:	2300      	movs	r3, #0
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0e:	4a24      	ldr	r2, [pc, #144]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d10:	f043 0301 	orr.w	r3, r3, #1
 8009d14:	6313      	str	r3, [r2, #48]	; 0x30
 8009d16:	4b22      	ldr	r3, [pc, #136]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	613b      	str	r3, [r7, #16]
 8009d20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009d30:	f107 0314 	add.w	r3, r7, #20
 8009d34:	4619      	mov	r1, r3
 8009d36:	481b      	ldr	r0, [pc, #108]	; (8009da4 <HAL_HCD_MspInit+0xc0>)
 8009d38:	f7f8 ff36 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009d3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d42:	2302      	movs	r3, #2
 8009d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d4e:	230a      	movs	r3, #10
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d52:	f107 0314 	add.w	r3, r7, #20
 8009d56:	4619      	mov	r1, r3
 8009d58:	4812      	ldr	r0, [pc, #72]	; (8009da4 <HAL_HCD_MspInit+0xc0>)
 8009d5a:	f7f8 ff25 	bl	8002ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d5e:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d62:	4a0f      	ldr	r2, [pc, #60]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d68:	6353      	str	r3, [r2, #52]	; 0x34
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]
 8009d6e:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d72:	4a0b      	ldr	r2, [pc, #44]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d78:	6453      	str	r3, [r2, #68]	; 0x44
 8009d7a:	4b09      	ldr	r3, [pc, #36]	; (8009da0 <HAL_HCD_MspInit+0xbc>)
 8009d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d86:	2200      	movs	r2, #0
 8009d88:	2100      	movs	r1, #0
 8009d8a:	2043      	movs	r0, #67	; 0x43
 8009d8c:	f7f8 fed5 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d90:	2043      	movs	r0, #67	; 0x43
 8009d92:	f7f8 feee 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d96:	bf00      	nop
 8009d98:	3728      	adds	r7, #40	; 0x28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	40023800 	.word	0x40023800
 8009da4:	40020000 	.word	0x40020000

08009da8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe ffed 	bl	8008d96 <USBH_LL_IncTimer>
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff f825 	bl	8008e22 <USBH_LL_Connect>
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff f82e 	bl	8008e50 <USBH_LL_Disconnect>
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	70fb      	strb	r3, [r7, #3]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fe ffdf 	bl	8008dea <USBH_LL_PortEnabled>
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe ffdf 	bl	8008e06 <USBH_LL_PortDisabled>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d12a      	bne.n	8009eb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009e62:	4a18      	ldr	r2, [pc, #96]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a15      	ldr	r2, [pc, #84]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e6e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e72:	4b14      	ldr	r3, [pc, #80]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009e7a:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009e80:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e82:	2201      	movs	r2, #1
 8009e84:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e8e:	2202      	movs	r2, #2
 8009e90:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e92:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009e98:	480a      	ldr	r0, [pc, #40]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009e9a:	f7f9 f83a 	bl	8002f12 <HAL_HCD_Init>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009ea4:	f7f8 f9d6 	bl	8002254 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009ea8:	4806      	ldr	r0, [pc, #24]	; (8009ec4 <USBH_LL_Init+0x74>)
 8009eaa:	f7f9 fc1e 	bl	80036ea <HAL_HCD_GetCurrentFrame>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fe ff60 	bl	8008d78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	2000079c 	.word	0x2000079c

08009ec8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f9 fb8d 	bl	80035fe <HAL_HCD_Start>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f95c 	bl	800a1a8 <USBH_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7f9 fb95 	bl	8003644 <HAL_HCD_Stop>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 f941 	bl	800a1a8 <USBH_Get_USB_Status>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7f9 fbdd 	bl	8003706 <HAL_HCD_GetCurrentSpeed>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d00c      	beq.n	8009f6c <USBH_LL_GetSpeed+0x38>
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d80d      	bhi.n	8009f72 <USBH_LL_GetSpeed+0x3e>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <USBH_LL_GetSpeed+0x2c>
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d003      	beq.n	8009f66 <USBH_LL_GetSpeed+0x32>
 8009f5e:	e008      	b.n	8009f72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]
    break;
 8009f64:	e008      	b.n	8009f78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009f66:	2301      	movs	r3, #1
 8009f68:	73fb      	strb	r3, [r7, #15]
    break;
 8009f6a:	e005      	b.n	8009f78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f70:	e002      	b.n	8009f78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009f72:	2301      	movs	r3, #1
 8009f74:	73fb      	strb	r3, [r7, #15]
    break;
 8009f76:	bf00      	nop
  }
  return  speed;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7f9 fb70 	bl	800367e <HAL_HCD_ResetPort>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f8ff 	bl	800a1a8 <USBH_Get_USB_Status>
 8009faa:	4603      	mov	r3, r0
 8009fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f9 fb77 	bl	80036c2 <HAL_HCD_HC_GetXferCount>
 8009fd4:	4603      	mov	r3, r0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009fde:	b590      	push	{r4, r7, lr}
 8009fe0:	b089      	sub	sp, #36	; 0x24
 8009fe2:	af04      	add	r7, sp, #16
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	4611      	mov	r1, r2
 8009fea:	461a      	mov	r2, r3
 8009fec:	4603      	mov	r3, r0
 8009fee:	70fb      	strb	r3, [r7, #3]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70bb      	strb	r3, [r7, #2]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a006:	787c      	ldrb	r4, [r7, #1]
 800a008:	78ba      	ldrb	r2, [r7, #2]
 800a00a:	78f9      	ldrb	r1, [r7, #3]
 800a00c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a00e:	9302      	str	r3, [sp, #8]
 800a010:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	4623      	mov	r3, r4
 800a01e:	f7f8 ffda 	bl	8002fd6 <HAL_HCD_HC_Init>
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a026:	7bfb      	ldrb	r3, [r7, #15]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 f8bd 	bl	800a1a8 <USBH_Get_USB_Status>
 800a02e:	4603      	mov	r3, r0
 800a030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a032:	7bbb      	ldrb	r3, [r7, #14]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd90      	pop	{r4, r7, pc}

0800a03c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a056:	78fa      	ldrb	r2, [r7, #3]
 800a058:	4611      	mov	r1, r2
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7f9 f84a 	bl	80030f4 <HAL_HCD_HC_Halt>
 800a060:	4603      	mov	r3, r0
 800a062:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 f89e 	bl	800a1a8 <USBH_Get_USB_Status>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a070:	7bbb      	ldrb	r3, [r7, #14]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a07a:	b590      	push	{r4, r7, lr}
 800a07c:	b089      	sub	sp, #36	; 0x24
 800a07e:	af04      	add	r7, sp, #16
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	4608      	mov	r0, r1
 800a084:	4611      	mov	r1, r2
 800a086:	461a      	mov	r2, r3
 800a088:	4603      	mov	r3, r0
 800a08a:	70fb      	strb	r3, [r7, #3]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70bb      	strb	r3, [r7, #2]
 800a090:	4613      	mov	r3, r2
 800a092:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a0a2:	787c      	ldrb	r4, [r7, #1]
 800a0a4:	78ba      	ldrb	r2, [r7, #2]
 800a0a6:	78f9      	ldrb	r1, [r7, #3]
 800a0a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a0ac:	9303      	str	r3, [sp, #12]
 800a0ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0b0:	9302      	str	r3, [sp, #8]
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	4623      	mov	r3, r4
 800a0be:	f7f9 f83d 	bl	800313c <HAL_HCD_HC_SubmitRequest>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 f86d 	bl	800a1a8 <USBH_Get_USB_Status>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd90      	pop	{r4, r7, pc}

0800a0dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0ee:	78fa      	ldrb	r2, [r7, #3]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7f9 fad1 	bl	800369a <HAL_HCD_HC_GetURBState>
 800a0f8:	4603      	mov	r3, r0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a114:	2b01      	cmp	r3, #1
 800a116:	d103      	bne.n	800a120 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f870 	bl	800a200 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a120:	20c8      	movs	r0, #200	; 0xc8
 800a122:	f7f8 fc0b 	bl	800293c <HAL_Delay>
  return USBH_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
 800a13c:	4613      	mov	r3, r2
 800a13e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a146:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	212c      	movs	r1, #44	; 0x2c
 800a14e:	fb01 f303 	mul.w	r3, r1, r3
 800a152:	4413      	add	r3, r2
 800a154:	333b      	adds	r3, #59	; 0x3b
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	212c      	movs	r1, #44	; 0x2c
 800a162:	fb01 f303 	mul.w	r3, r1, r3
 800a166:	4413      	add	r3, r2
 800a168:	3354      	adds	r3, #84	; 0x54
 800a16a:	78ba      	ldrb	r2, [r7, #2]
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	e008      	b.n	800a182 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	212c      	movs	r1, #44	; 0x2c
 800a176:	fb01 f303 	mul.w	r3, r1, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	3355      	adds	r3, #85	; 0x55
 800a17e:	78ba      	ldrb	r2, [r7, #2]
 800a180:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7f8 fbcf 	bl	800293c <HAL_Delay>
}
 800a19e:	bf00      	nop
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d817      	bhi.n	800a1ec <USBH_Get_USB_Status+0x44>
 800a1bc:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <USBH_Get_USB_Status+0x1c>)
 800a1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c2:	bf00      	nop
 800a1c4:	0800a1d5 	.word	0x0800a1d5
 800a1c8:	0800a1db 	.word	0x0800a1db
 800a1cc:	0800a1e1 	.word	0x0800a1e1
 800a1d0:	0800a1e7 	.word	0x0800a1e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d8:	e00b      	b.n	800a1f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a1da:	2302      	movs	r3, #2
 800a1dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a1de:	e008      	b.n	800a1f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e4:	e005      	b.n	800a1f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ea:	e002      	b.n	800a1f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f0:	bf00      	nop
  }
  return usb_status;
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a20e:	79fb      	ldrb	r3, [r7, #7]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d102      	bne.n	800a21a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a214:	2300      	movs	r3, #0
 800a216:	73fb      	strb	r3, [r7, #15]
 800a218:	e001      	b.n	800a21e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a21a:	2301      	movs	r3, #1
 800a21c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	461a      	mov	r2, r3
 800a222:	2101      	movs	r1, #1
 800a224:	4803      	ldr	r0, [pc, #12]	; (800a234 <MX_DriverVbusFS+0x34>)
 800a226:	f7f8 fe5b 	bl	8002ee0 <HAL_GPIO_WritePin>
}
 800a22a:	bf00      	nop
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	40020800 	.word	0x40020800

0800a238 <__errno>:
 800a238:	4b01      	ldr	r3, [pc, #4]	; (800a240 <__errno+0x8>)
 800a23a:	6818      	ldr	r0, [r3, #0]
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	2000002c 	.word	0x2000002c

0800a244 <__libc_init_array>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	4d0d      	ldr	r5, [pc, #52]	; (800a27c <__libc_init_array+0x38>)
 800a248:	4c0d      	ldr	r4, [pc, #52]	; (800a280 <__libc_init_array+0x3c>)
 800a24a:	1b64      	subs	r4, r4, r5
 800a24c:	10a4      	asrs	r4, r4, #2
 800a24e:	2600      	movs	r6, #0
 800a250:	42a6      	cmp	r6, r4
 800a252:	d109      	bne.n	800a268 <__libc_init_array+0x24>
 800a254:	4d0b      	ldr	r5, [pc, #44]	; (800a284 <__libc_init_array+0x40>)
 800a256:	4c0c      	ldr	r4, [pc, #48]	; (800a288 <__libc_init_array+0x44>)
 800a258:	f005 fd9c 	bl	800fd94 <_init>
 800a25c:	1b64      	subs	r4, r4, r5
 800a25e:	10a4      	asrs	r4, r4, #2
 800a260:	2600      	movs	r6, #0
 800a262:	42a6      	cmp	r6, r4
 800a264:	d105      	bne.n	800a272 <__libc_init_array+0x2e>
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	f855 3b04 	ldr.w	r3, [r5], #4
 800a26c:	4798      	blx	r3
 800a26e:	3601      	adds	r6, #1
 800a270:	e7ee      	b.n	800a250 <__libc_init_array+0xc>
 800a272:	f855 3b04 	ldr.w	r3, [r5], #4
 800a276:	4798      	blx	r3
 800a278:	3601      	adds	r6, #1
 800a27a:	e7f2      	b.n	800a262 <__libc_init_array+0x1e>
 800a27c:	08010360 	.word	0x08010360
 800a280:	08010360 	.word	0x08010360
 800a284:	08010360 	.word	0x08010360
 800a288:	08010364 	.word	0x08010364

0800a28c <malloc>:
 800a28c:	4b02      	ldr	r3, [pc, #8]	; (800a298 <malloc+0xc>)
 800a28e:	4601      	mov	r1, r0
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	f000 b87f 	b.w	800a394 <_malloc_r>
 800a296:	bf00      	nop
 800a298:	2000002c 	.word	0x2000002c

0800a29c <free>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <free+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f000 b80b 	b.w	800a2bc <_free_r>
 800a2a6:	bf00      	nop
 800a2a8:	2000002c 	.word	0x2000002c

0800a2ac <memset>:
 800a2ac:	4402      	add	r2, r0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d100      	bne.n	800a2b6 <memset+0xa>
 800a2b4:	4770      	bx	lr
 800a2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ba:	e7f9      	b.n	800a2b0 <memset+0x4>

0800a2bc <_free_r>:
 800a2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2be:	2900      	cmp	r1, #0
 800a2c0:	d044      	beq.n	800a34c <_free_r+0x90>
 800a2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2c6:	9001      	str	r0, [sp, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a2ce:	bfb8      	it	lt
 800a2d0:	18e4      	addlt	r4, r4, r3
 800a2d2:	f003 f94f 	bl	800d574 <__malloc_lock>
 800a2d6:	4a1e      	ldr	r2, [pc, #120]	; (800a350 <_free_r+0x94>)
 800a2d8:	9801      	ldr	r0, [sp, #4]
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	b933      	cbnz	r3, 800a2ec <_free_r+0x30>
 800a2de:	6063      	str	r3, [r4, #4]
 800a2e0:	6014      	str	r4, [r2, #0]
 800a2e2:	b003      	add	sp, #12
 800a2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2e8:	f003 b94a 	b.w	800d580 <__malloc_unlock>
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	d908      	bls.n	800a302 <_free_r+0x46>
 800a2f0:	6825      	ldr	r5, [r4, #0]
 800a2f2:	1961      	adds	r1, r4, r5
 800a2f4:	428b      	cmp	r3, r1
 800a2f6:	bf01      	itttt	eq
 800a2f8:	6819      	ldreq	r1, [r3, #0]
 800a2fa:	685b      	ldreq	r3, [r3, #4]
 800a2fc:	1949      	addeq	r1, r1, r5
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	e7ed      	b.n	800a2de <_free_r+0x22>
 800a302:	461a      	mov	r2, r3
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	b10b      	cbz	r3, 800a30c <_free_r+0x50>
 800a308:	42a3      	cmp	r3, r4
 800a30a:	d9fa      	bls.n	800a302 <_free_r+0x46>
 800a30c:	6811      	ldr	r1, [r2, #0]
 800a30e:	1855      	adds	r5, r2, r1
 800a310:	42a5      	cmp	r5, r4
 800a312:	d10b      	bne.n	800a32c <_free_r+0x70>
 800a314:	6824      	ldr	r4, [r4, #0]
 800a316:	4421      	add	r1, r4
 800a318:	1854      	adds	r4, r2, r1
 800a31a:	42a3      	cmp	r3, r4
 800a31c:	6011      	str	r1, [r2, #0]
 800a31e:	d1e0      	bne.n	800a2e2 <_free_r+0x26>
 800a320:	681c      	ldr	r4, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	6053      	str	r3, [r2, #4]
 800a326:	4421      	add	r1, r4
 800a328:	6011      	str	r1, [r2, #0]
 800a32a:	e7da      	b.n	800a2e2 <_free_r+0x26>
 800a32c:	d902      	bls.n	800a334 <_free_r+0x78>
 800a32e:	230c      	movs	r3, #12
 800a330:	6003      	str	r3, [r0, #0]
 800a332:	e7d6      	b.n	800a2e2 <_free_r+0x26>
 800a334:	6825      	ldr	r5, [r4, #0]
 800a336:	1961      	adds	r1, r4, r5
 800a338:	428b      	cmp	r3, r1
 800a33a:	bf04      	itt	eq
 800a33c:	6819      	ldreq	r1, [r3, #0]
 800a33e:	685b      	ldreq	r3, [r3, #4]
 800a340:	6063      	str	r3, [r4, #4]
 800a342:	bf04      	itt	eq
 800a344:	1949      	addeq	r1, r1, r5
 800a346:	6021      	streq	r1, [r4, #0]
 800a348:	6054      	str	r4, [r2, #4]
 800a34a:	e7ca      	b.n	800a2e2 <_free_r+0x26>
 800a34c:	b003      	add	sp, #12
 800a34e:	bd30      	pop	{r4, r5, pc}
 800a350:	20000aa0 	.word	0x20000aa0

0800a354 <sbrk_aligned>:
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	4e0e      	ldr	r6, [pc, #56]	; (800a390 <sbrk_aligned+0x3c>)
 800a358:	460c      	mov	r4, r1
 800a35a:	6831      	ldr	r1, [r6, #0]
 800a35c:	4605      	mov	r5, r0
 800a35e:	b911      	cbnz	r1, 800a366 <sbrk_aligned+0x12>
 800a360:	f000 ff1e 	bl	800b1a0 <_sbrk_r>
 800a364:	6030      	str	r0, [r6, #0]
 800a366:	4621      	mov	r1, r4
 800a368:	4628      	mov	r0, r5
 800a36a:	f000 ff19 	bl	800b1a0 <_sbrk_r>
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	d00a      	beq.n	800a388 <sbrk_aligned+0x34>
 800a372:	1cc4      	adds	r4, r0, #3
 800a374:	f024 0403 	bic.w	r4, r4, #3
 800a378:	42a0      	cmp	r0, r4
 800a37a:	d007      	beq.n	800a38c <sbrk_aligned+0x38>
 800a37c:	1a21      	subs	r1, r4, r0
 800a37e:	4628      	mov	r0, r5
 800a380:	f000 ff0e 	bl	800b1a0 <_sbrk_r>
 800a384:	3001      	adds	r0, #1
 800a386:	d101      	bne.n	800a38c <sbrk_aligned+0x38>
 800a388:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a38c:	4620      	mov	r0, r4
 800a38e:	bd70      	pop	{r4, r5, r6, pc}
 800a390:	20000aa4 	.word	0x20000aa4

0800a394 <_malloc_r>:
 800a394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a398:	1ccd      	adds	r5, r1, #3
 800a39a:	f025 0503 	bic.w	r5, r5, #3
 800a39e:	3508      	adds	r5, #8
 800a3a0:	2d0c      	cmp	r5, #12
 800a3a2:	bf38      	it	cc
 800a3a4:	250c      	movcc	r5, #12
 800a3a6:	2d00      	cmp	r5, #0
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	db01      	blt.n	800a3b0 <_malloc_r+0x1c>
 800a3ac:	42a9      	cmp	r1, r5
 800a3ae:	d905      	bls.n	800a3bc <_malloc_r+0x28>
 800a3b0:	230c      	movs	r3, #12
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	2600      	movs	r6, #0
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3bc:	4e2e      	ldr	r6, [pc, #184]	; (800a478 <_malloc_r+0xe4>)
 800a3be:	f003 f8d9 	bl	800d574 <__malloc_lock>
 800a3c2:	6833      	ldr	r3, [r6, #0]
 800a3c4:	461c      	mov	r4, r3
 800a3c6:	bb34      	cbnz	r4, 800a416 <_malloc_r+0x82>
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	f7ff ffc2 	bl	800a354 <sbrk_aligned>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	d14d      	bne.n	800a472 <_malloc_r+0xde>
 800a3d6:	6834      	ldr	r4, [r6, #0]
 800a3d8:	4626      	mov	r6, r4
 800a3da:	2e00      	cmp	r6, #0
 800a3dc:	d140      	bne.n	800a460 <_malloc_r+0xcc>
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	eb04 0803 	add.w	r8, r4, r3
 800a3e8:	f000 feda 	bl	800b1a0 <_sbrk_r>
 800a3ec:	4580      	cmp	r8, r0
 800a3ee:	d13a      	bne.n	800a466 <_malloc_r+0xd2>
 800a3f0:	6821      	ldr	r1, [r4, #0]
 800a3f2:	3503      	adds	r5, #3
 800a3f4:	1a6d      	subs	r5, r5, r1
 800a3f6:	f025 0503 	bic.w	r5, r5, #3
 800a3fa:	3508      	adds	r5, #8
 800a3fc:	2d0c      	cmp	r5, #12
 800a3fe:	bf38      	it	cc
 800a400:	250c      	movcc	r5, #12
 800a402:	4629      	mov	r1, r5
 800a404:	4638      	mov	r0, r7
 800a406:	f7ff ffa5 	bl	800a354 <sbrk_aligned>
 800a40a:	3001      	adds	r0, #1
 800a40c:	d02b      	beq.n	800a466 <_malloc_r+0xd2>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	442b      	add	r3, r5
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	e00e      	b.n	800a434 <_malloc_r+0xa0>
 800a416:	6822      	ldr	r2, [r4, #0]
 800a418:	1b52      	subs	r2, r2, r5
 800a41a:	d41e      	bmi.n	800a45a <_malloc_r+0xc6>
 800a41c:	2a0b      	cmp	r2, #11
 800a41e:	d916      	bls.n	800a44e <_malloc_r+0xba>
 800a420:	1961      	adds	r1, r4, r5
 800a422:	42a3      	cmp	r3, r4
 800a424:	6025      	str	r5, [r4, #0]
 800a426:	bf18      	it	ne
 800a428:	6059      	strne	r1, [r3, #4]
 800a42a:	6863      	ldr	r3, [r4, #4]
 800a42c:	bf08      	it	eq
 800a42e:	6031      	streq	r1, [r6, #0]
 800a430:	5162      	str	r2, [r4, r5]
 800a432:	604b      	str	r3, [r1, #4]
 800a434:	4638      	mov	r0, r7
 800a436:	f104 060b 	add.w	r6, r4, #11
 800a43a:	f003 f8a1 	bl	800d580 <__malloc_unlock>
 800a43e:	f026 0607 	bic.w	r6, r6, #7
 800a442:	1d23      	adds	r3, r4, #4
 800a444:	1af2      	subs	r2, r6, r3
 800a446:	d0b6      	beq.n	800a3b6 <_malloc_r+0x22>
 800a448:	1b9b      	subs	r3, r3, r6
 800a44a:	50a3      	str	r3, [r4, r2]
 800a44c:	e7b3      	b.n	800a3b6 <_malloc_r+0x22>
 800a44e:	6862      	ldr	r2, [r4, #4]
 800a450:	42a3      	cmp	r3, r4
 800a452:	bf0c      	ite	eq
 800a454:	6032      	streq	r2, [r6, #0]
 800a456:	605a      	strne	r2, [r3, #4]
 800a458:	e7ec      	b.n	800a434 <_malloc_r+0xa0>
 800a45a:	4623      	mov	r3, r4
 800a45c:	6864      	ldr	r4, [r4, #4]
 800a45e:	e7b2      	b.n	800a3c6 <_malloc_r+0x32>
 800a460:	4634      	mov	r4, r6
 800a462:	6876      	ldr	r6, [r6, #4]
 800a464:	e7b9      	b.n	800a3da <_malloc_r+0x46>
 800a466:	230c      	movs	r3, #12
 800a468:	603b      	str	r3, [r7, #0]
 800a46a:	4638      	mov	r0, r7
 800a46c:	f003 f888 	bl	800d580 <__malloc_unlock>
 800a470:	e7a1      	b.n	800a3b6 <_malloc_r+0x22>
 800a472:	6025      	str	r5, [r4, #0]
 800a474:	e7de      	b.n	800a434 <_malloc_r+0xa0>
 800a476:	bf00      	nop
 800a478:	20000aa0 	.word	0x20000aa0

0800a47c <__cvt>:
 800a47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	ec55 4b10 	vmov	r4, r5, d0
 800a484:	2d00      	cmp	r5, #0
 800a486:	460e      	mov	r6, r1
 800a488:	4619      	mov	r1, r3
 800a48a:	462b      	mov	r3, r5
 800a48c:	bfbb      	ittet	lt
 800a48e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a492:	461d      	movlt	r5, r3
 800a494:	2300      	movge	r3, #0
 800a496:	232d      	movlt	r3, #45	; 0x2d
 800a498:	700b      	strb	r3, [r1, #0]
 800a49a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a49c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a4a0:	4691      	mov	r9, r2
 800a4a2:	f023 0820 	bic.w	r8, r3, #32
 800a4a6:	bfbc      	itt	lt
 800a4a8:	4622      	movlt	r2, r4
 800a4aa:	4614      	movlt	r4, r2
 800a4ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4b0:	d005      	beq.n	800a4be <__cvt+0x42>
 800a4b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4b6:	d100      	bne.n	800a4ba <__cvt+0x3e>
 800a4b8:	3601      	adds	r6, #1
 800a4ba:	2102      	movs	r1, #2
 800a4bc:	e000      	b.n	800a4c0 <__cvt+0x44>
 800a4be:	2103      	movs	r1, #3
 800a4c0:	ab03      	add	r3, sp, #12
 800a4c2:	9301      	str	r3, [sp, #4]
 800a4c4:	ab02      	add	r3, sp, #8
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	ec45 4b10 	vmov	d0, r4, r5
 800a4cc:	4653      	mov	r3, sl
 800a4ce:	4632      	mov	r2, r6
 800a4d0:	f001 fdd6 	bl	800c080 <_dtoa_r>
 800a4d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4d8:	4607      	mov	r7, r0
 800a4da:	d102      	bne.n	800a4e2 <__cvt+0x66>
 800a4dc:	f019 0f01 	tst.w	r9, #1
 800a4e0:	d022      	beq.n	800a528 <__cvt+0xac>
 800a4e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4e6:	eb07 0906 	add.w	r9, r7, r6
 800a4ea:	d110      	bne.n	800a50e <__cvt+0x92>
 800a4ec:	783b      	ldrb	r3, [r7, #0]
 800a4ee:	2b30      	cmp	r3, #48	; 0x30
 800a4f0:	d10a      	bne.n	800a508 <__cvt+0x8c>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	f7f6 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4fe:	b918      	cbnz	r0, 800a508 <__cvt+0x8c>
 800a500:	f1c6 0601 	rsb	r6, r6, #1
 800a504:	f8ca 6000 	str.w	r6, [sl]
 800a508:	f8da 3000 	ldr.w	r3, [sl]
 800a50c:	4499      	add	r9, r3
 800a50e:	2200      	movs	r2, #0
 800a510:	2300      	movs	r3, #0
 800a512:	4620      	mov	r0, r4
 800a514:	4629      	mov	r1, r5
 800a516:	f7f6 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a51a:	b108      	cbz	r0, 800a520 <__cvt+0xa4>
 800a51c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a520:	2230      	movs	r2, #48	; 0x30
 800a522:	9b03      	ldr	r3, [sp, #12]
 800a524:	454b      	cmp	r3, r9
 800a526:	d307      	bcc.n	800a538 <__cvt+0xbc>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a52c:	1bdb      	subs	r3, r3, r7
 800a52e:	4638      	mov	r0, r7
 800a530:	6013      	str	r3, [r2, #0]
 800a532:	b004      	add	sp, #16
 800a534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a538:	1c59      	adds	r1, r3, #1
 800a53a:	9103      	str	r1, [sp, #12]
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	e7f0      	b.n	800a522 <__cvt+0xa6>

0800a540 <__exponent>:
 800a540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a542:	4603      	mov	r3, r0
 800a544:	2900      	cmp	r1, #0
 800a546:	bfb8      	it	lt
 800a548:	4249      	neglt	r1, r1
 800a54a:	f803 2b02 	strb.w	r2, [r3], #2
 800a54e:	bfb4      	ite	lt
 800a550:	222d      	movlt	r2, #45	; 0x2d
 800a552:	222b      	movge	r2, #43	; 0x2b
 800a554:	2909      	cmp	r1, #9
 800a556:	7042      	strb	r2, [r0, #1]
 800a558:	dd2a      	ble.n	800a5b0 <__exponent+0x70>
 800a55a:	f10d 0407 	add.w	r4, sp, #7
 800a55e:	46a4      	mov	ip, r4
 800a560:	270a      	movs	r7, #10
 800a562:	46a6      	mov	lr, r4
 800a564:	460a      	mov	r2, r1
 800a566:	fb91 f6f7 	sdiv	r6, r1, r7
 800a56a:	fb07 1516 	mls	r5, r7, r6, r1
 800a56e:	3530      	adds	r5, #48	; 0x30
 800a570:	2a63      	cmp	r2, #99	; 0x63
 800a572:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a576:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a57a:	4631      	mov	r1, r6
 800a57c:	dcf1      	bgt.n	800a562 <__exponent+0x22>
 800a57e:	3130      	adds	r1, #48	; 0x30
 800a580:	f1ae 0502 	sub.w	r5, lr, #2
 800a584:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a588:	1c44      	adds	r4, r0, #1
 800a58a:	4629      	mov	r1, r5
 800a58c:	4561      	cmp	r1, ip
 800a58e:	d30a      	bcc.n	800a5a6 <__exponent+0x66>
 800a590:	f10d 0209 	add.w	r2, sp, #9
 800a594:	eba2 020e 	sub.w	r2, r2, lr
 800a598:	4565      	cmp	r5, ip
 800a59a:	bf88      	it	hi
 800a59c:	2200      	movhi	r2, #0
 800a59e:	4413      	add	r3, r2
 800a5a0:	1a18      	subs	r0, r3, r0
 800a5a2:	b003      	add	sp, #12
 800a5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5ae:	e7ed      	b.n	800a58c <__exponent+0x4c>
 800a5b0:	2330      	movs	r3, #48	; 0x30
 800a5b2:	3130      	adds	r1, #48	; 0x30
 800a5b4:	7083      	strb	r3, [r0, #2]
 800a5b6:	70c1      	strb	r1, [r0, #3]
 800a5b8:	1d03      	adds	r3, r0, #4
 800a5ba:	e7f1      	b.n	800a5a0 <__exponent+0x60>

0800a5bc <_printf_float>:
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	ed2d 8b02 	vpush	{d8}
 800a5c4:	b08d      	sub	sp, #52	; 0x34
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5cc:	4616      	mov	r6, r2
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	f002 ffa7 	bl	800d524 <_localeconv_r>
 800a5d6:	f8d0 a000 	ldr.w	sl, [r0]
 800a5da:	4650      	mov	r0, sl
 800a5dc:	f7f5 fdf8 	bl	80001d0 <strlen>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a5f0:	3307      	adds	r3, #7
 800a5f2:	f023 0307 	bic.w	r3, r3, #7
 800a5f6:	f103 0208 	add.w	r2, r3, #8
 800a5fa:	f8c8 2000 	str.w	r2, [r8]
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a606:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a60a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a60e:	9307      	str	r3, [sp, #28]
 800a610:	f8cd 8018 	str.w	r8, [sp, #24]
 800a614:	ee08 0a10 	vmov	s16, r0
 800a618:	4b9f      	ldr	r3, [pc, #636]	; (800a898 <_printf_float+0x2dc>)
 800a61a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a622:	f7f6 fa83 	bl	8000b2c <__aeabi_dcmpun>
 800a626:	bb88      	cbnz	r0, 800a68c <_printf_float+0xd0>
 800a628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a62c:	4b9a      	ldr	r3, [pc, #616]	; (800a898 <_printf_float+0x2dc>)
 800a62e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a632:	f7f6 fa5d 	bl	8000af0 <__aeabi_dcmple>
 800a636:	bb48      	cbnz	r0, 800a68c <_printf_float+0xd0>
 800a638:	2200      	movs	r2, #0
 800a63a:	2300      	movs	r3, #0
 800a63c:	4640      	mov	r0, r8
 800a63e:	4649      	mov	r1, r9
 800a640:	f7f6 fa4c 	bl	8000adc <__aeabi_dcmplt>
 800a644:	b110      	cbz	r0, 800a64c <_printf_float+0x90>
 800a646:	232d      	movs	r3, #45	; 0x2d
 800a648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a64c:	4b93      	ldr	r3, [pc, #588]	; (800a89c <_printf_float+0x2e0>)
 800a64e:	4894      	ldr	r0, [pc, #592]	; (800a8a0 <_printf_float+0x2e4>)
 800a650:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a654:	bf94      	ite	ls
 800a656:	4698      	movls	r8, r3
 800a658:	4680      	movhi	r8, r0
 800a65a:	2303      	movs	r3, #3
 800a65c:	6123      	str	r3, [r4, #16]
 800a65e:	9b05      	ldr	r3, [sp, #20]
 800a660:	f023 0204 	bic.w	r2, r3, #4
 800a664:	6022      	str	r2, [r4, #0]
 800a666:	f04f 0900 	mov.w	r9, #0
 800a66a:	9700      	str	r7, [sp, #0]
 800a66c:	4633      	mov	r3, r6
 800a66e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a670:	4621      	mov	r1, r4
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f9d8 	bl	800aa28 <_printf_common>
 800a678:	3001      	adds	r0, #1
 800a67a:	f040 8090 	bne.w	800a79e <_printf_float+0x1e2>
 800a67e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a682:	b00d      	add	sp, #52	; 0x34
 800a684:	ecbd 8b02 	vpop	{d8}
 800a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68c:	4642      	mov	r2, r8
 800a68e:	464b      	mov	r3, r9
 800a690:	4640      	mov	r0, r8
 800a692:	4649      	mov	r1, r9
 800a694:	f7f6 fa4a 	bl	8000b2c <__aeabi_dcmpun>
 800a698:	b140      	cbz	r0, 800a6ac <_printf_float+0xf0>
 800a69a:	464b      	mov	r3, r9
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bfbc      	itt	lt
 800a6a0:	232d      	movlt	r3, #45	; 0x2d
 800a6a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6a6:	487f      	ldr	r0, [pc, #508]	; (800a8a4 <_printf_float+0x2e8>)
 800a6a8:	4b7f      	ldr	r3, [pc, #508]	; (800a8a8 <_printf_float+0x2ec>)
 800a6aa:	e7d1      	b.n	800a650 <_printf_float+0x94>
 800a6ac:	6863      	ldr	r3, [r4, #4]
 800a6ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6b2:	9206      	str	r2, [sp, #24]
 800a6b4:	1c5a      	adds	r2, r3, #1
 800a6b6:	d13f      	bne.n	800a738 <_printf_float+0x17c>
 800a6b8:	2306      	movs	r3, #6
 800a6ba:	6063      	str	r3, [r4, #4]
 800a6bc:	9b05      	ldr	r3, [sp, #20]
 800a6be:	6861      	ldr	r1, [r4, #4]
 800a6c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9303      	str	r3, [sp, #12]
 800a6c8:	ab0a      	add	r3, sp, #40	; 0x28
 800a6ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6ce:	ab09      	add	r3, sp, #36	; 0x24
 800a6d0:	ec49 8b10 	vmov	d0, r8, r9
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	6022      	str	r2, [r4, #0]
 800a6d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f7ff fecd 	bl	800a47c <__cvt>
 800a6e2:	9b06      	ldr	r3, [sp, #24]
 800a6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6e6:	2b47      	cmp	r3, #71	; 0x47
 800a6e8:	4680      	mov	r8, r0
 800a6ea:	d108      	bne.n	800a6fe <_printf_float+0x142>
 800a6ec:	1cc8      	adds	r0, r1, #3
 800a6ee:	db02      	blt.n	800a6f6 <_printf_float+0x13a>
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	4299      	cmp	r1, r3
 800a6f4:	dd41      	ble.n	800a77a <_printf_float+0x1be>
 800a6f6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a6fa:	fa5f fb8b 	uxtb.w	fp, fp
 800a6fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a702:	d820      	bhi.n	800a746 <_printf_float+0x18a>
 800a704:	3901      	subs	r1, #1
 800a706:	465a      	mov	r2, fp
 800a708:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a70c:	9109      	str	r1, [sp, #36]	; 0x24
 800a70e:	f7ff ff17 	bl	800a540 <__exponent>
 800a712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a714:	1813      	adds	r3, r2, r0
 800a716:	2a01      	cmp	r2, #1
 800a718:	4681      	mov	r9, r0
 800a71a:	6123      	str	r3, [r4, #16]
 800a71c:	dc02      	bgt.n	800a724 <_printf_float+0x168>
 800a71e:	6822      	ldr	r2, [r4, #0]
 800a720:	07d2      	lsls	r2, r2, #31
 800a722:	d501      	bpl.n	800a728 <_printf_float+0x16c>
 800a724:	3301      	adds	r3, #1
 800a726:	6123      	str	r3, [r4, #16]
 800a728:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d09c      	beq.n	800a66a <_printf_float+0xae>
 800a730:	232d      	movs	r3, #45	; 0x2d
 800a732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a736:	e798      	b.n	800a66a <_printf_float+0xae>
 800a738:	9a06      	ldr	r2, [sp, #24]
 800a73a:	2a47      	cmp	r2, #71	; 0x47
 800a73c:	d1be      	bne.n	800a6bc <_printf_float+0x100>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1bc      	bne.n	800a6bc <_printf_float+0x100>
 800a742:	2301      	movs	r3, #1
 800a744:	e7b9      	b.n	800a6ba <_printf_float+0xfe>
 800a746:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a74a:	d118      	bne.n	800a77e <_printf_float+0x1c2>
 800a74c:	2900      	cmp	r1, #0
 800a74e:	6863      	ldr	r3, [r4, #4]
 800a750:	dd0b      	ble.n	800a76a <_printf_float+0x1ae>
 800a752:	6121      	str	r1, [r4, #16]
 800a754:	b913      	cbnz	r3, 800a75c <_printf_float+0x1a0>
 800a756:	6822      	ldr	r2, [r4, #0]
 800a758:	07d0      	lsls	r0, r2, #31
 800a75a:	d502      	bpl.n	800a762 <_printf_float+0x1a6>
 800a75c:	3301      	adds	r3, #1
 800a75e:	440b      	add	r3, r1
 800a760:	6123      	str	r3, [r4, #16]
 800a762:	65a1      	str	r1, [r4, #88]	; 0x58
 800a764:	f04f 0900 	mov.w	r9, #0
 800a768:	e7de      	b.n	800a728 <_printf_float+0x16c>
 800a76a:	b913      	cbnz	r3, 800a772 <_printf_float+0x1b6>
 800a76c:	6822      	ldr	r2, [r4, #0]
 800a76e:	07d2      	lsls	r2, r2, #31
 800a770:	d501      	bpl.n	800a776 <_printf_float+0x1ba>
 800a772:	3302      	adds	r3, #2
 800a774:	e7f4      	b.n	800a760 <_printf_float+0x1a4>
 800a776:	2301      	movs	r3, #1
 800a778:	e7f2      	b.n	800a760 <_printf_float+0x1a4>
 800a77a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a780:	4299      	cmp	r1, r3
 800a782:	db05      	blt.n	800a790 <_printf_float+0x1d4>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	6121      	str	r1, [r4, #16]
 800a788:	07d8      	lsls	r0, r3, #31
 800a78a:	d5ea      	bpl.n	800a762 <_printf_float+0x1a6>
 800a78c:	1c4b      	adds	r3, r1, #1
 800a78e:	e7e7      	b.n	800a760 <_printf_float+0x1a4>
 800a790:	2900      	cmp	r1, #0
 800a792:	bfd4      	ite	le
 800a794:	f1c1 0202 	rsble	r2, r1, #2
 800a798:	2201      	movgt	r2, #1
 800a79a:	4413      	add	r3, r2
 800a79c:	e7e0      	b.n	800a760 <_printf_float+0x1a4>
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	055a      	lsls	r2, r3, #21
 800a7a2:	d407      	bmi.n	800a7b4 <_printf_float+0x1f8>
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	4642      	mov	r2, r8
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	47b8      	blx	r7
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d12c      	bne.n	800a80c <_printf_float+0x250>
 800a7b2:	e764      	b.n	800a67e <_printf_float+0xc2>
 800a7b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7b8:	f240 80e0 	bls.w	800a97c <_printf_float+0x3c0>
 800a7bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f7f6 f980 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d034      	beq.n	800a836 <_printf_float+0x27a>
 800a7cc:	4a37      	ldr	r2, [pc, #220]	; (800a8ac <_printf_float+0x2f0>)
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	47b8      	blx	r7
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	f43f af51 	beq.w	800a67e <_printf_float+0xc2>
 800a7dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	db02      	blt.n	800a7ea <_printf_float+0x22e>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	07d8      	lsls	r0, r3, #31
 800a7e8:	d510      	bpl.n	800a80c <_printf_float+0x250>
 800a7ea:	ee18 3a10 	vmov	r3, s16
 800a7ee:	4652      	mov	r2, sl
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	47b8      	blx	r7
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	f43f af41 	beq.w	800a67e <_printf_float+0xc2>
 800a7fc:	f04f 0800 	mov.w	r8, #0
 800a800:	f104 091a 	add.w	r9, r4, #26
 800a804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a806:	3b01      	subs	r3, #1
 800a808:	4543      	cmp	r3, r8
 800a80a:	dc09      	bgt.n	800a820 <_printf_float+0x264>
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	079b      	lsls	r3, r3, #30
 800a810:	f100 8105 	bmi.w	800aa1e <_printf_float+0x462>
 800a814:	68e0      	ldr	r0, [r4, #12]
 800a816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a818:	4298      	cmp	r0, r3
 800a81a:	bfb8      	it	lt
 800a81c:	4618      	movlt	r0, r3
 800a81e:	e730      	b.n	800a682 <_printf_float+0xc6>
 800a820:	2301      	movs	r3, #1
 800a822:	464a      	mov	r2, r9
 800a824:	4631      	mov	r1, r6
 800a826:	4628      	mov	r0, r5
 800a828:	47b8      	blx	r7
 800a82a:	3001      	adds	r0, #1
 800a82c:	f43f af27 	beq.w	800a67e <_printf_float+0xc2>
 800a830:	f108 0801 	add.w	r8, r8, #1
 800a834:	e7e6      	b.n	800a804 <_printf_float+0x248>
 800a836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a838:	2b00      	cmp	r3, #0
 800a83a:	dc39      	bgt.n	800a8b0 <_printf_float+0x2f4>
 800a83c:	4a1b      	ldr	r2, [pc, #108]	; (800a8ac <_printf_float+0x2f0>)
 800a83e:	2301      	movs	r3, #1
 800a840:	4631      	mov	r1, r6
 800a842:	4628      	mov	r0, r5
 800a844:	47b8      	blx	r7
 800a846:	3001      	adds	r0, #1
 800a848:	f43f af19 	beq.w	800a67e <_printf_float+0xc2>
 800a84c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a850:	4313      	orrs	r3, r2
 800a852:	d102      	bne.n	800a85a <_printf_float+0x29e>
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	07d9      	lsls	r1, r3, #31
 800a858:	d5d8      	bpl.n	800a80c <_printf_float+0x250>
 800a85a:	ee18 3a10 	vmov	r3, s16
 800a85e:	4652      	mov	r2, sl
 800a860:	4631      	mov	r1, r6
 800a862:	4628      	mov	r0, r5
 800a864:	47b8      	blx	r7
 800a866:	3001      	adds	r0, #1
 800a868:	f43f af09 	beq.w	800a67e <_printf_float+0xc2>
 800a86c:	f04f 0900 	mov.w	r9, #0
 800a870:	f104 0a1a 	add.w	sl, r4, #26
 800a874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a876:	425b      	negs	r3, r3
 800a878:	454b      	cmp	r3, r9
 800a87a:	dc01      	bgt.n	800a880 <_printf_float+0x2c4>
 800a87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a87e:	e792      	b.n	800a7a6 <_printf_float+0x1ea>
 800a880:	2301      	movs	r3, #1
 800a882:	4652      	mov	r2, sl
 800a884:	4631      	mov	r1, r6
 800a886:	4628      	mov	r0, r5
 800a888:	47b8      	blx	r7
 800a88a:	3001      	adds	r0, #1
 800a88c:	f43f aef7 	beq.w	800a67e <_printf_float+0xc2>
 800a890:	f109 0901 	add.w	r9, r9, #1
 800a894:	e7ee      	b.n	800a874 <_printf_float+0x2b8>
 800a896:	bf00      	nop
 800a898:	7fefffff 	.word	0x7fefffff
 800a89c:	0800fe3c 	.word	0x0800fe3c
 800a8a0:	0800fe40 	.word	0x0800fe40
 800a8a4:	0800fe48 	.word	0x0800fe48
 800a8a8:	0800fe44 	.word	0x0800fe44
 800a8ac:	0800fe4c 	.word	0x0800fe4c
 800a8b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	bfa8      	it	ge
 800a8b8:	461a      	movge	r2, r3
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	4691      	mov	r9, r2
 800a8be:	dc37      	bgt.n	800a930 <_printf_float+0x374>
 800a8c0:	f04f 0b00 	mov.w	fp, #0
 800a8c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8c8:	f104 021a 	add.w	r2, r4, #26
 800a8cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8ce:	9305      	str	r3, [sp, #20]
 800a8d0:	eba3 0309 	sub.w	r3, r3, r9
 800a8d4:	455b      	cmp	r3, fp
 800a8d6:	dc33      	bgt.n	800a940 <_printf_float+0x384>
 800a8d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	db3b      	blt.n	800a958 <_printf_float+0x39c>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	07da      	lsls	r2, r3, #31
 800a8e4:	d438      	bmi.n	800a958 <_printf_float+0x39c>
 800a8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e8:	9a05      	ldr	r2, [sp, #20]
 800a8ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ec:	1a9a      	subs	r2, r3, r2
 800a8ee:	eba3 0901 	sub.w	r9, r3, r1
 800a8f2:	4591      	cmp	r9, r2
 800a8f4:	bfa8      	it	ge
 800a8f6:	4691      	movge	r9, r2
 800a8f8:	f1b9 0f00 	cmp.w	r9, #0
 800a8fc:	dc35      	bgt.n	800a96a <_printf_float+0x3ae>
 800a8fe:	f04f 0800 	mov.w	r8, #0
 800a902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a906:	f104 0a1a 	add.w	sl, r4, #26
 800a90a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a90e:	1a9b      	subs	r3, r3, r2
 800a910:	eba3 0309 	sub.w	r3, r3, r9
 800a914:	4543      	cmp	r3, r8
 800a916:	f77f af79 	ble.w	800a80c <_printf_float+0x250>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4652      	mov	r2, sl
 800a91e:	4631      	mov	r1, r6
 800a920:	4628      	mov	r0, r5
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	f43f aeaa 	beq.w	800a67e <_printf_float+0xc2>
 800a92a:	f108 0801 	add.w	r8, r8, #1
 800a92e:	e7ec      	b.n	800a90a <_printf_float+0x34e>
 800a930:	4613      	mov	r3, r2
 800a932:	4631      	mov	r1, r6
 800a934:	4642      	mov	r2, r8
 800a936:	4628      	mov	r0, r5
 800a938:	47b8      	blx	r7
 800a93a:	3001      	adds	r0, #1
 800a93c:	d1c0      	bne.n	800a8c0 <_printf_float+0x304>
 800a93e:	e69e      	b.n	800a67e <_printf_float+0xc2>
 800a940:	2301      	movs	r3, #1
 800a942:	4631      	mov	r1, r6
 800a944:	4628      	mov	r0, r5
 800a946:	9205      	str	r2, [sp, #20]
 800a948:	47b8      	blx	r7
 800a94a:	3001      	adds	r0, #1
 800a94c:	f43f ae97 	beq.w	800a67e <_printf_float+0xc2>
 800a950:	9a05      	ldr	r2, [sp, #20]
 800a952:	f10b 0b01 	add.w	fp, fp, #1
 800a956:	e7b9      	b.n	800a8cc <_printf_float+0x310>
 800a958:	ee18 3a10 	vmov	r3, s16
 800a95c:	4652      	mov	r2, sl
 800a95e:	4631      	mov	r1, r6
 800a960:	4628      	mov	r0, r5
 800a962:	47b8      	blx	r7
 800a964:	3001      	adds	r0, #1
 800a966:	d1be      	bne.n	800a8e6 <_printf_float+0x32a>
 800a968:	e689      	b.n	800a67e <_printf_float+0xc2>
 800a96a:	9a05      	ldr	r2, [sp, #20]
 800a96c:	464b      	mov	r3, r9
 800a96e:	4442      	add	r2, r8
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	d1c1      	bne.n	800a8fe <_printf_float+0x342>
 800a97a:	e680      	b.n	800a67e <_printf_float+0xc2>
 800a97c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a97e:	2a01      	cmp	r2, #1
 800a980:	dc01      	bgt.n	800a986 <_printf_float+0x3ca>
 800a982:	07db      	lsls	r3, r3, #31
 800a984:	d538      	bpl.n	800a9f8 <_printf_float+0x43c>
 800a986:	2301      	movs	r3, #1
 800a988:	4642      	mov	r2, r8
 800a98a:	4631      	mov	r1, r6
 800a98c:	4628      	mov	r0, r5
 800a98e:	47b8      	blx	r7
 800a990:	3001      	adds	r0, #1
 800a992:	f43f ae74 	beq.w	800a67e <_printf_float+0xc2>
 800a996:	ee18 3a10 	vmov	r3, s16
 800a99a:	4652      	mov	r2, sl
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f ae6b 	beq.w	800a67e <_printf_float+0xc2>
 800a9a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f7f6 f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9b4:	b9d8      	cbnz	r0, 800a9ee <_printf_float+0x432>
 800a9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b8:	f108 0201 	add.w	r2, r8, #1
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b8      	blx	r7
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	d10e      	bne.n	800a9e6 <_printf_float+0x42a>
 800a9c8:	e659      	b.n	800a67e <_printf_float+0xc2>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	4652      	mov	r2, sl
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	47b8      	blx	r7
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	f43f ae52 	beq.w	800a67e <_printf_float+0xc2>
 800a9da:	f108 0801 	add.w	r8, r8, #1
 800a9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	4543      	cmp	r3, r8
 800a9e4:	dcf1      	bgt.n	800a9ca <_printf_float+0x40e>
 800a9e6:	464b      	mov	r3, r9
 800a9e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9ec:	e6dc      	b.n	800a7a8 <_printf_float+0x1ec>
 800a9ee:	f04f 0800 	mov.w	r8, #0
 800a9f2:	f104 0a1a 	add.w	sl, r4, #26
 800a9f6:	e7f2      	b.n	800a9de <_printf_float+0x422>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4642      	mov	r2, r8
 800a9fc:	e7df      	b.n	800a9be <_printf_float+0x402>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	464a      	mov	r2, r9
 800aa02:	4631      	mov	r1, r6
 800aa04:	4628      	mov	r0, r5
 800aa06:	47b8      	blx	r7
 800aa08:	3001      	adds	r0, #1
 800aa0a:	f43f ae38 	beq.w	800a67e <_printf_float+0xc2>
 800aa0e:	f108 0801 	add.w	r8, r8, #1
 800aa12:	68e3      	ldr	r3, [r4, #12]
 800aa14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa16:	1a5b      	subs	r3, r3, r1
 800aa18:	4543      	cmp	r3, r8
 800aa1a:	dcf0      	bgt.n	800a9fe <_printf_float+0x442>
 800aa1c:	e6fa      	b.n	800a814 <_printf_float+0x258>
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	f104 0919 	add.w	r9, r4, #25
 800aa26:	e7f4      	b.n	800aa12 <_printf_float+0x456>

0800aa28 <_printf_common>:
 800aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	4699      	mov	r9, r3
 800aa30:	688a      	ldr	r2, [r1, #8]
 800aa32:	690b      	ldr	r3, [r1, #16]
 800aa34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	bfb8      	it	lt
 800aa3c:	4613      	movlt	r3, r2
 800aa3e:	6033      	str	r3, [r6, #0]
 800aa40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa44:	4607      	mov	r7, r0
 800aa46:	460c      	mov	r4, r1
 800aa48:	b10a      	cbz	r2, 800aa4e <_printf_common+0x26>
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	6033      	str	r3, [r6, #0]
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	0699      	lsls	r1, r3, #26
 800aa52:	bf42      	ittt	mi
 800aa54:	6833      	ldrmi	r3, [r6, #0]
 800aa56:	3302      	addmi	r3, #2
 800aa58:	6033      	strmi	r3, [r6, #0]
 800aa5a:	6825      	ldr	r5, [r4, #0]
 800aa5c:	f015 0506 	ands.w	r5, r5, #6
 800aa60:	d106      	bne.n	800aa70 <_printf_common+0x48>
 800aa62:	f104 0a19 	add.w	sl, r4, #25
 800aa66:	68e3      	ldr	r3, [r4, #12]
 800aa68:	6832      	ldr	r2, [r6, #0]
 800aa6a:	1a9b      	subs	r3, r3, r2
 800aa6c:	42ab      	cmp	r3, r5
 800aa6e:	dc26      	bgt.n	800aabe <_printf_common+0x96>
 800aa70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa74:	1e13      	subs	r3, r2, #0
 800aa76:	6822      	ldr	r2, [r4, #0]
 800aa78:	bf18      	it	ne
 800aa7a:	2301      	movne	r3, #1
 800aa7c:	0692      	lsls	r2, r2, #26
 800aa7e:	d42b      	bmi.n	800aad8 <_printf_common+0xb0>
 800aa80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa84:	4649      	mov	r1, r9
 800aa86:	4638      	mov	r0, r7
 800aa88:	47c0      	blx	r8
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	d01e      	beq.n	800aacc <_printf_common+0xa4>
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	68e5      	ldr	r5, [r4, #12]
 800aa92:	6832      	ldr	r2, [r6, #0]
 800aa94:	f003 0306 	and.w	r3, r3, #6
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	bf08      	it	eq
 800aa9c:	1aad      	subeq	r5, r5, r2
 800aa9e:	68a3      	ldr	r3, [r4, #8]
 800aaa0:	6922      	ldr	r2, [r4, #16]
 800aaa2:	bf0c      	ite	eq
 800aaa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaa8:	2500      	movne	r5, #0
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	bfc4      	itt	gt
 800aaae:	1a9b      	subgt	r3, r3, r2
 800aab0:	18ed      	addgt	r5, r5, r3
 800aab2:	2600      	movs	r6, #0
 800aab4:	341a      	adds	r4, #26
 800aab6:	42b5      	cmp	r5, r6
 800aab8:	d11a      	bne.n	800aaf0 <_printf_common+0xc8>
 800aaba:	2000      	movs	r0, #0
 800aabc:	e008      	b.n	800aad0 <_printf_common+0xa8>
 800aabe:	2301      	movs	r3, #1
 800aac0:	4652      	mov	r2, sl
 800aac2:	4649      	mov	r1, r9
 800aac4:	4638      	mov	r0, r7
 800aac6:	47c0      	blx	r8
 800aac8:	3001      	adds	r0, #1
 800aaca:	d103      	bne.n	800aad4 <_printf_common+0xac>
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad4:	3501      	adds	r5, #1
 800aad6:	e7c6      	b.n	800aa66 <_printf_common+0x3e>
 800aad8:	18e1      	adds	r1, r4, r3
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	2030      	movs	r0, #48	; 0x30
 800aade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aae2:	4422      	add	r2, r4
 800aae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaec:	3302      	adds	r3, #2
 800aaee:	e7c7      	b.n	800aa80 <_printf_common+0x58>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	47c0      	blx	r8
 800aafa:	3001      	adds	r0, #1
 800aafc:	d0e6      	beq.n	800aacc <_printf_common+0xa4>
 800aafe:	3601      	adds	r6, #1
 800ab00:	e7d9      	b.n	800aab6 <_printf_common+0x8e>
	...

0800ab04 <_printf_i>:
 800ab04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab08:	7e0f      	ldrb	r7, [r1, #24]
 800ab0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab0c:	2f78      	cmp	r7, #120	; 0x78
 800ab0e:	4691      	mov	r9, r2
 800ab10:	4680      	mov	r8, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	469a      	mov	sl, r3
 800ab16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab1a:	d807      	bhi.n	800ab2c <_printf_i+0x28>
 800ab1c:	2f62      	cmp	r7, #98	; 0x62
 800ab1e:	d80a      	bhi.n	800ab36 <_printf_i+0x32>
 800ab20:	2f00      	cmp	r7, #0
 800ab22:	f000 80d8 	beq.w	800acd6 <_printf_i+0x1d2>
 800ab26:	2f58      	cmp	r7, #88	; 0x58
 800ab28:	f000 80a3 	beq.w	800ac72 <_printf_i+0x16e>
 800ab2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab34:	e03a      	b.n	800abac <_printf_i+0xa8>
 800ab36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab3a:	2b15      	cmp	r3, #21
 800ab3c:	d8f6      	bhi.n	800ab2c <_printf_i+0x28>
 800ab3e:	a101      	add	r1, pc, #4	; (adr r1, 800ab44 <_printf_i+0x40>)
 800ab40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab44:	0800ab9d 	.word	0x0800ab9d
 800ab48:	0800abb1 	.word	0x0800abb1
 800ab4c:	0800ab2d 	.word	0x0800ab2d
 800ab50:	0800ab2d 	.word	0x0800ab2d
 800ab54:	0800ab2d 	.word	0x0800ab2d
 800ab58:	0800ab2d 	.word	0x0800ab2d
 800ab5c:	0800abb1 	.word	0x0800abb1
 800ab60:	0800ab2d 	.word	0x0800ab2d
 800ab64:	0800ab2d 	.word	0x0800ab2d
 800ab68:	0800ab2d 	.word	0x0800ab2d
 800ab6c:	0800ab2d 	.word	0x0800ab2d
 800ab70:	0800acbd 	.word	0x0800acbd
 800ab74:	0800abe1 	.word	0x0800abe1
 800ab78:	0800ac9f 	.word	0x0800ac9f
 800ab7c:	0800ab2d 	.word	0x0800ab2d
 800ab80:	0800ab2d 	.word	0x0800ab2d
 800ab84:	0800acdf 	.word	0x0800acdf
 800ab88:	0800ab2d 	.word	0x0800ab2d
 800ab8c:	0800abe1 	.word	0x0800abe1
 800ab90:	0800ab2d 	.word	0x0800ab2d
 800ab94:	0800ab2d 	.word	0x0800ab2d
 800ab98:	0800aca7 	.word	0x0800aca7
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	1d1a      	adds	r2, r3, #4
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	602a      	str	r2, [r5, #0]
 800aba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abac:	2301      	movs	r3, #1
 800abae:	e0a3      	b.n	800acf8 <_printf_i+0x1f4>
 800abb0:	6820      	ldr	r0, [r4, #0]
 800abb2:	6829      	ldr	r1, [r5, #0]
 800abb4:	0606      	lsls	r6, r0, #24
 800abb6:	f101 0304 	add.w	r3, r1, #4
 800abba:	d50a      	bpl.n	800abd2 <_printf_i+0xce>
 800abbc:	680e      	ldr	r6, [r1, #0]
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	2e00      	cmp	r6, #0
 800abc2:	da03      	bge.n	800abcc <_printf_i+0xc8>
 800abc4:	232d      	movs	r3, #45	; 0x2d
 800abc6:	4276      	negs	r6, r6
 800abc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abcc:	485e      	ldr	r0, [pc, #376]	; (800ad48 <_printf_i+0x244>)
 800abce:	230a      	movs	r3, #10
 800abd0:	e019      	b.n	800ac06 <_printf_i+0x102>
 800abd2:	680e      	ldr	r6, [r1, #0]
 800abd4:	602b      	str	r3, [r5, #0]
 800abd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abda:	bf18      	it	ne
 800abdc:	b236      	sxthne	r6, r6
 800abde:	e7ef      	b.n	800abc0 <_printf_i+0xbc>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	6820      	ldr	r0, [r4, #0]
 800abe4:	1d19      	adds	r1, r3, #4
 800abe6:	6029      	str	r1, [r5, #0]
 800abe8:	0601      	lsls	r1, r0, #24
 800abea:	d501      	bpl.n	800abf0 <_printf_i+0xec>
 800abec:	681e      	ldr	r6, [r3, #0]
 800abee:	e002      	b.n	800abf6 <_printf_i+0xf2>
 800abf0:	0646      	lsls	r6, r0, #25
 800abf2:	d5fb      	bpl.n	800abec <_printf_i+0xe8>
 800abf4:	881e      	ldrh	r6, [r3, #0]
 800abf6:	4854      	ldr	r0, [pc, #336]	; (800ad48 <_printf_i+0x244>)
 800abf8:	2f6f      	cmp	r7, #111	; 0x6f
 800abfa:	bf0c      	ite	eq
 800abfc:	2308      	moveq	r3, #8
 800abfe:	230a      	movne	r3, #10
 800ac00:	2100      	movs	r1, #0
 800ac02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac06:	6865      	ldr	r5, [r4, #4]
 800ac08:	60a5      	str	r5, [r4, #8]
 800ac0a:	2d00      	cmp	r5, #0
 800ac0c:	bfa2      	ittt	ge
 800ac0e:	6821      	ldrge	r1, [r4, #0]
 800ac10:	f021 0104 	bicge.w	r1, r1, #4
 800ac14:	6021      	strge	r1, [r4, #0]
 800ac16:	b90e      	cbnz	r6, 800ac1c <_printf_i+0x118>
 800ac18:	2d00      	cmp	r5, #0
 800ac1a:	d04d      	beq.n	800acb8 <_printf_i+0x1b4>
 800ac1c:	4615      	mov	r5, r2
 800ac1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac22:	fb03 6711 	mls	r7, r3, r1, r6
 800ac26:	5dc7      	ldrb	r7, [r0, r7]
 800ac28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac2c:	4637      	mov	r7, r6
 800ac2e:	42bb      	cmp	r3, r7
 800ac30:	460e      	mov	r6, r1
 800ac32:	d9f4      	bls.n	800ac1e <_printf_i+0x11a>
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d10b      	bne.n	800ac50 <_printf_i+0x14c>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	07de      	lsls	r6, r3, #31
 800ac3c:	d508      	bpl.n	800ac50 <_printf_i+0x14c>
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	6861      	ldr	r1, [r4, #4]
 800ac42:	4299      	cmp	r1, r3
 800ac44:	bfde      	ittt	le
 800ac46:	2330      	movle	r3, #48	; 0x30
 800ac48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac50:	1b52      	subs	r2, r2, r5
 800ac52:	6122      	str	r2, [r4, #16]
 800ac54:	f8cd a000 	str.w	sl, [sp]
 800ac58:	464b      	mov	r3, r9
 800ac5a:	aa03      	add	r2, sp, #12
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	4640      	mov	r0, r8
 800ac60:	f7ff fee2 	bl	800aa28 <_printf_common>
 800ac64:	3001      	adds	r0, #1
 800ac66:	d14c      	bne.n	800ad02 <_printf_i+0x1fe>
 800ac68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac6c:	b004      	add	sp, #16
 800ac6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac72:	4835      	ldr	r0, [pc, #212]	; (800ad48 <_printf_i+0x244>)
 800ac74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac78:	6829      	ldr	r1, [r5, #0]
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac80:	6029      	str	r1, [r5, #0]
 800ac82:	061d      	lsls	r5, r3, #24
 800ac84:	d514      	bpl.n	800acb0 <_printf_i+0x1ac>
 800ac86:	07df      	lsls	r7, r3, #31
 800ac88:	bf44      	itt	mi
 800ac8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac8e:	6023      	strmi	r3, [r4, #0]
 800ac90:	b91e      	cbnz	r6, 800ac9a <_printf_i+0x196>
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	f023 0320 	bic.w	r3, r3, #32
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	2310      	movs	r3, #16
 800ac9c:	e7b0      	b.n	800ac00 <_printf_i+0xfc>
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	f043 0320 	orr.w	r3, r3, #32
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	2378      	movs	r3, #120	; 0x78
 800aca8:	4828      	ldr	r0, [pc, #160]	; (800ad4c <_printf_i+0x248>)
 800acaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acae:	e7e3      	b.n	800ac78 <_printf_i+0x174>
 800acb0:	0659      	lsls	r1, r3, #25
 800acb2:	bf48      	it	mi
 800acb4:	b2b6      	uxthmi	r6, r6
 800acb6:	e7e6      	b.n	800ac86 <_printf_i+0x182>
 800acb8:	4615      	mov	r5, r2
 800acba:	e7bb      	b.n	800ac34 <_printf_i+0x130>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	6826      	ldr	r6, [r4, #0]
 800acc0:	6961      	ldr	r1, [r4, #20]
 800acc2:	1d18      	adds	r0, r3, #4
 800acc4:	6028      	str	r0, [r5, #0]
 800acc6:	0635      	lsls	r5, r6, #24
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	d501      	bpl.n	800acd0 <_printf_i+0x1cc>
 800accc:	6019      	str	r1, [r3, #0]
 800acce:	e002      	b.n	800acd6 <_printf_i+0x1d2>
 800acd0:	0670      	lsls	r0, r6, #25
 800acd2:	d5fb      	bpl.n	800accc <_printf_i+0x1c8>
 800acd4:	8019      	strh	r1, [r3, #0]
 800acd6:	2300      	movs	r3, #0
 800acd8:	6123      	str	r3, [r4, #16]
 800acda:	4615      	mov	r5, r2
 800acdc:	e7ba      	b.n	800ac54 <_printf_i+0x150>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	1d1a      	adds	r2, r3, #4
 800ace2:	602a      	str	r2, [r5, #0]
 800ace4:	681d      	ldr	r5, [r3, #0]
 800ace6:	6862      	ldr	r2, [r4, #4]
 800ace8:	2100      	movs	r1, #0
 800acea:	4628      	mov	r0, r5
 800acec:	f7f5 fa78 	bl	80001e0 <memchr>
 800acf0:	b108      	cbz	r0, 800acf6 <_printf_i+0x1f2>
 800acf2:	1b40      	subs	r0, r0, r5
 800acf4:	6060      	str	r0, [r4, #4]
 800acf6:	6863      	ldr	r3, [r4, #4]
 800acf8:	6123      	str	r3, [r4, #16]
 800acfa:	2300      	movs	r3, #0
 800acfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad00:	e7a8      	b.n	800ac54 <_printf_i+0x150>
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	462a      	mov	r2, r5
 800ad06:	4649      	mov	r1, r9
 800ad08:	4640      	mov	r0, r8
 800ad0a:	47d0      	blx	sl
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d0ab      	beq.n	800ac68 <_printf_i+0x164>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	079b      	lsls	r3, r3, #30
 800ad14:	d413      	bmi.n	800ad3e <_printf_i+0x23a>
 800ad16:	68e0      	ldr	r0, [r4, #12]
 800ad18:	9b03      	ldr	r3, [sp, #12]
 800ad1a:	4298      	cmp	r0, r3
 800ad1c:	bfb8      	it	lt
 800ad1e:	4618      	movlt	r0, r3
 800ad20:	e7a4      	b.n	800ac6c <_printf_i+0x168>
 800ad22:	2301      	movs	r3, #1
 800ad24:	4632      	mov	r2, r6
 800ad26:	4649      	mov	r1, r9
 800ad28:	4640      	mov	r0, r8
 800ad2a:	47d0      	blx	sl
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d09b      	beq.n	800ac68 <_printf_i+0x164>
 800ad30:	3501      	adds	r5, #1
 800ad32:	68e3      	ldr	r3, [r4, #12]
 800ad34:	9903      	ldr	r1, [sp, #12]
 800ad36:	1a5b      	subs	r3, r3, r1
 800ad38:	42ab      	cmp	r3, r5
 800ad3a:	dcf2      	bgt.n	800ad22 <_printf_i+0x21e>
 800ad3c:	e7eb      	b.n	800ad16 <_printf_i+0x212>
 800ad3e:	2500      	movs	r5, #0
 800ad40:	f104 0619 	add.w	r6, r4, #25
 800ad44:	e7f5      	b.n	800ad32 <_printf_i+0x22e>
 800ad46:	bf00      	nop
 800ad48:	0800fe4e 	.word	0x0800fe4e
 800ad4c:	0800fe5f 	.word	0x0800fe5f

0800ad50 <_scanf_float>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	b087      	sub	sp, #28
 800ad56:	4617      	mov	r7, r2
 800ad58:	9303      	str	r3, [sp, #12]
 800ad5a:	688b      	ldr	r3, [r1, #8]
 800ad5c:	1e5a      	subs	r2, r3, #1
 800ad5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad62:	bf83      	ittte	hi
 800ad64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad68:	195b      	addhi	r3, r3, r5
 800ad6a:	9302      	strhi	r3, [sp, #8]
 800ad6c:	2300      	movls	r3, #0
 800ad6e:	bf86      	itte	hi
 800ad70:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad74:	608b      	strhi	r3, [r1, #8]
 800ad76:	9302      	strls	r3, [sp, #8]
 800ad78:	680b      	ldr	r3, [r1, #0]
 800ad7a:	468b      	mov	fp, r1
 800ad7c:	2500      	movs	r5, #0
 800ad7e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ad82:	f84b 3b1c 	str.w	r3, [fp], #28
 800ad86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	465e      	mov	r6, fp
 800ad90:	46aa      	mov	sl, r5
 800ad92:	46a9      	mov	r9, r5
 800ad94:	9501      	str	r5, [sp, #4]
 800ad96:	68a2      	ldr	r2, [r4, #8]
 800ad98:	b152      	cbz	r2, 800adb0 <_scanf_float+0x60>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	2b4e      	cmp	r3, #78	; 0x4e
 800ada0:	d864      	bhi.n	800ae6c <_scanf_float+0x11c>
 800ada2:	2b40      	cmp	r3, #64	; 0x40
 800ada4:	d83c      	bhi.n	800ae20 <_scanf_float+0xd0>
 800ada6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800adaa:	b2c8      	uxtb	r0, r1
 800adac:	280e      	cmp	r0, #14
 800adae:	d93a      	bls.n	800ae26 <_scanf_float+0xd6>
 800adb0:	f1b9 0f00 	cmp.w	r9, #0
 800adb4:	d003      	beq.n	800adbe <_scanf_float+0x6e>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800adc2:	f1ba 0f01 	cmp.w	sl, #1
 800adc6:	f200 8113 	bhi.w	800aff0 <_scanf_float+0x2a0>
 800adca:	455e      	cmp	r6, fp
 800adcc:	f200 8105 	bhi.w	800afda <_scanf_float+0x28a>
 800add0:	2501      	movs	r5, #1
 800add2:	4628      	mov	r0, r5
 800add4:	b007      	add	sp, #28
 800add6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adda:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800adde:	2a0d      	cmp	r2, #13
 800ade0:	d8e6      	bhi.n	800adb0 <_scanf_float+0x60>
 800ade2:	a101      	add	r1, pc, #4	; (adr r1, 800ade8 <_scanf_float+0x98>)
 800ade4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ade8:	0800af27 	.word	0x0800af27
 800adec:	0800adb1 	.word	0x0800adb1
 800adf0:	0800adb1 	.word	0x0800adb1
 800adf4:	0800adb1 	.word	0x0800adb1
 800adf8:	0800af87 	.word	0x0800af87
 800adfc:	0800af5f 	.word	0x0800af5f
 800ae00:	0800adb1 	.word	0x0800adb1
 800ae04:	0800adb1 	.word	0x0800adb1
 800ae08:	0800af35 	.word	0x0800af35
 800ae0c:	0800adb1 	.word	0x0800adb1
 800ae10:	0800adb1 	.word	0x0800adb1
 800ae14:	0800adb1 	.word	0x0800adb1
 800ae18:	0800adb1 	.word	0x0800adb1
 800ae1c:	0800aeed 	.word	0x0800aeed
 800ae20:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ae24:	e7db      	b.n	800adde <_scanf_float+0x8e>
 800ae26:	290e      	cmp	r1, #14
 800ae28:	d8c2      	bhi.n	800adb0 <_scanf_float+0x60>
 800ae2a:	a001      	add	r0, pc, #4	; (adr r0, 800ae30 <_scanf_float+0xe0>)
 800ae2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae30:	0800aedf 	.word	0x0800aedf
 800ae34:	0800adb1 	.word	0x0800adb1
 800ae38:	0800aedf 	.word	0x0800aedf
 800ae3c:	0800af73 	.word	0x0800af73
 800ae40:	0800adb1 	.word	0x0800adb1
 800ae44:	0800ae8d 	.word	0x0800ae8d
 800ae48:	0800aec9 	.word	0x0800aec9
 800ae4c:	0800aec9 	.word	0x0800aec9
 800ae50:	0800aec9 	.word	0x0800aec9
 800ae54:	0800aec9 	.word	0x0800aec9
 800ae58:	0800aec9 	.word	0x0800aec9
 800ae5c:	0800aec9 	.word	0x0800aec9
 800ae60:	0800aec9 	.word	0x0800aec9
 800ae64:	0800aec9 	.word	0x0800aec9
 800ae68:	0800aec9 	.word	0x0800aec9
 800ae6c:	2b6e      	cmp	r3, #110	; 0x6e
 800ae6e:	d809      	bhi.n	800ae84 <_scanf_float+0x134>
 800ae70:	2b60      	cmp	r3, #96	; 0x60
 800ae72:	d8b2      	bhi.n	800adda <_scanf_float+0x8a>
 800ae74:	2b54      	cmp	r3, #84	; 0x54
 800ae76:	d077      	beq.n	800af68 <_scanf_float+0x218>
 800ae78:	2b59      	cmp	r3, #89	; 0x59
 800ae7a:	d199      	bne.n	800adb0 <_scanf_float+0x60>
 800ae7c:	2d07      	cmp	r5, #7
 800ae7e:	d197      	bne.n	800adb0 <_scanf_float+0x60>
 800ae80:	2508      	movs	r5, #8
 800ae82:	e029      	b.n	800aed8 <_scanf_float+0x188>
 800ae84:	2b74      	cmp	r3, #116	; 0x74
 800ae86:	d06f      	beq.n	800af68 <_scanf_float+0x218>
 800ae88:	2b79      	cmp	r3, #121	; 0x79
 800ae8a:	e7f6      	b.n	800ae7a <_scanf_float+0x12a>
 800ae8c:	6821      	ldr	r1, [r4, #0]
 800ae8e:	05c8      	lsls	r0, r1, #23
 800ae90:	d51a      	bpl.n	800aec8 <_scanf_float+0x178>
 800ae92:	9b02      	ldr	r3, [sp, #8]
 800ae94:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ae98:	6021      	str	r1, [r4, #0]
 800ae9a:	f109 0901 	add.w	r9, r9, #1
 800ae9e:	b11b      	cbz	r3, 800aea8 <_scanf_float+0x158>
 800aea0:	3b01      	subs	r3, #1
 800aea2:	3201      	adds	r2, #1
 800aea4:	9302      	str	r3, [sp, #8]
 800aea6:	60a2      	str	r2, [r4, #8]
 800aea8:	68a3      	ldr	r3, [r4, #8]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	60a3      	str	r3, [r4, #8]
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	6123      	str	r3, [r4, #16]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	607b      	str	r3, [r7, #4]
 800aebc:	f340 8084 	ble.w	800afc8 <_scanf_float+0x278>
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	3301      	adds	r3, #1
 800aec4:	603b      	str	r3, [r7, #0]
 800aec6:	e766      	b.n	800ad96 <_scanf_float+0x46>
 800aec8:	eb1a 0f05 	cmn.w	sl, r5
 800aecc:	f47f af70 	bne.w	800adb0 <_scanf_float+0x60>
 800aed0:	6822      	ldr	r2, [r4, #0]
 800aed2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aed6:	6022      	str	r2, [r4, #0]
 800aed8:	f806 3b01 	strb.w	r3, [r6], #1
 800aedc:	e7e4      	b.n	800aea8 <_scanf_float+0x158>
 800aede:	6822      	ldr	r2, [r4, #0]
 800aee0:	0610      	lsls	r0, r2, #24
 800aee2:	f57f af65 	bpl.w	800adb0 <_scanf_float+0x60>
 800aee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aeea:	e7f4      	b.n	800aed6 <_scanf_float+0x186>
 800aeec:	f1ba 0f00 	cmp.w	sl, #0
 800aef0:	d10e      	bne.n	800af10 <_scanf_float+0x1c0>
 800aef2:	f1b9 0f00 	cmp.w	r9, #0
 800aef6:	d10e      	bne.n	800af16 <_scanf_float+0x1c6>
 800aef8:	6822      	ldr	r2, [r4, #0]
 800aefa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aefe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af02:	d108      	bne.n	800af16 <_scanf_float+0x1c6>
 800af04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af08:	6022      	str	r2, [r4, #0]
 800af0a:	f04f 0a01 	mov.w	sl, #1
 800af0e:	e7e3      	b.n	800aed8 <_scanf_float+0x188>
 800af10:	f1ba 0f02 	cmp.w	sl, #2
 800af14:	d055      	beq.n	800afc2 <_scanf_float+0x272>
 800af16:	2d01      	cmp	r5, #1
 800af18:	d002      	beq.n	800af20 <_scanf_float+0x1d0>
 800af1a:	2d04      	cmp	r5, #4
 800af1c:	f47f af48 	bne.w	800adb0 <_scanf_float+0x60>
 800af20:	3501      	adds	r5, #1
 800af22:	b2ed      	uxtb	r5, r5
 800af24:	e7d8      	b.n	800aed8 <_scanf_float+0x188>
 800af26:	f1ba 0f01 	cmp.w	sl, #1
 800af2a:	f47f af41 	bne.w	800adb0 <_scanf_float+0x60>
 800af2e:	f04f 0a02 	mov.w	sl, #2
 800af32:	e7d1      	b.n	800aed8 <_scanf_float+0x188>
 800af34:	b97d      	cbnz	r5, 800af56 <_scanf_float+0x206>
 800af36:	f1b9 0f00 	cmp.w	r9, #0
 800af3a:	f47f af3c 	bne.w	800adb6 <_scanf_float+0x66>
 800af3e:	6822      	ldr	r2, [r4, #0]
 800af40:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af44:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af48:	f47f af39 	bne.w	800adbe <_scanf_float+0x6e>
 800af4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af50:	6022      	str	r2, [r4, #0]
 800af52:	2501      	movs	r5, #1
 800af54:	e7c0      	b.n	800aed8 <_scanf_float+0x188>
 800af56:	2d03      	cmp	r5, #3
 800af58:	d0e2      	beq.n	800af20 <_scanf_float+0x1d0>
 800af5a:	2d05      	cmp	r5, #5
 800af5c:	e7de      	b.n	800af1c <_scanf_float+0x1cc>
 800af5e:	2d02      	cmp	r5, #2
 800af60:	f47f af26 	bne.w	800adb0 <_scanf_float+0x60>
 800af64:	2503      	movs	r5, #3
 800af66:	e7b7      	b.n	800aed8 <_scanf_float+0x188>
 800af68:	2d06      	cmp	r5, #6
 800af6a:	f47f af21 	bne.w	800adb0 <_scanf_float+0x60>
 800af6e:	2507      	movs	r5, #7
 800af70:	e7b2      	b.n	800aed8 <_scanf_float+0x188>
 800af72:	6822      	ldr	r2, [r4, #0]
 800af74:	0591      	lsls	r1, r2, #22
 800af76:	f57f af1b 	bpl.w	800adb0 <_scanf_float+0x60>
 800af7a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800af7e:	6022      	str	r2, [r4, #0]
 800af80:	f8cd 9004 	str.w	r9, [sp, #4]
 800af84:	e7a8      	b.n	800aed8 <_scanf_float+0x188>
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800af8c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800af90:	d006      	beq.n	800afa0 <_scanf_float+0x250>
 800af92:	0550      	lsls	r0, r2, #21
 800af94:	f57f af0c 	bpl.w	800adb0 <_scanf_float+0x60>
 800af98:	f1b9 0f00 	cmp.w	r9, #0
 800af9c:	f43f af0f 	beq.w	800adbe <_scanf_float+0x6e>
 800afa0:	0591      	lsls	r1, r2, #22
 800afa2:	bf58      	it	pl
 800afa4:	9901      	ldrpl	r1, [sp, #4]
 800afa6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800afaa:	bf58      	it	pl
 800afac:	eba9 0101 	subpl.w	r1, r9, r1
 800afb0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800afb4:	bf58      	it	pl
 800afb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800afba:	6022      	str	r2, [r4, #0]
 800afbc:	f04f 0900 	mov.w	r9, #0
 800afc0:	e78a      	b.n	800aed8 <_scanf_float+0x188>
 800afc2:	f04f 0a03 	mov.w	sl, #3
 800afc6:	e787      	b.n	800aed8 <_scanf_float+0x188>
 800afc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800afcc:	4639      	mov	r1, r7
 800afce:	4640      	mov	r0, r8
 800afd0:	4798      	blx	r3
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f43f aedf 	beq.w	800ad96 <_scanf_float+0x46>
 800afd8:	e6ea      	b.n	800adb0 <_scanf_float+0x60>
 800afda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afe2:	463a      	mov	r2, r7
 800afe4:	4640      	mov	r0, r8
 800afe6:	4798      	blx	r3
 800afe8:	6923      	ldr	r3, [r4, #16]
 800afea:	3b01      	subs	r3, #1
 800afec:	6123      	str	r3, [r4, #16]
 800afee:	e6ec      	b.n	800adca <_scanf_float+0x7a>
 800aff0:	1e6b      	subs	r3, r5, #1
 800aff2:	2b06      	cmp	r3, #6
 800aff4:	d825      	bhi.n	800b042 <_scanf_float+0x2f2>
 800aff6:	2d02      	cmp	r5, #2
 800aff8:	d836      	bhi.n	800b068 <_scanf_float+0x318>
 800affa:	455e      	cmp	r6, fp
 800affc:	f67f aee8 	bls.w	800add0 <_scanf_float+0x80>
 800b000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b004:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b008:	463a      	mov	r2, r7
 800b00a:	4640      	mov	r0, r8
 800b00c:	4798      	blx	r3
 800b00e:	6923      	ldr	r3, [r4, #16]
 800b010:	3b01      	subs	r3, #1
 800b012:	6123      	str	r3, [r4, #16]
 800b014:	e7f1      	b.n	800affa <_scanf_float+0x2aa>
 800b016:	9802      	ldr	r0, [sp, #8]
 800b018:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b01c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b020:	9002      	str	r0, [sp, #8]
 800b022:	463a      	mov	r2, r7
 800b024:	4640      	mov	r0, r8
 800b026:	4798      	blx	r3
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	6123      	str	r3, [r4, #16]
 800b02e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b032:	fa5f fa8a 	uxtb.w	sl, sl
 800b036:	f1ba 0f02 	cmp.w	sl, #2
 800b03a:	d1ec      	bne.n	800b016 <_scanf_float+0x2c6>
 800b03c:	3d03      	subs	r5, #3
 800b03e:	b2ed      	uxtb	r5, r5
 800b040:	1b76      	subs	r6, r6, r5
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	05da      	lsls	r2, r3, #23
 800b046:	d52f      	bpl.n	800b0a8 <_scanf_float+0x358>
 800b048:	055b      	lsls	r3, r3, #21
 800b04a:	d510      	bpl.n	800b06e <_scanf_float+0x31e>
 800b04c:	455e      	cmp	r6, fp
 800b04e:	f67f aebf 	bls.w	800add0 <_scanf_float+0x80>
 800b052:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b056:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b05a:	463a      	mov	r2, r7
 800b05c:	4640      	mov	r0, r8
 800b05e:	4798      	blx	r3
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	3b01      	subs	r3, #1
 800b064:	6123      	str	r3, [r4, #16]
 800b066:	e7f1      	b.n	800b04c <_scanf_float+0x2fc>
 800b068:	46aa      	mov	sl, r5
 800b06a:	9602      	str	r6, [sp, #8]
 800b06c:	e7df      	b.n	800b02e <_scanf_float+0x2de>
 800b06e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b072:	6923      	ldr	r3, [r4, #16]
 800b074:	2965      	cmp	r1, #101	; 0x65
 800b076:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b07a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b07e:	6123      	str	r3, [r4, #16]
 800b080:	d00c      	beq.n	800b09c <_scanf_float+0x34c>
 800b082:	2945      	cmp	r1, #69	; 0x45
 800b084:	d00a      	beq.n	800b09c <_scanf_float+0x34c>
 800b086:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b08a:	463a      	mov	r2, r7
 800b08c:	4640      	mov	r0, r8
 800b08e:	4798      	blx	r3
 800b090:	6923      	ldr	r3, [r4, #16]
 800b092:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b096:	3b01      	subs	r3, #1
 800b098:	1eb5      	subs	r5, r6, #2
 800b09a:	6123      	str	r3, [r4, #16]
 800b09c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0a0:	463a      	mov	r2, r7
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	4798      	blx	r3
 800b0a6:	462e      	mov	r6, r5
 800b0a8:	6825      	ldr	r5, [r4, #0]
 800b0aa:	f015 0510 	ands.w	r5, r5, #16
 800b0ae:	d159      	bne.n	800b164 <_scanf_float+0x414>
 800b0b0:	7035      	strb	r5, [r6, #0]
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0bc:	d11b      	bne.n	800b0f6 <_scanf_float+0x3a6>
 800b0be:	9b01      	ldr	r3, [sp, #4]
 800b0c0:	454b      	cmp	r3, r9
 800b0c2:	eba3 0209 	sub.w	r2, r3, r9
 800b0c6:	d123      	bne.n	800b110 <_scanf_float+0x3c0>
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	4659      	mov	r1, fp
 800b0cc:	4640      	mov	r0, r8
 800b0ce:	f000 fec1 	bl	800be54 <_strtod_r>
 800b0d2:	6822      	ldr	r2, [r4, #0]
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	f012 0f02 	tst.w	r2, #2
 800b0da:	ec57 6b10 	vmov	r6, r7, d0
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	d021      	beq.n	800b126 <_scanf_float+0x3d6>
 800b0e2:	9903      	ldr	r1, [sp, #12]
 800b0e4:	1d1a      	adds	r2, r3, #4
 800b0e6:	600a      	str	r2, [r1, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	e9c3 6700 	strd	r6, r7, [r3]
 800b0ee:	68e3      	ldr	r3, [r4, #12]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	60e3      	str	r3, [r4, #12]
 800b0f4:	e66d      	b.n	800add2 <_scanf_float+0x82>
 800b0f6:	9b04      	ldr	r3, [sp, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0e5      	beq.n	800b0c8 <_scanf_float+0x378>
 800b0fc:	9905      	ldr	r1, [sp, #20]
 800b0fe:	230a      	movs	r3, #10
 800b100:	462a      	mov	r2, r5
 800b102:	3101      	adds	r1, #1
 800b104:	4640      	mov	r0, r8
 800b106:	f000 ff2d 	bl	800bf64 <_strtol_r>
 800b10a:	9b04      	ldr	r3, [sp, #16]
 800b10c:	9e05      	ldr	r6, [sp, #20]
 800b10e:	1ac2      	subs	r2, r0, r3
 800b110:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b114:	429e      	cmp	r6, r3
 800b116:	bf28      	it	cs
 800b118:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b11c:	4912      	ldr	r1, [pc, #72]	; (800b168 <_scanf_float+0x418>)
 800b11e:	4630      	mov	r0, r6
 800b120:	f000 f854 	bl	800b1cc <siprintf>
 800b124:	e7d0      	b.n	800b0c8 <_scanf_float+0x378>
 800b126:	9903      	ldr	r1, [sp, #12]
 800b128:	f012 0f04 	tst.w	r2, #4
 800b12c:	f103 0204 	add.w	r2, r3, #4
 800b130:	600a      	str	r2, [r1, #0]
 800b132:	d1d9      	bne.n	800b0e8 <_scanf_float+0x398>
 800b134:	f8d3 8000 	ldr.w	r8, [r3]
 800b138:	ee10 2a10 	vmov	r2, s0
 800b13c:	ee10 0a10 	vmov	r0, s0
 800b140:	463b      	mov	r3, r7
 800b142:	4639      	mov	r1, r7
 800b144:	f7f5 fcf2 	bl	8000b2c <__aeabi_dcmpun>
 800b148:	b128      	cbz	r0, 800b156 <_scanf_float+0x406>
 800b14a:	4808      	ldr	r0, [pc, #32]	; (800b16c <_scanf_float+0x41c>)
 800b14c:	f000 f838 	bl	800b1c0 <nanf>
 800b150:	ed88 0a00 	vstr	s0, [r8]
 800b154:	e7cb      	b.n	800b0ee <_scanf_float+0x39e>
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 fd45 	bl	8000be8 <__aeabi_d2f>
 800b15e:	f8c8 0000 	str.w	r0, [r8]
 800b162:	e7c4      	b.n	800b0ee <_scanf_float+0x39e>
 800b164:	2500      	movs	r5, #0
 800b166:	e634      	b.n	800add2 <_scanf_float+0x82>
 800b168:	0800fe70 	.word	0x0800fe70
 800b16c:	080102e0 	.word	0x080102e0

0800b170 <iprintf>:
 800b170:	b40f      	push	{r0, r1, r2, r3}
 800b172:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <iprintf+0x2c>)
 800b174:	b513      	push	{r0, r1, r4, lr}
 800b176:	681c      	ldr	r4, [r3, #0]
 800b178:	b124      	cbz	r4, 800b184 <iprintf+0x14>
 800b17a:	69a3      	ldr	r3, [r4, #24]
 800b17c:	b913      	cbnz	r3, 800b184 <iprintf+0x14>
 800b17e:	4620      	mov	r0, r4
 800b180:	f001 fdc4 	bl	800cd0c <__sinit>
 800b184:	ab05      	add	r3, sp, #20
 800b186:	9a04      	ldr	r2, [sp, #16]
 800b188:	68a1      	ldr	r1, [r4, #8]
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	4620      	mov	r0, r4
 800b18e:	f003 f859 	bl	800e244 <_vfiprintf_r>
 800b192:	b002      	add	sp, #8
 800b194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b198:	b004      	add	sp, #16
 800b19a:	4770      	bx	lr
 800b19c:	2000002c 	.word	0x2000002c

0800b1a0 <_sbrk_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d06      	ldr	r5, [pc, #24]	; (800b1bc <_sbrk_r+0x1c>)
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	4608      	mov	r0, r1
 800b1aa:	602b      	str	r3, [r5, #0]
 800b1ac:	f7f7 fae2 	bl	8002774 <_sbrk>
 800b1b0:	1c43      	adds	r3, r0, #1
 800b1b2:	d102      	bne.n	800b1ba <_sbrk_r+0x1a>
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	b103      	cbz	r3, 800b1ba <_sbrk_r+0x1a>
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	20000aac 	.word	0x20000aac

0800b1c0 <nanf>:
 800b1c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b1c8 <nanf+0x8>
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	7fc00000 	.word	0x7fc00000

0800b1cc <siprintf>:
 800b1cc:	b40e      	push	{r1, r2, r3}
 800b1ce:	b500      	push	{lr}
 800b1d0:	b09c      	sub	sp, #112	; 0x70
 800b1d2:	ab1d      	add	r3, sp, #116	; 0x74
 800b1d4:	9002      	str	r0, [sp, #8]
 800b1d6:	9006      	str	r0, [sp, #24]
 800b1d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1dc:	4809      	ldr	r0, [pc, #36]	; (800b204 <siprintf+0x38>)
 800b1de:	9107      	str	r1, [sp, #28]
 800b1e0:	9104      	str	r1, [sp, #16]
 800b1e2:	4909      	ldr	r1, [pc, #36]	; (800b208 <siprintf+0x3c>)
 800b1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e8:	9105      	str	r1, [sp, #20]
 800b1ea:	6800      	ldr	r0, [r0, #0]
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	a902      	add	r1, sp, #8
 800b1f0:	f002 fefe 	bl	800dff0 <_svfiprintf_r>
 800b1f4:	9b02      	ldr	r3, [sp, #8]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	701a      	strb	r2, [r3, #0]
 800b1fa:	b01c      	add	sp, #112	; 0x70
 800b1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b200:	b003      	add	sp, #12
 800b202:	4770      	bx	lr
 800b204:	2000002c 	.word	0x2000002c
 800b208:	ffff0208 	.word	0xffff0208

0800b20c <sulp>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4604      	mov	r4, r0
 800b210:	460d      	mov	r5, r1
 800b212:	ec45 4b10 	vmov	d0, r4, r5
 800b216:	4616      	mov	r6, r2
 800b218:	f002 fd2a 	bl	800dc70 <__ulp>
 800b21c:	ec51 0b10 	vmov	r0, r1, d0
 800b220:	b17e      	cbz	r6, 800b242 <sulp+0x36>
 800b222:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b226:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dd09      	ble.n	800b242 <sulp+0x36>
 800b22e:	051b      	lsls	r3, r3, #20
 800b230:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b234:	2400      	movs	r4, #0
 800b236:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b23a:	4622      	mov	r2, r4
 800b23c:	462b      	mov	r3, r5
 800b23e:	f7f5 f9db 	bl	80005f8 <__aeabi_dmul>
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	0000      	movs	r0, r0
	...

0800b248 <_strtod_l>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	ed2d 8b02 	vpush	{d8}
 800b250:	b09d      	sub	sp, #116	; 0x74
 800b252:	461f      	mov	r7, r3
 800b254:	2300      	movs	r3, #0
 800b256:	9318      	str	r3, [sp, #96]	; 0x60
 800b258:	4ba2      	ldr	r3, [pc, #648]	; (800b4e4 <_strtod_l+0x29c>)
 800b25a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	9305      	str	r3, [sp, #20]
 800b260:	4604      	mov	r4, r0
 800b262:	4618      	mov	r0, r3
 800b264:	4688      	mov	r8, r1
 800b266:	f7f4 ffb3 	bl	80001d0 <strlen>
 800b26a:	f04f 0a00 	mov.w	sl, #0
 800b26e:	4605      	mov	r5, r0
 800b270:	f04f 0b00 	mov.w	fp, #0
 800b274:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b27a:	781a      	ldrb	r2, [r3, #0]
 800b27c:	2a2b      	cmp	r2, #43	; 0x2b
 800b27e:	d04e      	beq.n	800b31e <_strtod_l+0xd6>
 800b280:	d83b      	bhi.n	800b2fa <_strtod_l+0xb2>
 800b282:	2a0d      	cmp	r2, #13
 800b284:	d834      	bhi.n	800b2f0 <_strtod_l+0xa8>
 800b286:	2a08      	cmp	r2, #8
 800b288:	d834      	bhi.n	800b2f4 <_strtod_l+0xac>
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	d03e      	beq.n	800b30c <_strtod_l+0xc4>
 800b28e:	2300      	movs	r3, #0
 800b290:	930a      	str	r3, [sp, #40]	; 0x28
 800b292:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b294:	7833      	ldrb	r3, [r6, #0]
 800b296:	2b30      	cmp	r3, #48	; 0x30
 800b298:	f040 80b0 	bne.w	800b3fc <_strtod_l+0x1b4>
 800b29c:	7873      	ldrb	r3, [r6, #1]
 800b29e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2a2:	2b58      	cmp	r3, #88	; 0x58
 800b2a4:	d168      	bne.n	800b378 <_strtod_l+0x130>
 800b2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	ab18      	add	r3, sp, #96	; 0x60
 800b2ac:	9702      	str	r7, [sp, #8]
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	4a8d      	ldr	r2, [pc, #564]	; (800b4e8 <_strtod_l+0x2a0>)
 800b2b2:	ab19      	add	r3, sp, #100	; 0x64
 800b2b4:	a917      	add	r1, sp, #92	; 0x5c
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f001 fe2c 	bl	800cf14 <__gethex>
 800b2bc:	f010 0707 	ands.w	r7, r0, #7
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	d005      	beq.n	800b2d0 <_strtod_l+0x88>
 800b2c4:	2f06      	cmp	r7, #6
 800b2c6:	d12c      	bne.n	800b322 <_strtod_l+0xda>
 800b2c8:	3601      	adds	r6, #1
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800b2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b2d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f040 8590 	bne.w	800bdf8 <_strtod_l+0xbb0>
 800b2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2da:	b1eb      	cbz	r3, 800b318 <_strtod_l+0xd0>
 800b2dc:	4652      	mov	r2, sl
 800b2de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2e2:	ec43 2b10 	vmov	d0, r2, r3
 800b2e6:	b01d      	add	sp, #116	; 0x74
 800b2e8:	ecbd 8b02 	vpop	{d8}
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f0:	2a20      	cmp	r2, #32
 800b2f2:	d1cc      	bne.n	800b28e <_strtod_l+0x46>
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2f8:	e7be      	b.n	800b278 <_strtod_l+0x30>
 800b2fa:	2a2d      	cmp	r2, #45	; 0x2d
 800b2fc:	d1c7      	bne.n	800b28e <_strtod_l+0x46>
 800b2fe:	2201      	movs	r2, #1
 800b300:	920a      	str	r2, [sp, #40]	; 0x28
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	9217      	str	r2, [sp, #92]	; 0x5c
 800b306:	785b      	ldrb	r3, [r3, #1]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1c2      	bne.n	800b292 <_strtod_l+0x4a>
 800b30c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b30e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b312:	2b00      	cmp	r3, #0
 800b314:	f040 856e 	bne.w	800bdf4 <_strtod_l+0xbac>
 800b318:	4652      	mov	r2, sl
 800b31a:	465b      	mov	r3, fp
 800b31c:	e7e1      	b.n	800b2e2 <_strtod_l+0x9a>
 800b31e:	2200      	movs	r2, #0
 800b320:	e7ee      	b.n	800b300 <_strtod_l+0xb8>
 800b322:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b324:	b13a      	cbz	r2, 800b336 <_strtod_l+0xee>
 800b326:	2135      	movs	r1, #53	; 0x35
 800b328:	a81a      	add	r0, sp, #104	; 0x68
 800b32a:	f002 fdac 	bl	800de86 <__copybits>
 800b32e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b330:	4620      	mov	r0, r4
 800b332:	f002 f96b 	bl	800d60c <_Bfree>
 800b336:	3f01      	subs	r7, #1
 800b338:	2f04      	cmp	r7, #4
 800b33a:	d806      	bhi.n	800b34a <_strtod_l+0x102>
 800b33c:	e8df f007 	tbb	[pc, r7]
 800b340:	1714030a 	.word	0x1714030a
 800b344:	0a          	.byte	0x0a
 800b345:	00          	.byte	0x00
 800b346:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b34a:	0728      	lsls	r0, r5, #28
 800b34c:	d5c0      	bpl.n	800b2d0 <_strtod_l+0x88>
 800b34e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b352:	e7bd      	b.n	800b2d0 <_strtod_l+0x88>
 800b354:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b358:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b35a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b35e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b362:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b366:	e7f0      	b.n	800b34a <_strtod_l+0x102>
 800b368:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b4ec <_strtod_l+0x2a4>
 800b36c:	e7ed      	b.n	800b34a <_strtod_l+0x102>
 800b36e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b372:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b376:	e7e8      	b.n	800b34a <_strtod_l+0x102>
 800b378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b37e:	785b      	ldrb	r3, [r3, #1]
 800b380:	2b30      	cmp	r3, #48	; 0x30
 800b382:	d0f9      	beq.n	800b378 <_strtod_l+0x130>
 800b384:	2b00      	cmp	r3, #0
 800b386:	d0a3      	beq.n	800b2d0 <_strtod_l+0x88>
 800b388:	2301      	movs	r3, #1
 800b38a:	f04f 0900 	mov.w	r9, #0
 800b38e:	9304      	str	r3, [sp, #16]
 800b390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b392:	9308      	str	r3, [sp, #32]
 800b394:	f8cd 901c 	str.w	r9, [sp, #28]
 800b398:	464f      	mov	r7, r9
 800b39a:	220a      	movs	r2, #10
 800b39c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b39e:	7806      	ldrb	r6, [r0, #0]
 800b3a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b3a4:	b2d9      	uxtb	r1, r3
 800b3a6:	2909      	cmp	r1, #9
 800b3a8:	d92a      	bls.n	800b400 <_strtod_l+0x1b8>
 800b3aa:	9905      	ldr	r1, [sp, #20]
 800b3ac:	462a      	mov	r2, r5
 800b3ae:	f003 f8c6 	bl	800e53e <strncmp>
 800b3b2:	b398      	cbz	r0, 800b41c <_strtod_l+0x1d4>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	463d      	mov	r5, r7
 800b3ba:	9005      	str	r0, [sp, #20]
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2a65      	cmp	r2, #101	; 0x65
 800b3c0:	d001      	beq.n	800b3c6 <_strtod_l+0x17e>
 800b3c2:	2a45      	cmp	r2, #69	; 0x45
 800b3c4:	d118      	bne.n	800b3f8 <_strtod_l+0x1b0>
 800b3c6:	b91d      	cbnz	r5, 800b3d0 <_strtod_l+0x188>
 800b3c8:	9a04      	ldr	r2, [sp, #16]
 800b3ca:	4302      	orrs	r2, r0
 800b3cc:	d09e      	beq.n	800b30c <_strtod_l+0xc4>
 800b3ce:	2500      	movs	r5, #0
 800b3d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b3d4:	f108 0201 	add.w	r2, r8, #1
 800b3d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b3da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b3de:	2a2b      	cmp	r2, #43	; 0x2b
 800b3e0:	d075      	beq.n	800b4ce <_strtod_l+0x286>
 800b3e2:	2a2d      	cmp	r2, #45	; 0x2d
 800b3e4:	d07b      	beq.n	800b4de <_strtod_l+0x296>
 800b3e6:	f04f 0c00 	mov.w	ip, #0
 800b3ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b3ee:	2909      	cmp	r1, #9
 800b3f0:	f240 8082 	bls.w	800b4f8 <_strtod_l+0x2b0>
 800b3f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b3f8:	2600      	movs	r6, #0
 800b3fa:	e09d      	b.n	800b538 <_strtod_l+0x2f0>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	e7c4      	b.n	800b38a <_strtod_l+0x142>
 800b400:	2f08      	cmp	r7, #8
 800b402:	bfd8      	it	le
 800b404:	9907      	ldrle	r1, [sp, #28]
 800b406:	f100 0001 	add.w	r0, r0, #1
 800b40a:	bfda      	itte	le
 800b40c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b410:	9307      	strle	r3, [sp, #28]
 800b412:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b416:	3701      	adds	r7, #1
 800b418:	9017      	str	r0, [sp, #92]	; 0x5c
 800b41a:	e7bf      	b.n	800b39c <_strtod_l+0x154>
 800b41c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b41e:	195a      	adds	r2, r3, r5
 800b420:	9217      	str	r2, [sp, #92]	; 0x5c
 800b422:	5d5a      	ldrb	r2, [r3, r5]
 800b424:	2f00      	cmp	r7, #0
 800b426:	d037      	beq.n	800b498 <_strtod_l+0x250>
 800b428:	9005      	str	r0, [sp, #20]
 800b42a:	463d      	mov	r5, r7
 800b42c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b430:	2b09      	cmp	r3, #9
 800b432:	d912      	bls.n	800b45a <_strtod_l+0x212>
 800b434:	2301      	movs	r3, #1
 800b436:	e7c2      	b.n	800b3be <_strtod_l+0x176>
 800b438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b43e:	785a      	ldrb	r2, [r3, #1]
 800b440:	3001      	adds	r0, #1
 800b442:	2a30      	cmp	r2, #48	; 0x30
 800b444:	d0f8      	beq.n	800b438 <_strtod_l+0x1f0>
 800b446:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b44a:	2b08      	cmp	r3, #8
 800b44c:	f200 84d9 	bhi.w	800be02 <_strtod_l+0xbba>
 800b450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b452:	9005      	str	r0, [sp, #20]
 800b454:	2000      	movs	r0, #0
 800b456:	9308      	str	r3, [sp, #32]
 800b458:	4605      	mov	r5, r0
 800b45a:	3a30      	subs	r2, #48	; 0x30
 800b45c:	f100 0301 	add.w	r3, r0, #1
 800b460:	d014      	beq.n	800b48c <_strtod_l+0x244>
 800b462:	9905      	ldr	r1, [sp, #20]
 800b464:	4419      	add	r1, r3
 800b466:	9105      	str	r1, [sp, #20]
 800b468:	462b      	mov	r3, r5
 800b46a:	eb00 0e05 	add.w	lr, r0, r5
 800b46e:	210a      	movs	r1, #10
 800b470:	4573      	cmp	r3, lr
 800b472:	d113      	bne.n	800b49c <_strtod_l+0x254>
 800b474:	182b      	adds	r3, r5, r0
 800b476:	2b08      	cmp	r3, #8
 800b478:	f105 0501 	add.w	r5, r5, #1
 800b47c:	4405      	add	r5, r0
 800b47e:	dc1c      	bgt.n	800b4ba <_strtod_l+0x272>
 800b480:	9907      	ldr	r1, [sp, #28]
 800b482:	230a      	movs	r3, #10
 800b484:	fb03 2301 	mla	r3, r3, r1, r2
 800b488:	9307      	str	r3, [sp, #28]
 800b48a:	2300      	movs	r3, #0
 800b48c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b48e:	1c51      	adds	r1, r2, #1
 800b490:	9117      	str	r1, [sp, #92]	; 0x5c
 800b492:	7852      	ldrb	r2, [r2, #1]
 800b494:	4618      	mov	r0, r3
 800b496:	e7c9      	b.n	800b42c <_strtod_l+0x1e4>
 800b498:	4638      	mov	r0, r7
 800b49a:	e7d2      	b.n	800b442 <_strtod_l+0x1fa>
 800b49c:	2b08      	cmp	r3, #8
 800b49e:	dc04      	bgt.n	800b4aa <_strtod_l+0x262>
 800b4a0:	9e07      	ldr	r6, [sp, #28]
 800b4a2:	434e      	muls	r6, r1
 800b4a4:	9607      	str	r6, [sp, #28]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	e7e2      	b.n	800b470 <_strtod_l+0x228>
 800b4aa:	f103 0c01 	add.w	ip, r3, #1
 800b4ae:	f1bc 0f10 	cmp.w	ip, #16
 800b4b2:	bfd8      	it	le
 800b4b4:	fb01 f909 	mulle.w	r9, r1, r9
 800b4b8:	e7f5      	b.n	800b4a6 <_strtod_l+0x25e>
 800b4ba:	2d10      	cmp	r5, #16
 800b4bc:	bfdc      	itt	le
 800b4be:	230a      	movle	r3, #10
 800b4c0:	fb03 2909 	mlale	r9, r3, r9, r2
 800b4c4:	e7e1      	b.n	800b48a <_strtod_l+0x242>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	9305      	str	r3, [sp, #20]
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e77c      	b.n	800b3c8 <_strtod_l+0x180>
 800b4ce:	f04f 0c00 	mov.w	ip, #0
 800b4d2:	f108 0202 	add.w	r2, r8, #2
 800b4d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800b4d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b4dc:	e785      	b.n	800b3ea <_strtod_l+0x1a2>
 800b4de:	f04f 0c01 	mov.w	ip, #1
 800b4e2:	e7f6      	b.n	800b4d2 <_strtod_l+0x28a>
 800b4e4:	08010124 	.word	0x08010124
 800b4e8:	0800fe78 	.word	0x0800fe78
 800b4ec:	7ff00000 	.word	0x7ff00000
 800b4f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b4f2:	1c51      	adds	r1, r2, #1
 800b4f4:	9117      	str	r1, [sp, #92]	; 0x5c
 800b4f6:	7852      	ldrb	r2, [r2, #1]
 800b4f8:	2a30      	cmp	r2, #48	; 0x30
 800b4fa:	d0f9      	beq.n	800b4f0 <_strtod_l+0x2a8>
 800b4fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b500:	2908      	cmp	r1, #8
 800b502:	f63f af79 	bhi.w	800b3f8 <_strtod_l+0x1b0>
 800b506:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b50a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b50c:	9206      	str	r2, [sp, #24]
 800b50e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b510:	1c51      	adds	r1, r2, #1
 800b512:	9117      	str	r1, [sp, #92]	; 0x5c
 800b514:	7852      	ldrb	r2, [r2, #1]
 800b516:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b51a:	2e09      	cmp	r6, #9
 800b51c:	d937      	bls.n	800b58e <_strtod_l+0x346>
 800b51e:	9e06      	ldr	r6, [sp, #24]
 800b520:	1b89      	subs	r1, r1, r6
 800b522:	2908      	cmp	r1, #8
 800b524:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b528:	dc02      	bgt.n	800b530 <_strtod_l+0x2e8>
 800b52a:	4576      	cmp	r6, lr
 800b52c:	bfa8      	it	ge
 800b52e:	4676      	movge	r6, lr
 800b530:	f1bc 0f00 	cmp.w	ip, #0
 800b534:	d000      	beq.n	800b538 <_strtod_l+0x2f0>
 800b536:	4276      	negs	r6, r6
 800b538:	2d00      	cmp	r5, #0
 800b53a:	d14d      	bne.n	800b5d8 <_strtod_l+0x390>
 800b53c:	9904      	ldr	r1, [sp, #16]
 800b53e:	4301      	orrs	r1, r0
 800b540:	f47f aec6 	bne.w	800b2d0 <_strtod_l+0x88>
 800b544:	2b00      	cmp	r3, #0
 800b546:	f47f aee1 	bne.w	800b30c <_strtod_l+0xc4>
 800b54a:	2a69      	cmp	r2, #105	; 0x69
 800b54c:	d027      	beq.n	800b59e <_strtod_l+0x356>
 800b54e:	dc24      	bgt.n	800b59a <_strtod_l+0x352>
 800b550:	2a49      	cmp	r2, #73	; 0x49
 800b552:	d024      	beq.n	800b59e <_strtod_l+0x356>
 800b554:	2a4e      	cmp	r2, #78	; 0x4e
 800b556:	f47f aed9 	bne.w	800b30c <_strtod_l+0xc4>
 800b55a:	499f      	ldr	r1, [pc, #636]	; (800b7d8 <_strtod_l+0x590>)
 800b55c:	a817      	add	r0, sp, #92	; 0x5c
 800b55e:	f001 ff31 	bl	800d3c4 <__match>
 800b562:	2800      	cmp	r0, #0
 800b564:	f43f aed2 	beq.w	800b30c <_strtod_l+0xc4>
 800b568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b28      	cmp	r3, #40	; 0x28
 800b56e:	d12d      	bne.n	800b5cc <_strtod_l+0x384>
 800b570:	499a      	ldr	r1, [pc, #616]	; (800b7dc <_strtod_l+0x594>)
 800b572:	aa1a      	add	r2, sp, #104	; 0x68
 800b574:	a817      	add	r0, sp, #92	; 0x5c
 800b576:	f001 ff39 	bl	800d3ec <__hexnan>
 800b57a:	2805      	cmp	r0, #5
 800b57c:	d126      	bne.n	800b5cc <_strtod_l+0x384>
 800b57e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b580:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b584:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b588:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b58c:	e6a0      	b.n	800b2d0 <_strtod_l+0x88>
 800b58e:	210a      	movs	r1, #10
 800b590:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b594:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b598:	e7b9      	b.n	800b50e <_strtod_l+0x2c6>
 800b59a:	2a6e      	cmp	r2, #110	; 0x6e
 800b59c:	e7db      	b.n	800b556 <_strtod_l+0x30e>
 800b59e:	4990      	ldr	r1, [pc, #576]	; (800b7e0 <_strtod_l+0x598>)
 800b5a0:	a817      	add	r0, sp, #92	; 0x5c
 800b5a2:	f001 ff0f 	bl	800d3c4 <__match>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	f43f aeb0 	beq.w	800b30c <_strtod_l+0xc4>
 800b5ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5ae:	498d      	ldr	r1, [pc, #564]	; (800b7e4 <_strtod_l+0x59c>)
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	a817      	add	r0, sp, #92	; 0x5c
 800b5b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5b6:	f001 ff05 	bl	800d3c4 <__match>
 800b5ba:	b910      	cbnz	r0, 800b5c2 <_strtod_l+0x37a>
 800b5bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5be:	3301      	adds	r3, #1
 800b5c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b7f4 <_strtod_l+0x5ac>
 800b5c6:	f04f 0a00 	mov.w	sl, #0
 800b5ca:	e681      	b.n	800b2d0 <_strtod_l+0x88>
 800b5cc:	4886      	ldr	r0, [pc, #536]	; (800b7e8 <_strtod_l+0x5a0>)
 800b5ce:	f002 ff6b 	bl	800e4a8 <nan>
 800b5d2:	ec5b ab10 	vmov	sl, fp, d0
 800b5d6:	e67b      	b.n	800b2d0 <_strtod_l+0x88>
 800b5d8:	9b05      	ldr	r3, [sp, #20]
 800b5da:	9807      	ldr	r0, [sp, #28]
 800b5dc:	1af3      	subs	r3, r6, r3
 800b5de:	2f00      	cmp	r7, #0
 800b5e0:	bf08      	it	eq
 800b5e2:	462f      	moveq	r7, r5
 800b5e4:	2d10      	cmp	r5, #16
 800b5e6:	9306      	str	r3, [sp, #24]
 800b5e8:	46a8      	mov	r8, r5
 800b5ea:	bfa8      	it	ge
 800b5ec:	f04f 0810 	movge.w	r8, #16
 800b5f0:	f7f4 ff88 	bl	8000504 <__aeabi_ui2d>
 800b5f4:	2d09      	cmp	r5, #9
 800b5f6:	4682      	mov	sl, r0
 800b5f8:	468b      	mov	fp, r1
 800b5fa:	dd13      	ble.n	800b624 <_strtod_l+0x3dc>
 800b5fc:	4b7b      	ldr	r3, [pc, #492]	; (800b7ec <_strtod_l+0x5a4>)
 800b5fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b602:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b606:	f7f4 fff7 	bl	80005f8 <__aeabi_dmul>
 800b60a:	4682      	mov	sl, r0
 800b60c:	4648      	mov	r0, r9
 800b60e:	468b      	mov	fp, r1
 800b610:	f7f4 ff78 	bl	8000504 <__aeabi_ui2d>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4650      	mov	r0, sl
 800b61a:	4659      	mov	r1, fp
 800b61c:	f7f4 fe36 	bl	800028c <__adddf3>
 800b620:	4682      	mov	sl, r0
 800b622:	468b      	mov	fp, r1
 800b624:	2d0f      	cmp	r5, #15
 800b626:	dc38      	bgt.n	800b69a <_strtod_l+0x452>
 800b628:	9b06      	ldr	r3, [sp, #24]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f43f ae50 	beq.w	800b2d0 <_strtod_l+0x88>
 800b630:	dd24      	ble.n	800b67c <_strtod_l+0x434>
 800b632:	2b16      	cmp	r3, #22
 800b634:	dc0b      	bgt.n	800b64e <_strtod_l+0x406>
 800b636:	496d      	ldr	r1, [pc, #436]	; (800b7ec <_strtod_l+0x5a4>)
 800b638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b640:	4652      	mov	r2, sl
 800b642:	465b      	mov	r3, fp
 800b644:	f7f4 ffd8 	bl	80005f8 <__aeabi_dmul>
 800b648:	4682      	mov	sl, r0
 800b64a:	468b      	mov	fp, r1
 800b64c:	e640      	b.n	800b2d0 <_strtod_l+0x88>
 800b64e:	9a06      	ldr	r2, [sp, #24]
 800b650:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b654:	4293      	cmp	r3, r2
 800b656:	db20      	blt.n	800b69a <_strtod_l+0x452>
 800b658:	4c64      	ldr	r4, [pc, #400]	; (800b7ec <_strtod_l+0x5a4>)
 800b65a:	f1c5 050f 	rsb	r5, r5, #15
 800b65e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b662:	4652      	mov	r2, sl
 800b664:	465b      	mov	r3, fp
 800b666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b66a:	f7f4 ffc5 	bl	80005f8 <__aeabi_dmul>
 800b66e:	9b06      	ldr	r3, [sp, #24]
 800b670:	1b5d      	subs	r5, r3, r5
 800b672:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b676:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b67a:	e7e3      	b.n	800b644 <_strtod_l+0x3fc>
 800b67c:	9b06      	ldr	r3, [sp, #24]
 800b67e:	3316      	adds	r3, #22
 800b680:	db0b      	blt.n	800b69a <_strtod_l+0x452>
 800b682:	9b05      	ldr	r3, [sp, #20]
 800b684:	1b9e      	subs	r6, r3, r6
 800b686:	4b59      	ldr	r3, [pc, #356]	; (800b7ec <_strtod_l+0x5a4>)
 800b688:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b68c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b690:	4650      	mov	r0, sl
 800b692:	4659      	mov	r1, fp
 800b694:	f7f5 f8da 	bl	800084c <__aeabi_ddiv>
 800b698:	e7d6      	b.n	800b648 <_strtod_l+0x400>
 800b69a:	9b06      	ldr	r3, [sp, #24]
 800b69c:	eba5 0808 	sub.w	r8, r5, r8
 800b6a0:	4498      	add	r8, r3
 800b6a2:	f1b8 0f00 	cmp.w	r8, #0
 800b6a6:	dd74      	ble.n	800b792 <_strtod_l+0x54a>
 800b6a8:	f018 030f 	ands.w	r3, r8, #15
 800b6ac:	d00a      	beq.n	800b6c4 <_strtod_l+0x47c>
 800b6ae:	494f      	ldr	r1, [pc, #316]	; (800b7ec <_strtod_l+0x5a4>)
 800b6b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6b4:	4652      	mov	r2, sl
 800b6b6:	465b      	mov	r3, fp
 800b6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6bc:	f7f4 ff9c 	bl	80005f8 <__aeabi_dmul>
 800b6c0:	4682      	mov	sl, r0
 800b6c2:	468b      	mov	fp, r1
 800b6c4:	f038 080f 	bics.w	r8, r8, #15
 800b6c8:	d04f      	beq.n	800b76a <_strtod_l+0x522>
 800b6ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b6ce:	dd22      	ble.n	800b716 <_strtod_l+0x4ce>
 800b6d0:	2500      	movs	r5, #0
 800b6d2:	462e      	mov	r6, r5
 800b6d4:	9507      	str	r5, [sp, #28]
 800b6d6:	9505      	str	r5, [sp, #20]
 800b6d8:	2322      	movs	r3, #34	; 0x22
 800b6da:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b7f4 <_strtod_l+0x5ac>
 800b6de:	6023      	str	r3, [r4, #0]
 800b6e0:	f04f 0a00 	mov.w	sl, #0
 800b6e4:	9b07      	ldr	r3, [sp, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f43f adf2 	beq.w	800b2d0 <_strtod_l+0x88>
 800b6ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f001 ff8c 	bl	800d60c <_Bfree>
 800b6f4:	9905      	ldr	r1, [sp, #20]
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f001 ff88 	bl	800d60c <_Bfree>
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4620      	mov	r0, r4
 800b700:	f001 ff84 	bl	800d60c <_Bfree>
 800b704:	9907      	ldr	r1, [sp, #28]
 800b706:	4620      	mov	r0, r4
 800b708:	f001 ff80 	bl	800d60c <_Bfree>
 800b70c:	4629      	mov	r1, r5
 800b70e:	4620      	mov	r0, r4
 800b710:	f001 ff7c 	bl	800d60c <_Bfree>
 800b714:	e5dc      	b.n	800b2d0 <_strtod_l+0x88>
 800b716:	4b36      	ldr	r3, [pc, #216]	; (800b7f0 <_strtod_l+0x5a8>)
 800b718:	9304      	str	r3, [sp, #16]
 800b71a:	2300      	movs	r3, #0
 800b71c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b720:	4650      	mov	r0, sl
 800b722:	4659      	mov	r1, fp
 800b724:	4699      	mov	r9, r3
 800b726:	f1b8 0f01 	cmp.w	r8, #1
 800b72a:	dc21      	bgt.n	800b770 <_strtod_l+0x528>
 800b72c:	b10b      	cbz	r3, 800b732 <_strtod_l+0x4ea>
 800b72e:	4682      	mov	sl, r0
 800b730:	468b      	mov	fp, r1
 800b732:	4b2f      	ldr	r3, [pc, #188]	; (800b7f0 <_strtod_l+0x5a8>)
 800b734:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b738:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b73c:	4652      	mov	r2, sl
 800b73e:	465b      	mov	r3, fp
 800b740:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b744:	f7f4 ff58 	bl	80005f8 <__aeabi_dmul>
 800b748:	4b2a      	ldr	r3, [pc, #168]	; (800b7f4 <_strtod_l+0x5ac>)
 800b74a:	460a      	mov	r2, r1
 800b74c:	400b      	ands	r3, r1
 800b74e:	492a      	ldr	r1, [pc, #168]	; (800b7f8 <_strtod_l+0x5b0>)
 800b750:	428b      	cmp	r3, r1
 800b752:	4682      	mov	sl, r0
 800b754:	d8bc      	bhi.n	800b6d0 <_strtod_l+0x488>
 800b756:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b75a:	428b      	cmp	r3, r1
 800b75c:	bf86      	itte	hi
 800b75e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b7fc <_strtod_l+0x5b4>
 800b762:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b766:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b76a:	2300      	movs	r3, #0
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	e084      	b.n	800b87a <_strtod_l+0x632>
 800b770:	f018 0f01 	tst.w	r8, #1
 800b774:	d005      	beq.n	800b782 <_strtod_l+0x53a>
 800b776:	9b04      	ldr	r3, [sp, #16]
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f7f4 ff3c 	bl	80005f8 <__aeabi_dmul>
 800b780:	2301      	movs	r3, #1
 800b782:	9a04      	ldr	r2, [sp, #16]
 800b784:	3208      	adds	r2, #8
 800b786:	f109 0901 	add.w	r9, r9, #1
 800b78a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b78e:	9204      	str	r2, [sp, #16]
 800b790:	e7c9      	b.n	800b726 <_strtod_l+0x4de>
 800b792:	d0ea      	beq.n	800b76a <_strtod_l+0x522>
 800b794:	f1c8 0800 	rsb	r8, r8, #0
 800b798:	f018 020f 	ands.w	r2, r8, #15
 800b79c:	d00a      	beq.n	800b7b4 <_strtod_l+0x56c>
 800b79e:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <_strtod_l+0x5a4>)
 800b7a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a4:	4650      	mov	r0, sl
 800b7a6:	4659      	mov	r1, fp
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f7f5 f84e 	bl	800084c <__aeabi_ddiv>
 800b7b0:	4682      	mov	sl, r0
 800b7b2:	468b      	mov	fp, r1
 800b7b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b7b8:	d0d7      	beq.n	800b76a <_strtod_l+0x522>
 800b7ba:	f1b8 0f1f 	cmp.w	r8, #31
 800b7be:	dd1f      	ble.n	800b800 <_strtod_l+0x5b8>
 800b7c0:	2500      	movs	r5, #0
 800b7c2:	462e      	mov	r6, r5
 800b7c4:	9507      	str	r5, [sp, #28]
 800b7c6:	9505      	str	r5, [sp, #20]
 800b7c8:	2322      	movs	r3, #34	; 0x22
 800b7ca:	f04f 0a00 	mov.w	sl, #0
 800b7ce:	f04f 0b00 	mov.w	fp, #0
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	e786      	b.n	800b6e4 <_strtod_l+0x49c>
 800b7d6:	bf00      	nop
 800b7d8:	0800fe49 	.word	0x0800fe49
 800b7dc:	0800fe8c 	.word	0x0800fe8c
 800b7e0:	0800fe41 	.word	0x0800fe41
 800b7e4:	0800ffcc 	.word	0x0800ffcc
 800b7e8:	080102e0 	.word	0x080102e0
 800b7ec:	080101c0 	.word	0x080101c0
 800b7f0:	08010198 	.word	0x08010198
 800b7f4:	7ff00000 	.word	0x7ff00000
 800b7f8:	7ca00000 	.word	0x7ca00000
 800b7fc:	7fefffff 	.word	0x7fefffff
 800b800:	f018 0310 	ands.w	r3, r8, #16
 800b804:	bf18      	it	ne
 800b806:	236a      	movne	r3, #106	; 0x6a
 800b808:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bbb8 <_strtod_l+0x970>
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	4650      	mov	r0, sl
 800b810:	4659      	mov	r1, fp
 800b812:	2300      	movs	r3, #0
 800b814:	f018 0f01 	tst.w	r8, #1
 800b818:	d004      	beq.n	800b824 <_strtod_l+0x5dc>
 800b81a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b81e:	f7f4 feeb 	bl	80005f8 <__aeabi_dmul>
 800b822:	2301      	movs	r3, #1
 800b824:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b828:	f109 0908 	add.w	r9, r9, #8
 800b82c:	d1f2      	bne.n	800b814 <_strtod_l+0x5cc>
 800b82e:	b10b      	cbz	r3, 800b834 <_strtod_l+0x5ec>
 800b830:	4682      	mov	sl, r0
 800b832:	468b      	mov	fp, r1
 800b834:	9b04      	ldr	r3, [sp, #16]
 800b836:	b1c3      	cbz	r3, 800b86a <_strtod_l+0x622>
 800b838:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b83c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b840:	2b00      	cmp	r3, #0
 800b842:	4659      	mov	r1, fp
 800b844:	dd11      	ble.n	800b86a <_strtod_l+0x622>
 800b846:	2b1f      	cmp	r3, #31
 800b848:	f340 8124 	ble.w	800ba94 <_strtod_l+0x84c>
 800b84c:	2b34      	cmp	r3, #52	; 0x34
 800b84e:	bfde      	ittt	le
 800b850:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b854:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b858:	fa03 f202 	lslle.w	r2, r3, r2
 800b85c:	f04f 0a00 	mov.w	sl, #0
 800b860:	bfcc      	ite	gt
 800b862:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b866:	ea02 0b01 	andle.w	fp, r2, r1
 800b86a:	2200      	movs	r2, #0
 800b86c:	2300      	movs	r3, #0
 800b86e:	4650      	mov	r0, sl
 800b870:	4659      	mov	r1, fp
 800b872:	f7f5 f929 	bl	8000ac8 <__aeabi_dcmpeq>
 800b876:	2800      	cmp	r0, #0
 800b878:	d1a2      	bne.n	800b7c0 <_strtod_l+0x578>
 800b87a:	9b07      	ldr	r3, [sp, #28]
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	9908      	ldr	r1, [sp, #32]
 800b880:	462b      	mov	r3, r5
 800b882:	463a      	mov	r2, r7
 800b884:	4620      	mov	r0, r4
 800b886:	f001 ff29 	bl	800d6dc <__s2b>
 800b88a:	9007      	str	r0, [sp, #28]
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f43f af1f 	beq.w	800b6d0 <_strtod_l+0x488>
 800b892:	9b05      	ldr	r3, [sp, #20]
 800b894:	1b9e      	subs	r6, r3, r6
 800b896:	9b06      	ldr	r3, [sp, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bfb4      	ite	lt
 800b89c:	4633      	movlt	r3, r6
 800b89e:	2300      	movge	r3, #0
 800b8a0:	930c      	str	r3, [sp, #48]	; 0x30
 800b8a2:	9b06      	ldr	r3, [sp, #24]
 800b8a4:	2500      	movs	r5, #0
 800b8a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b8aa:	9312      	str	r3, [sp, #72]	; 0x48
 800b8ac:	462e      	mov	r6, r5
 800b8ae:	9b07      	ldr	r3, [sp, #28]
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	6859      	ldr	r1, [r3, #4]
 800b8b4:	f001 fe6a 	bl	800d58c <_Balloc>
 800b8b8:	9005      	str	r0, [sp, #20]
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	f43f af0c 	beq.w	800b6d8 <_strtod_l+0x490>
 800b8c0:	9b07      	ldr	r3, [sp, #28]
 800b8c2:	691a      	ldr	r2, [r3, #16]
 800b8c4:	3202      	adds	r2, #2
 800b8c6:	f103 010c 	add.w	r1, r3, #12
 800b8ca:	0092      	lsls	r2, r2, #2
 800b8cc:	300c      	adds	r0, #12
 800b8ce:	f001 fe42 	bl	800d556 <memcpy>
 800b8d2:	ec4b ab10 	vmov	d0, sl, fp
 800b8d6:	aa1a      	add	r2, sp, #104	; 0x68
 800b8d8:	a919      	add	r1, sp, #100	; 0x64
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f002 fa44 	bl	800dd68 <__d2b>
 800b8e0:	ec4b ab18 	vmov	d8, sl, fp
 800b8e4:	9018      	str	r0, [sp, #96]	; 0x60
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	f43f aef6 	beq.w	800b6d8 <_strtod_l+0x490>
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f001 ff8e 	bl	800d810 <__i2b>
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f43f aeee 	beq.w	800b6d8 <_strtod_l+0x490>
 800b8fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8fe:	9904      	ldr	r1, [sp, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	bfab      	itete	ge
 800b904:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b906:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b908:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b90a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b90e:	bfac      	ite	ge
 800b910:	eb03 0902 	addge.w	r9, r3, r2
 800b914:	1ad7      	sublt	r7, r2, r3
 800b916:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b918:	eba3 0801 	sub.w	r8, r3, r1
 800b91c:	4490      	add	r8, r2
 800b91e:	4ba1      	ldr	r3, [pc, #644]	; (800bba4 <_strtod_l+0x95c>)
 800b920:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b924:	4598      	cmp	r8, r3
 800b926:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b92a:	f280 80c7 	bge.w	800babc <_strtod_l+0x874>
 800b92e:	eba3 0308 	sub.w	r3, r3, r8
 800b932:	2b1f      	cmp	r3, #31
 800b934:	eba2 0203 	sub.w	r2, r2, r3
 800b938:	f04f 0101 	mov.w	r1, #1
 800b93c:	f300 80b1 	bgt.w	800baa2 <_strtod_l+0x85a>
 800b940:	fa01 f303 	lsl.w	r3, r1, r3
 800b944:	930d      	str	r3, [sp, #52]	; 0x34
 800b946:	2300      	movs	r3, #0
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	eb09 0802 	add.w	r8, r9, r2
 800b94e:	9b04      	ldr	r3, [sp, #16]
 800b950:	45c1      	cmp	r9, r8
 800b952:	4417      	add	r7, r2
 800b954:	441f      	add	r7, r3
 800b956:	464b      	mov	r3, r9
 800b958:	bfa8      	it	ge
 800b95a:	4643      	movge	r3, r8
 800b95c:	42bb      	cmp	r3, r7
 800b95e:	bfa8      	it	ge
 800b960:	463b      	movge	r3, r7
 800b962:	2b00      	cmp	r3, #0
 800b964:	bfc2      	ittt	gt
 800b966:	eba8 0803 	subgt.w	r8, r8, r3
 800b96a:	1aff      	subgt	r7, r7, r3
 800b96c:	eba9 0903 	subgt.w	r9, r9, r3
 800b970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b972:	2b00      	cmp	r3, #0
 800b974:	dd17      	ble.n	800b9a6 <_strtod_l+0x75e>
 800b976:	4631      	mov	r1, r6
 800b978:	461a      	mov	r2, r3
 800b97a:	4620      	mov	r0, r4
 800b97c:	f002 f808 	bl	800d990 <__pow5mult>
 800b980:	4606      	mov	r6, r0
 800b982:	2800      	cmp	r0, #0
 800b984:	f43f aea8 	beq.w	800b6d8 <_strtod_l+0x490>
 800b988:	4601      	mov	r1, r0
 800b98a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b98c:	4620      	mov	r0, r4
 800b98e:	f001 ff55 	bl	800d83c <__multiply>
 800b992:	900b      	str	r0, [sp, #44]	; 0x2c
 800b994:	2800      	cmp	r0, #0
 800b996:	f43f ae9f 	beq.w	800b6d8 <_strtod_l+0x490>
 800b99a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b99c:	4620      	mov	r0, r4
 800b99e:	f001 fe35 	bl	800d60c <_Bfree>
 800b9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9a4:	9318      	str	r3, [sp, #96]	; 0x60
 800b9a6:	f1b8 0f00 	cmp.w	r8, #0
 800b9aa:	f300 808c 	bgt.w	800bac6 <_strtod_l+0x87e>
 800b9ae:	9b06      	ldr	r3, [sp, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	dd08      	ble.n	800b9c6 <_strtod_l+0x77e>
 800b9b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9b6:	9905      	ldr	r1, [sp, #20]
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f001 ffe9 	bl	800d990 <__pow5mult>
 800b9be:	9005      	str	r0, [sp, #20]
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	f43f ae89 	beq.w	800b6d8 <_strtod_l+0x490>
 800b9c6:	2f00      	cmp	r7, #0
 800b9c8:	dd08      	ble.n	800b9dc <_strtod_l+0x794>
 800b9ca:	9905      	ldr	r1, [sp, #20]
 800b9cc:	463a      	mov	r2, r7
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f002 f838 	bl	800da44 <__lshift>
 800b9d4:	9005      	str	r0, [sp, #20]
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f43f ae7e 	beq.w	800b6d8 <_strtod_l+0x490>
 800b9dc:	f1b9 0f00 	cmp.w	r9, #0
 800b9e0:	dd08      	ble.n	800b9f4 <_strtod_l+0x7ac>
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	464a      	mov	r2, r9
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f002 f82c 	bl	800da44 <__lshift>
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f43f ae72 	beq.w	800b6d8 <_strtod_l+0x490>
 800b9f4:	9a05      	ldr	r2, [sp, #20]
 800b9f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f002 f8af 	bl	800db5c <__mdiff>
 800b9fe:	4605      	mov	r5, r0
 800ba00:	2800      	cmp	r0, #0
 800ba02:	f43f ae69 	beq.w	800b6d8 <_strtod_l+0x490>
 800ba06:	68c3      	ldr	r3, [r0, #12]
 800ba08:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	60c3      	str	r3, [r0, #12]
 800ba0e:	4631      	mov	r1, r6
 800ba10:	f002 f888 	bl	800db24 <__mcmp>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	da60      	bge.n	800bada <_strtod_l+0x892>
 800ba18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba1a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba1e:	f040 8082 	bne.w	800bb26 <_strtod_l+0x8de>
 800ba22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d17d      	bne.n	800bb26 <_strtod_l+0x8de>
 800ba2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba2e:	0d1b      	lsrs	r3, r3, #20
 800ba30:	051b      	lsls	r3, r3, #20
 800ba32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ba36:	d976      	bls.n	800bb26 <_strtod_l+0x8de>
 800ba38:	696b      	ldr	r3, [r5, #20]
 800ba3a:	b913      	cbnz	r3, 800ba42 <_strtod_l+0x7fa>
 800ba3c:	692b      	ldr	r3, [r5, #16]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	dd71      	ble.n	800bb26 <_strtod_l+0x8de>
 800ba42:	4629      	mov	r1, r5
 800ba44:	2201      	movs	r2, #1
 800ba46:	4620      	mov	r0, r4
 800ba48:	f001 fffc 	bl	800da44 <__lshift>
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	4605      	mov	r5, r0
 800ba50:	f002 f868 	bl	800db24 <__mcmp>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	dd66      	ble.n	800bb26 <_strtod_l+0x8de>
 800ba58:	9904      	ldr	r1, [sp, #16]
 800ba5a:	4a53      	ldr	r2, [pc, #332]	; (800bba8 <_strtod_l+0x960>)
 800ba5c:	465b      	mov	r3, fp
 800ba5e:	2900      	cmp	r1, #0
 800ba60:	f000 8081 	beq.w	800bb66 <_strtod_l+0x91e>
 800ba64:	ea02 010b 	and.w	r1, r2, fp
 800ba68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba6c:	dc7b      	bgt.n	800bb66 <_strtod_l+0x91e>
 800ba6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba72:	f77f aea9 	ble.w	800b7c8 <_strtod_l+0x580>
 800ba76:	4b4d      	ldr	r3, [pc, #308]	; (800bbac <_strtod_l+0x964>)
 800ba78:	4650      	mov	r0, sl
 800ba7a:	4659      	mov	r1, fp
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f7f4 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ba82:	460b      	mov	r3, r1
 800ba84:	4303      	orrs	r3, r0
 800ba86:	bf08      	it	eq
 800ba88:	2322      	moveq	r3, #34	; 0x22
 800ba8a:	4682      	mov	sl, r0
 800ba8c:	468b      	mov	fp, r1
 800ba8e:	bf08      	it	eq
 800ba90:	6023      	streq	r3, [r4, #0]
 800ba92:	e62b      	b.n	800b6ec <_strtod_l+0x4a4>
 800ba94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba98:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9c:	ea03 0a0a 	and.w	sl, r3, sl
 800baa0:	e6e3      	b.n	800b86a <_strtod_l+0x622>
 800baa2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800baa6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800baaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800baae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bab2:	fa01 f308 	lsl.w	r3, r1, r8
 800bab6:	9308      	str	r3, [sp, #32]
 800bab8:	910d      	str	r1, [sp, #52]	; 0x34
 800baba:	e746      	b.n	800b94a <_strtod_l+0x702>
 800babc:	2300      	movs	r3, #0
 800babe:	9308      	str	r3, [sp, #32]
 800bac0:	2301      	movs	r3, #1
 800bac2:	930d      	str	r3, [sp, #52]	; 0x34
 800bac4:	e741      	b.n	800b94a <_strtod_l+0x702>
 800bac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bac8:	4642      	mov	r2, r8
 800baca:	4620      	mov	r0, r4
 800bacc:	f001 ffba 	bl	800da44 <__lshift>
 800bad0:	9018      	str	r0, [sp, #96]	; 0x60
 800bad2:	2800      	cmp	r0, #0
 800bad4:	f47f af6b 	bne.w	800b9ae <_strtod_l+0x766>
 800bad8:	e5fe      	b.n	800b6d8 <_strtod_l+0x490>
 800bada:	465f      	mov	r7, fp
 800badc:	d16e      	bne.n	800bbbc <_strtod_l+0x974>
 800bade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bae0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bae4:	b342      	cbz	r2, 800bb38 <_strtod_l+0x8f0>
 800bae6:	4a32      	ldr	r2, [pc, #200]	; (800bbb0 <_strtod_l+0x968>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d128      	bne.n	800bb3e <_strtod_l+0x8f6>
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	4651      	mov	r1, sl
 800baf0:	b1eb      	cbz	r3, 800bb2e <_strtod_l+0x8e6>
 800baf2:	4b2d      	ldr	r3, [pc, #180]	; (800bba8 <_strtod_l+0x960>)
 800baf4:	403b      	ands	r3, r7
 800baf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bafa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bafe:	d819      	bhi.n	800bb34 <_strtod_l+0x8ec>
 800bb00:	0d1b      	lsrs	r3, r3, #20
 800bb02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb06:	fa02 f303 	lsl.w	r3, r2, r3
 800bb0a:	4299      	cmp	r1, r3
 800bb0c:	d117      	bne.n	800bb3e <_strtod_l+0x8f6>
 800bb0e:	4b29      	ldr	r3, [pc, #164]	; (800bbb4 <_strtod_l+0x96c>)
 800bb10:	429f      	cmp	r7, r3
 800bb12:	d102      	bne.n	800bb1a <_strtod_l+0x8d2>
 800bb14:	3101      	adds	r1, #1
 800bb16:	f43f addf 	beq.w	800b6d8 <_strtod_l+0x490>
 800bb1a:	4b23      	ldr	r3, [pc, #140]	; (800bba8 <_strtod_l+0x960>)
 800bb1c:	403b      	ands	r3, r7
 800bb1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bb22:	f04f 0a00 	mov.w	sl, #0
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1a4      	bne.n	800ba76 <_strtod_l+0x82e>
 800bb2c:	e5de      	b.n	800b6ec <_strtod_l+0x4a4>
 800bb2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb32:	e7ea      	b.n	800bb0a <_strtod_l+0x8c2>
 800bb34:	4613      	mov	r3, r2
 800bb36:	e7e8      	b.n	800bb0a <_strtod_l+0x8c2>
 800bb38:	ea53 030a 	orrs.w	r3, r3, sl
 800bb3c:	d08c      	beq.n	800ba58 <_strtod_l+0x810>
 800bb3e:	9b08      	ldr	r3, [sp, #32]
 800bb40:	b1db      	cbz	r3, 800bb7a <_strtod_l+0x932>
 800bb42:	423b      	tst	r3, r7
 800bb44:	d0ef      	beq.n	800bb26 <_strtod_l+0x8de>
 800bb46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb48:	9a04      	ldr	r2, [sp, #16]
 800bb4a:	4650      	mov	r0, sl
 800bb4c:	4659      	mov	r1, fp
 800bb4e:	b1c3      	cbz	r3, 800bb82 <_strtod_l+0x93a>
 800bb50:	f7ff fb5c 	bl	800b20c <sulp>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	ec51 0b18 	vmov	r0, r1, d8
 800bb5c:	f7f4 fb96 	bl	800028c <__adddf3>
 800bb60:	4682      	mov	sl, r0
 800bb62:	468b      	mov	fp, r1
 800bb64:	e7df      	b.n	800bb26 <_strtod_l+0x8de>
 800bb66:	4013      	ands	r3, r2
 800bb68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb74:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bb78:	e7d5      	b.n	800bb26 <_strtod_l+0x8de>
 800bb7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb7c:	ea13 0f0a 	tst.w	r3, sl
 800bb80:	e7e0      	b.n	800bb44 <_strtod_l+0x8fc>
 800bb82:	f7ff fb43 	bl	800b20c <sulp>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	ec51 0b18 	vmov	r0, r1, d8
 800bb8e:	f7f4 fb7b 	bl	8000288 <__aeabi_dsub>
 800bb92:	2200      	movs	r2, #0
 800bb94:	2300      	movs	r3, #0
 800bb96:	4682      	mov	sl, r0
 800bb98:	468b      	mov	fp, r1
 800bb9a:	f7f4 ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d0c1      	beq.n	800bb26 <_strtod_l+0x8de>
 800bba2:	e611      	b.n	800b7c8 <_strtod_l+0x580>
 800bba4:	fffffc02 	.word	0xfffffc02
 800bba8:	7ff00000 	.word	0x7ff00000
 800bbac:	39500000 	.word	0x39500000
 800bbb0:	000fffff 	.word	0x000fffff
 800bbb4:	7fefffff 	.word	0x7fefffff
 800bbb8:	0800fea0 	.word	0x0800fea0
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f002 f92e 	bl	800de20 <__ratio>
 800bbc4:	ec59 8b10 	vmov	r8, r9, d0
 800bbc8:	ee10 0a10 	vmov	r0, s0
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bbd2:	4649      	mov	r1, r9
 800bbd4:	f7f4 ff8c 	bl	8000af0 <__aeabi_dcmple>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d07a      	beq.n	800bcd2 <_strtod_l+0xa8a>
 800bbdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d04a      	beq.n	800bc78 <_strtod_l+0xa30>
 800bbe2:	4b95      	ldr	r3, [pc, #596]	; (800be38 <_strtod_l+0xbf0>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bbea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800be38 <_strtod_l+0xbf0>
 800bbee:	f04f 0800 	mov.w	r8, #0
 800bbf2:	4b92      	ldr	r3, [pc, #584]	; (800be3c <_strtod_l+0xbf4>)
 800bbf4:	403b      	ands	r3, r7
 800bbf6:	930d      	str	r3, [sp, #52]	; 0x34
 800bbf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbfa:	4b91      	ldr	r3, [pc, #580]	; (800be40 <_strtod_l+0xbf8>)
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	f040 80b0 	bne.w	800bd62 <_strtod_l+0xb1a>
 800bc02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bc0a:	ec4b ab10 	vmov	d0, sl, fp
 800bc0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc12:	f002 f82d 	bl	800dc70 <__ulp>
 800bc16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc1a:	ec53 2b10 	vmov	r2, r3, d0
 800bc1e:	f7f4 fceb 	bl	80005f8 <__aeabi_dmul>
 800bc22:	4652      	mov	r2, sl
 800bc24:	465b      	mov	r3, fp
 800bc26:	f7f4 fb31 	bl	800028c <__adddf3>
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4983      	ldr	r1, [pc, #524]	; (800be3c <_strtod_l+0xbf4>)
 800bc2e:	4a85      	ldr	r2, [pc, #532]	; (800be44 <_strtod_l+0xbfc>)
 800bc30:	4019      	ands	r1, r3
 800bc32:	4291      	cmp	r1, r2
 800bc34:	4682      	mov	sl, r0
 800bc36:	d960      	bls.n	800bcfa <_strtod_l+0xab2>
 800bc38:	ee18 3a90 	vmov	r3, s17
 800bc3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d104      	bne.n	800bc4e <_strtod_l+0xa06>
 800bc44:	ee18 3a10 	vmov	r3, s16
 800bc48:	3301      	adds	r3, #1
 800bc4a:	f43f ad45 	beq.w	800b6d8 <_strtod_l+0x490>
 800bc4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800be50 <_strtod_l+0xc08>
 800bc52:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bc56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f001 fcd7 	bl	800d60c <_Bfree>
 800bc5e:	9905      	ldr	r1, [sp, #20]
 800bc60:	4620      	mov	r0, r4
 800bc62:	f001 fcd3 	bl	800d60c <_Bfree>
 800bc66:	4631      	mov	r1, r6
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f001 fccf 	bl	800d60c <_Bfree>
 800bc6e:	4629      	mov	r1, r5
 800bc70:	4620      	mov	r0, r4
 800bc72:	f001 fccb 	bl	800d60c <_Bfree>
 800bc76:	e61a      	b.n	800b8ae <_strtod_l+0x666>
 800bc78:	f1ba 0f00 	cmp.w	sl, #0
 800bc7c:	d11b      	bne.n	800bcb6 <_strtod_l+0xa6e>
 800bc7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc82:	b9f3      	cbnz	r3, 800bcc2 <_strtod_l+0xa7a>
 800bc84:	4b6c      	ldr	r3, [pc, #432]	; (800be38 <_strtod_l+0xbf0>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	4640      	mov	r0, r8
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	f7f4 ff26 	bl	8000adc <__aeabi_dcmplt>
 800bc90:	b9d0      	cbnz	r0, 800bcc8 <_strtod_l+0xa80>
 800bc92:	4640      	mov	r0, r8
 800bc94:	4649      	mov	r1, r9
 800bc96:	4b6c      	ldr	r3, [pc, #432]	; (800be48 <_strtod_l+0xc00>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f7f4 fcad 	bl	80005f8 <__aeabi_dmul>
 800bc9e:	4680      	mov	r8, r0
 800bca0:	4689      	mov	r9, r1
 800bca2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bca6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bcaa:	9315      	str	r3, [sp, #84]	; 0x54
 800bcac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bcb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bcb4:	e79d      	b.n	800bbf2 <_strtod_l+0x9aa>
 800bcb6:	f1ba 0f01 	cmp.w	sl, #1
 800bcba:	d102      	bne.n	800bcc2 <_strtod_l+0xa7a>
 800bcbc:	2f00      	cmp	r7, #0
 800bcbe:	f43f ad83 	beq.w	800b7c8 <_strtod_l+0x580>
 800bcc2:	4b62      	ldr	r3, [pc, #392]	; (800be4c <_strtod_l+0xc04>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	e78e      	b.n	800bbe6 <_strtod_l+0x99e>
 800bcc8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800be48 <_strtod_l+0xc00>
 800bccc:	f04f 0800 	mov.w	r8, #0
 800bcd0:	e7e7      	b.n	800bca2 <_strtod_l+0xa5a>
 800bcd2:	4b5d      	ldr	r3, [pc, #372]	; (800be48 <_strtod_l+0xc00>)
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	4649      	mov	r1, r9
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f7f4 fc8d 	bl	80005f8 <__aeabi_dmul>
 800bcde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bce0:	4680      	mov	r8, r0
 800bce2:	4689      	mov	r9, r1
 800bce4:	b933      	cbnz	r3, 800bcf4 <_strtod_l+0xaac>
 800bce6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcea:	900e      	str	r0, [sp, #56]	; 0x38
 800bcec:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bcf2:	e7dd      	b.n	800bcb0 <_strtod_l+0xa68>
 800bcf4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bcf8:	e7f9      	b.n	800bcee <_strtod_l+0xaa6>
 800bcfa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bcfe:	9b04      	ldr	r3, [sp, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1a8      	bne.n	800bc56 <_strtod_l+0xa0e>
 800bd04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd0a:	0d1b      	lsrs	r3, r3, #20
 800bd0c:	051b      	lsls	r3, r3, #20
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d1a1      	bne.n	800bc56 <_strtod_l+0xa0e>
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 ffcf 	bl	8000cb8 <__aeabi_d2lz>
 800bd1a:	f7f4 fc3f 	bl	800059c <__aeabi_l2d>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 faaf 	bl	8000288 <__aeabi_dsub>
 800bd2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd30:	ea43 030a 	orr.w	r3, r3, sl
 800bd34:	4313      	orrs	r3, r2
 800bd36:	4680      	mov	r8, r0
 800bd38:	4689      	mov	r9, r1
 800bd3a:	d055      	beq.n	800bde8 <_strtod_l+0xba0>
 800bd3c:	a336      	add	r3, pc, #216	; (adr r3, 800be18 <_strtod_l+0xbd0>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	f7f4 fecb 	bl	8000adc <__aeabi_dcmplt>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f47f acd0 	bne.w	800b6ec <_strtod_l+0x4a4>
 800bd4c:	a334      	add	r3, pc, #208	; (adr r3, 800be20 <_strtod_l+0xbd8>)
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	4640      	mov	r0, r8
 800bd54:	4649      	mov	r1, r9
 800bd56:	f7f4 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f43f af7b 	beq.w	800bc56 <_strtod_l+0xa0e>
 800bd60:	e4c4      	b.n	800b6ec <_strtod_l+0x4a4>
 800bd62:	9b04      	ldr	r3, [sp, #16]
 800bd64:	b333      	cbz	r3, 800bdb4 <_strtod_l+0xb6c>
 800bd66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd6c:	d822      	bhi.n	800bdb4 <_strtod_l+0xb6c>
 800bd6e:	a32e      	add	r3, pc, #184	; (adr r3, 800be28 <_strtod_l+0xbe0>)
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	4640      	mov	r0, r8
 800bd76:	4649      	mov	r1, r9
 800bd78:	f7f4 feba 	bl	8000af0 <__aeabi_dcmple>
 800bd7c:	b1a0      	cbz	r0, 800bda8 <_strtod_l+0xb60>
 800bd7e:	4649      	mov	r1, r9
 800bd80:	4640      	mov	r0, r8
 800bd82:	f7f4 ff11 	bl	8000ba8 <__aeabi_d2uiz>
 800bd86:	2801      	cmp	r0, #1
 800bd88:	bf38      	it	cc
 800bd8a:	2001      	movcc	r0, #1
 800bd8c:	f7f4 fbba 	bl	8000504 <__aeabi_ui2d>
 800bd90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd92:	4680      	mov	r8, r0
 800bd94:	4689      	mov	r9, r1
 800bd96:	bb23      	cbnz	r3, 800bde2 <_strtod_l+0xb9a>
 800bd98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd9c:	9010      	str	r0, [sp, #64]	; 0x40
 800bd9e:	9311      	str	r3, [sp, #68]	; 0x44
 800bda0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bda4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bdb0:	1a9b      	subs	r3, r3, r2
 800bdb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bdb8:	eeb0 0a48 	vmov.f32	s0, s16
 800bdbc:	eef0 0a68 	vmov.f32	s1, s17
 800bdc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bdc4:	f001 ff54 	bl	800dc70 <__ulp>
 800bdc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bdcc:	ec53 2b10 	vmov	r2, r3, d0
 800bdd0:	f7f4 fc12 	bl	80005f8 <__aeabi_dmul>
 800bdd4:	ec53 2b18 	vmov	r2, r3, d8
 800bdd8:	f7f4 fa58 	bl	800028c <__adddf3>
 800bddc:	4682      	mov	sl, r0
 800bdde:	468b      	mov	fp, r1
 800bde0:	e78d      	b.n	800bcfe <_strtod_l+0xab6>
 800bde2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bde6:	e7db      	b.n	800bda0 <_strtod_l+0xb58>
 800bde8:	a311      	add	r3, pc, #68	; (adr r3, 800be30 <_strtod_l+0xbe8>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fe75 	bl	8000adc <__aeabi_dcmplt>
 800bdf2:	e7b2      	b.n	800bd5a <_strtod_l+0xb12>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	930a      	str	r3, [sp, #40]	; 0x28
 800bdf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bdfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	f7ff ba6b 	b.w	800b2d8 <_strtod_l+0x90>
 800be02:	2a65      	cmp	r2, #101	; 0x65
 800be04:	f43f ab5f 	beq.w	800b4c6 <_strtod_l+0x27e>
 800be08:	2a45      	cmp	r2, #69	; 0x45
 800be0a:	f43f ab5c 	beq.w	800b4c6 <_strtod_l+0x27e>
 800be0e:	2301      	movs	r3, #1
 800be10:	f7ff bb94 	b.w	800b53c <_strtod_l+0x2f4>
 800be14:	f3af 8000 	nop.w
 800be18:	94a03595 	.word	0x94a03595
 800be1c:	3fdfffff 	.word	0x3fdfffff
 800be20:	35afe535 	.word	0x35afe535
 800be24:	3fe00000 	.word	0x3fe00000
 800be28:	ffc00000 	.word	0xffc00000
 800be2c:	41dfffff 	.word	0x41dfffff
 800be30:	94a03595 	.word	0x94a03595
 800be34:	3fcfffff 	.word	0x3fcfffff
 800be38:	3ff00000 	.word	0x3ff00000
 800be3c:	7ff00000 	.word	0x7ff00000
 800be40:	7fe00000 	.word	0x7fe00000
 800be44:	7c9fffff 	.word	0x7c9fffff
 800be48:	3fe00000 	.word	0x3fe00000
 800be4c:	bff00000 	.word	0xbff00000
 800be50:	7fefffff 	.word	0x7fefffff

0800be54 <_strtod_r>:
 800be54:	4b01      	ldr	r3, [pc, #4]	; (800be5c <_strtod_r+0x8>)
 800be56:	f7ff b9f7 	b.w	800b248 <_strtod_l>
 800be5a:	bf00      	nop
 800be5c:	20000094 	.word	0x20000094

0800be60 <_strtol_l.constprop.0>:
 800be60:	2b01      	cmp	r3, #1
 800be62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be66:	d001      	beq.n	800be6c <_strtol_l.constprop.0+0xc>
 800be68:	2b24      	cmp	r3, #36	; 0x24
 800be6a:	d906      	bls.n	800be7a <_strtol_l.constprop.0+0x1a>
 800be6c:	f7fe f9e4 	bl	800a238 <__errno>
 800be70:	2316      	movs	r3, #22
 800be72:	6003      	str	r3, [r0, #0]
 800be74:	2000      	movs	r0, #0
 800be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf60 <_strtol_l.constprop.0+0x100>
 800be7e:	460d      	mov	r5, r1
 800be80:	462e      	mov	r6, r5
 800be82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be86:	f814 700c 	ldrb.w	r7, [r4, ip]
 800be8a:	f017 0708 	ands.w	r7, r7, #8
 800be8e:	d1f7      	bne.n	800be80 <_strtol_l.constprop.0+0x20>
 800be90:	2c2d      	cmp	r4, #45	; 0x2d
 800be92:	d132      	bne.n	800befa <_strtol_l.constprop.0+0x9a>
 800be94:	782c      	ldrb	r4, [r5, #0]
 800be96:	2701      	movs	r7, #1
 800be98:	1cb5      	adds	r5, r6, #2
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d05b      	beq.n	800bf56 <_strtol_l.constprop.0+0xf6>
 800be9e:	2b10      	cmp	r3, #16
 800bea0:	d109      	bne.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bea2:	2c30      	cmp	r4, #48	; 0x30
 800bea4:	d107      	bne.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bea6:	782c      	ldrb	r4, [r5, #0]
 800bea8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800beac:	2c58      	cmp	r4, #88	; 0x58
 800beae:	d14d      	bne.n	800bf4c <_strtol_l.constprop.0+0xec>
 800beb0:	786c      	ldrb	r4, [r5, #1]
 800beb2:	2310      	movs	r3, #16
 800beb4:	3502      	adds	r5, #2
 800beb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800beba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bebe:	f04f 0c00 	mov.w	ip, #0
 800bec2:	fbb8 f9f3 	udiv	r9, r8, r3
 800bec6:	4666      	mov	r6, ip
 800bec8:	fb03 8a19 	mls	sl, r3, r9, r8
 800becc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bed0:	f1be 0f09 	cmp.w	lr, #9
 800bed4:	d816      	bhi.n	800bf04 <_strtol_l.constprop.0+0xa4>
 800bed6:	4674      	mov	r4, lr
 800bed8:	42a3      	cmp	r3, r4
 800beda:	dd24      	ble.n	800bf26 <_strtol_l.constprop.0+0xc6>
 800bedc:	f1bc 0f00 	cmp.w	ip, #0
 800bee0:	db1e      	blt.n	800bf20 <_strtol_l.constprop.0+0xc0>
 800bee2:	45b1      	cmp	r9, r6
 800bee4:	d31c      	bcc.n	800bf20 <_strtol_l.constprop.0+0xc0>
 800bee6:	d101      	bne.n	800beec <_strtol_l.constprop.0+0x8c>
 800bee8:	45a2      	cmp	sl, r4
 800beea:	db19      	blt.n	800bf20 <_strtol_l.constprop.0+0xc0>
 800beec:	fb06 4603 	mla	r6, r6, r3, r4
 800bef0:	f04f 0c01 	mov.w	ip, #1
 800bef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bef8:	e7e8      	b.n	800becc <_strtol_l.constprop.0+0x6c>
 800befa:	2c2b      	cmp	r4, #43	; 0x2b
 800befc:	bf04      	itt	eq
 800befe:	782c      	ldrbeq	r4, [r5, #0]
 800bf00:	1cb5      	addeq	r5, r6, #2
 800bf02:	e7ca      	b.n	800be9a <_strtol_l.constprop.0+0x3a>
 800bf04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bf08:	f1be 0f19 	cmp.w	lr, #25
 800bf0c:	d801      	bhi.n	800bf12 <_strtol_l.constprop.0+0xb2>
 800bf0e:	3c37      	subs	r4, #55	; 0x37
 800bf10:	e7e2      	b.n	800bed8 <_strtol_l.constprop.0+0x78>
 800bf12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bf16:	f1be 0f19 	cmp.w	lr, #25
 800bf1a:	d804      	bhi.n	800bf26 <_strtol_l.constprop.0+0xc6>
 800bf1c:	3c57      	subs	r4, #87	; 0x57
 800bf1e:	e7db      	b.n	800bed8 <_strtol_l.constprop.0+0x78>
 800bf20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bf24:	e7e6      	b.n	800bef4 <_strtol_l.constprop.0+0x94>
 800bf26:	f1bc 0f00 	cmp.w	ip, #0
 800bf2a:	da05      	bge.n	800bf38 <_strtol_l.constprop.0+0xd8>
 800bf2c:	2322      	movs	r3, #34	; 0x22
 800bf2e:	6003      	str	r3, [r0, #0]
 800bf30:	4646      	mov	r6, r8
 800bf32:	b942      	cbnz	r2, 800bf46 <_strtol_l.constprop.0+0xe6>
 800bf34:	4630      	mov	r0, r6
 800bf36:	e79e      	b.n	800be76 <_strtol_l.constprop.0+0x16>
 800bf38:	b107      	cbz	r7, 800bf3c <_strtol_l.constprop.0+0xdc>
 800bf3a:	4276      	negs	r6, r6
 800bf3c:	2a00      	cmp	r2, #0
 800bf3e:	d0f9      	beq.n	800bf34 <_strtol_l.constprop.0+0xd4>
 800bf40:	f1bc 0f00 	cmp.w	ip, #0
 800bf44:	d000      	beq.n	800bf48 <_strtol_l.constprop.0+0xe8>
 800bf46:	1e69      	subs	r1, r5, #1
 800bf48:	6011      	str	r1, [r2, #0]
 800bf4a:	e7f3      	b.n	800bf34 <_strtol_l.constprop.0+0xd4>
 800bf4c:	2430      	movs	r4, #48	; 0x30
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1b1      	bne.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bf52:	2308      	movs	r3, #8
 800bf54:	e7af      	b.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bf56:	2c30      	cmp	r4, #48	; 0x30
 800bf58:	d0a5      	beq.n	800bea6 <_strtol_l.constprop.0+0x46>
 800bf5a:	230a      	movs	r3, #10
 800bf5c:	e7ab      	b.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bf5e:	bf00      	nop
 800bf60:	0800fec9 	.word	0x0800fec9

0800bf64 <_strtol_r>:
 800bf64:	f7ff bf7c 	b.w	800be60 <_strtol_l.constprop.0>

0800bf68 <quorem>:
 800bf68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6c:	6903      	ldr	r3, [r0, #16]
 800bf6e:	690c      	ldr	r4, [r1, #16]
 800bf70:	42a3      	cmp	r3, r4
 800bf72:	4607      	mov	r7, r0
 800bf74:	f2c0 8081 	blt.w	800c07a <quorem+0x112>
 800bf78:	3c01      	subs	r4, #1
 800bf7a:	f101 0814 	add.w	r8, r1, #20
 800bf7e:	f100 0514 	add.w	r5, r0, #20
 800bf82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf90:	3301      	adds	r3, #1
 800bf92:	429a      	cmp	r2, r3
 800bf94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfa0:	d331      	bcc.n	800c006 <quorem+0x9e>
 800bfa2:	f04f 0e00 	mov.w	lr, #0
 800bfa6:	4640      	mov	r0, r8
 800bfa8:	46ac      	mov	ip, r5
 800bfaa:	46f2      	mov	sl, lr
 800bfac:	f850 2b04 	ldr.w	r2, [r0], #4
 800bfb0:	b293      	uxth	r3, r2
 800bfb2:	fb06 e303 	mla	r3, r6, r3, lr
 800bfb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	ebaa 0303 	sub.w	r3, sl, r3
 800bfc0:	f8dc a000 	ldr.w	sl, [ip]
 800bfc4:	0c12      	lsrs	r2, r2, #16
 800bfc6:	fa13 f38a 	uxtah	r3, r3, sl
 800bfca:	fb06 e202 	mla	r2, r6, r2, lr
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	9b00      	ldr	r3, [sp, #0]
 800bfd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bfd6:	b292      	uxth	r2, r2
 800bfd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bfdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfe0:	f8bd 3000 	ldrh.w	r3, [sp]
 800bfe4:	4581      	cmp	r9, r0
 800bfe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfea:	f84c 3b04 	str.w	r3, [ip], #4
 800bfee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bff2:	d2db      	bcs.n	800bfac <quorem+0x44>
 800bff4:	f855 300b 	ldr.w	r3, [r5, fp]
 800bff8:	b92b      	cbnz	r3, 800c006 <quorem+0x9e>
 800bffa:	9b01      	ldr	r3, [sp, #4]
 800bffc:	3b04      	subs	r3, #4
 800bffe:	429d      	cmp	r5, r3
 800c000:	461a      	mov	r2, r3
 800c002:	d32e      	bcc.n	800c062 <quorem+0xfa>
 800c004:	613c      	str	r4, [r7, #16]
 800c006:	4638      	mov	r0, r7
 800c008:	f001 fd8c 	bl	800db24 <__mcmp>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	db24      	blt.n	800c05a <quorem+0xf2>
 800c010:	3601      	adds	r6, #1
 800c012:	4628      	mov	r0, r5
 800c014:	f04f 0c00 	mov.w	ip, #0
 800c018:	f858 2b04 	ldr.w	r2, [r8], #4
 800c01c:	f8d0 e000 	ldr.w	lr, [r0]
 800c020:	b293      	uxth	r3, r2
 800c022:	ebac 0303 	sub.w	r3, ip, r3
 800c026:	0c12      	lsrs	r2, r2, #16
 800c028:	fa13 f38e 	uxtah	r3, r3, lr
 800c02c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c030:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c034:	b29b      	uxth	r3, r3
 800c036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c03a:	45c1      	cmp	r9, r8
 800c03c:	f840 3b04 	str.w	r3, [r0], #4
 800c040:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c044:	d2e8      	bcs.n	800c018 <quorem+0xb0>
 800c046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c04a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c04e:	b922      	cbnz	r2, 800c05a <quorem+0xf2>
 800c050:	3b04      	subs	r3, #4
 800c052:	429d      	cmp	r5, r3
 800c054:	461a      	mov	r2, r3
 800c056:	d30a      	bcc.n	800c06e <quorem+0x106>
 800c058:	613c      	str	r4, [r7, #16]
 800c05a:	4630      	mov	r0, r6
 800c05c:	b003      	add	sp, #12
 800c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c062:	6812      	ldr	r2, [r2, #0]
 800c064:	3b04      	subs	r3, #4
 800c066:	2a00      	cmp	r2, #0
 800c068:	d1cc      	bne.n	800c004 <quorem+0x9c>
 800c06a:	3c01      	subs	r4, #1
 800c06c:	e7c7      	b.n	800bffe <quorem+0x96>
 800c06e:	6812      	ldr	r2, [r2, #0]
 800c070:	3b04      	subs	r3, #4
 800c072:	2a00      	cmp	r2, #0
 800c074:	d1f0      	bne.n	800c058 <quorem+0xf0>
 800c076:	3c01      	subs	r4, #1
 800c078:	e7eb      	b.n	800c052 <quorem+0xea>
 800c07a:	2000      	movs	r0, #0
 800c07c:	e7ee      	b.n	800c05c <quorem+0xf4>
	...

0800c080 <_dtoa_r>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	ed2d 8b04 	vpush	{d8-d9}
 800c088:	ec57 6b10 	vmov	r6, r7, d0
 800c08c:	b093      	sub	sp, #76	; 0x4c
 800c08e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c090:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c094:	9106      	str	r1, [sp, #24]
 800c096:	ee10 aa10 	vmov	sl, s0
 800c09a:	4604      	mov	r4, r0
 800c09c:	9209      	str	r2, [sp, #36]	; 0x24
 800c09e:	930c      	str	r3, [sp, #48]	; 0x30
 800c0a0:	46bb      	mov	fp, r7
 800c0a2:	b975      	cbnz	r5, 800c0c2 <_dtoa_r+0x42>
 800c0a4:	2010      	movs	r0, #16
 800c0a6:	f7fe f8f1 	bl	800a28c <malloc>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	6260      	str	r0, [r4, #36]	; 0x24
 800c0ae:	b920      	cbnz	r0, 800c0ba <_dtoa_r+0x3a>
 800c0b0:	4ba7      	ldr	r3, [pc, #668]	; (800c350 <_dtoa_r+0x2d0>)
 800c0b2:	21ea      	movs	r1, #234	; 0xea
 800c0b4:	48a7      	ldr	r0, [pc, #668]	; (800c354 <_dtoa_r+0x2d4>)
 800c0b6:	f002 fb37 	bl	800e728 <__assert_func>
 800c0ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c0be:	6005      	str	r5, [r0, #0]
 800c0c0:	60c5      	str	r5, [r0, #12]
 800c0c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0c4:	6819      	ldr	r1, [r3, #0]
 800c0c6:	b151      	cbz	r1, 800c0de <_dtoa_r+0x5e>
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	604a      	str	r2, [r1, #4]
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	4093      	lsls	r3, r2
 800c0d0:	608b      	str	r3, [r1, #8]
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f001 fa9a 	bl	800d60c <_Bfree>
 800c0d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	1e3b      	subs	r3, r7, #0
 800c0e0:	bfaa      	itet	ge
 800c0e2:	2300      	movge	r3, #0
 800c0e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c0e8:	f8c8 3000 	strge.w	r3, [r8]
 800c0ec:	4b9a      	ldr	r3, [pc, #616]	; (800c358 <_dtoa_r+0x2d8>)
 800c0ee:	bfbc      	itt	lt
 800c0f0:	2201      	movlt	r2, #1
 800c0f2:	f8c8 2000 	strlt.w	r2, [r8]
 800c0f6:	ea33 030b 	bics.w	r3, r3, fp
 800c0fa:	d11b      	bne.n	800c134 <_dtoa_r+0xb4>
 800c0fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c108:	4333      	orrs	r3, r6
 800c10a:	f000 8592 	beq.w	800cc32 <_dtoa_r+0xbb2>
 800c10e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c110:	b963      	cbnz	r3, 800c12c <_dtoa_r+0xac>
 800c112:	4b92      	ldr	r3, [pc, #584]	; (800c35c <_dtoa_r+0x2dc>)
 800c114:	e022      	b.n	800c15c <_dtoa_r+0xdc>
 800c116:	4b92      	ldr	r3, [pc, #584]	; (800c360 <_dtoa_r+0x2e0>)
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	3308      	adds	r3, #8
 800c11c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	9801      	ldr	r0, [sp, #4]
 800c122:	b013      	add	sp, #76	; 0x4c
 800c124:	ecbd 8b04 	vpop	{d8-d9}
 800c128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c12c:	4b8b      	ldr	r3, [pc, #556]	; (800c35c <_dtoa_r+0x2dc>)
 800c12e:	9301      	str	r3, [sp, #4]
 800c130:	3303      	adds	r3, #3
 800c132:	e7f3      	b.n	800c11c <_dtoa_r+0x9c>
 800c134:	2200      	movs	r2, #0
 800c136:	2300      	movs	r3, #0
 800c138:	4650      	mov	r0, sl
 800c13a:	4659      	mov	r1, fp
 800c13c:	f7f4 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c140:	ec4b ab19 	vmov	d9, sl, fp
 800c144:	4680      	mov	r8, r0
 800c146:	b158      	cbz	r0, 800c160 <_dtoa_r+0xe0>
 800c148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c14a:	2301      	movs	r3, #1
 800c14c:	6013      	str	r3, [r2, #0]
 800c14e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 856b 	beq.w	800cc2c <_dtoa_r+0xbac>
 800c156:	4883      	ldr	r0, [pc, #524]	; (800c364 <_dtoa_r+0x2e4>)
 800c158:	6018      	str	r0, [r3, #0]
 800c15a:	1e43      	subs	r3, r0, #1
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	e7df      	b.n	800c120 <_dtoa_r+0xa0>
 800c160:	ec4b ab10 	vmov	d0, sl, fp
 800c164:	aa10      	add	r2, sp, #64	; 0x40
 800c166:	a911      	add	r1, sp, #68	; 0x44
 800c168:	4620      	mov	r0, r4
 800c16a:	f001 fdfd 	bl	800dd68 <__d2b>
 800c16e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c172:	ee08 0a10 	vmov	s16, r0
 800c176:	2d00      	cmp	r5, #0
 800c178:	f000 8084 	beq.w	800c284 <_dtoa_r+0x204>
 800c17c:	ee19 3a90 	vmov	r3, s19
 800c180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c184:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c188:	4656      	mov	r6, sl
 800c18a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c18e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c192:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c196:	4b74      	ldr	r3, [pc, #464]	; (800c368 <_dtoa_r+0x2e8>)
 800c198:	2200      	movs	r2, #0
 800c19a:	4630      	mov	r0, r6
 800c19c:	4639      	mov	r1, r7
 800c19e:	f7f4 f873 	bl	8000288 <__aeabi_dsub>
 800c1a2:	a365      	add	r3, pc, #404	; (adr r3, 800c338 <_dtoa_r+0x2b8>)
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	f7f4 fa26 	bl	80005f8 <__aeabi_dmul>
 800c1ac:	a364      	add	r3, pc, #400	; (adr r3, 800c340 <_dtoa_r+0x2c0>)
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	f7f4 f86b 	bl	800028c <__adddf3>
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	460f      	mov	r7, r1
 800c1bc:	f7f4 f9b2 	bl	8000524 <__aeabi_i2d>
 800c1c0:	a361      	add	r3, pc, #388	; (adr r3, 800c348 <_dtoa_r+0x2c8>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	f7f4 f85b 	bl	800028c <__adddf3>
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460f      	mov	r7, r1
 800c1da:	f7f4 fcbd 	bl	8000b58 <__aeabi_d2iz>
 800c1de:	2200      	movs	r2, #0
 800c1e0:	9000      	str	r0, [sp, #0]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	f7f4 fc78 	bl	8000adc <__aeabi_dcmplt>
 800c1ec:	b150      	cbz	r0, 800c204 <_dtoa_r+0x184>
 800c1ee:	9800      	ldr	r0, [sp, #0]
 800c1f0:	f7f4 f998 	bl	8000524 <__aeabi_i2d>
 800c1f4:	4632      	mov	r2, r6
 800c1f6:	463b      	mov	r3, r7
 800c1f8:	f7f4 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1fc:	b910      	cbnz	r0, 800c204 <_dtoa_r+0x184>
 800c1fe:	9b00      	ldr	r3, [sp, #0]
 800c200:	3b01      	subs	r3, #1
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	9b00      	ldr	r3, [sp, #0]
 800c206:	2b16      	cmp	r3, #22
 800c208:	d85a      	bhi.n	800c2c0 <_dtoa_r+0x240>
 800c20a:	9a00      	ldr	r2, [sp, #0]
 800c20c:	4b57      	ldr	r3, [pc, #348]	; (800c36c <_dtoa_r+0x2ec>)
 800c20e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c216:	ec51 0b19 	vmov	r0, r1, d9
 800c21a:	f7f4 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d050      	beq.n	800c2c4 <_dtoa_r+0x244>
 800c222:	9b00      	ldr	r3, [sp, #0]
 800c224:	3b01      	subs	r3, #1
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	2300      	movs	r3, #0
 800c22a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c22e:	1b5d      	subs	r5, r3, r5
 800c230:	1e6b      	subs	r3, r5, #1
 800c232:	9305      	str	r3, [sp, #20]
 800c234:	bf45      	ittet	mi
 800c236:	f1c5 0301 	rsbmi	r3, r5, #1
 800c23a:	9304      	strmi	r3, [sp, #16]
 800c23c:	2300      	movpl	r3, #0
 800c23e:	2300      	movmi	r3, #0
 800c240:	bf4c      	ite	mi
 800c242:	9305      	strmi	r3, [sp, #20]
 800c244:	9304      	strpl	r3, [sp, #16]
 800c246:	9b00      	ldr	r3, [sp, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	db3d      	blt.n	800c2c8 <_dtoa_r+0x248>
 800c24c:	9b05      	ldr	r3, [sp, #20]
 800c24e:	9a00      	ldr	r2, [sp, #0]
 800c250:	920a      	str	r2, [sp, #40]	; 0x28
 800c252:	4413      	add	r3, r2
 800c254:	9305      	str	r3, [sp, #20]
 800c256:	2300      	movs	r3, #0
 800c258:	9307      	str	r3, [sp, #28]
 800c25a:	9b06      	ldr	r3, [sp, #24]
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	f200 8089 	bhi.w	800c374 <_dtoa_r+0x2f4>
 800c262:	2b05      	cmp	r3, #5
 800c264:	bfc4      	itt	gt
 800c266:	3b04      	subgt	r3, #4
 800c268:	9306      	strgt	r3, [sp, #24]
 800c26a:	9b06      	ldr	r3, [sp, #24]
 800c26c:	f1a3 0302 	sub.w	r3, r3, #2
 800c270:	bfcc      	ite	gt
 800c272:	2500      	movgt	r5, #0
 800c274:	2501      	movle	r5, #1
 800c276:	2b03      	cmp	r3, #3
 800c278:	f200 8087 	bhi.w	800c38a <_dtoa_r+0x30a>
 800c27c:	e8df f003 	tbb	[pc, r3]
 800c280:	59383a2d 	.word	0x59383a2d
 800c284:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c288:	441d      	add	r5, r3
 800c28a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c28e:	2b20      	cmp	r3, #32
 800c290:	bfc1      	itttt	gt
 800c292:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c296:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c29a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c29e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c2a2:	bfda      	itte	le
 800c2a4:	f1c3 0320 	rsble	r3, r3, #32
 800c2a8:	fa06 f003 	lslle.w	r0, r6, r3
 800c2ac:	4318      	orrgt	r0, r3
 800c2ae:	f7f4 f929 	bl	8000504 <__aeabi_ui2d>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c2ba:	3d01      	subs	r5, #1
 800c2bc:	930e      	str	r3, [sp, #56]	; 0x38
 800c2be:	e76a      	b.n	800c196 <_dtoa_r+0x116>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e7b2      	b.n	800c22a <_dtoa_r+0x1aa>
 800c2c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c2c6:	e7b1      	b.n	800c22c <_dtoa_r+0x1ac>
 800c2c8:	9b04      	ldr	r3, [sp, #16]
 800c2ca:	9a00      	ldr	r2, [sp, #0]
 800c2cc:	1a9b      	subs	r3, r3, r2
 800c2ce:	9304      	str	r3, [sp, #16]
 800c2d0:	4253      	negs	r3, r2
 800c2d2:	9307      	str	r3, [sp, #28]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d8:	e7bf      	b.n	800c25a <_dtoa_r+0x1da>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	9308      	str	r3, [sp, #32]
 800c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dc55      	bgt.n	800c390 <_dtoa_r+0x310>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ee:	e00c      	b.n	800c30a <_dtoa_r+0x28a>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e7f3      	b.n	800c2dc <_dtoa_r+0x25c>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2f8:	9308      	str	r3, [sp, #32]
 800c2fa:	9b00      	ldr	r3, [sp, #0]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	9302      	str	r3, [sp, #8]
 800c300:	3301      	adds	r3, #1
 800c302:	2b01      	cmp	r3, #1
 800c304:	9303      	str	r3, [sp, #12]
 800c306:	bfb8      	it	lt
 800c308:	2301      	movlt	r3, #1
 800c30a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c30c:	2200      	movs	r2, #0
 800c30e:	6042      	str	r2, [r0, #4]
 800c310:	2204      	movs	r2, #4
 800c312:	f102 0614 	add.w	r6, r2, #20
 800c316:	429e      	cmp	r6, r3
 800c318:	6841      	ldr	r1, [r0, #4]
 800c31a:	d93d      	bls.n	800c398 <_dtoa_r+0x318>
 800c31c:	4620      	mov	r0, r4
 800c31e:	f001 f935 	bl	800d58c <_Balloc>
 800c322:	9001      	str	r0, [sp, #4]
 800c324:	2800      	cmp	r0, #0
 800c326:	d13b      	bne.n	800c3a0 <_dtoa_r+0x320>
 800c328:	4b11      	ldr	r3, [pc, #68]	; (800c370 <_dtoa_r+0x2f0>)
 800c32a:	4602      	mov	r2, r0
 800c32c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c330:	e6c0      	b.n	800c0b4 <_dtoa_r+0x34>
 800c332:	2301      	movs	r3, #1
 800c334:	e7df      	b.n	800c2f6 <_dtoa_r+0x276>
 800c336:	bf00      	nop
 800c338:	636f4361 	.word	0x636f4361
 800c33c:	3fd287a7 	.word	0x3fd287a7
 800c340:	8b60c8b3 	.word	0x8b60c8b3
 800c344:	3fc68a28 	.word	0x3fc68a28
 800c348:	509f79fb 	.word	0x509f79fb
 800c34c:	3fd34413 	.word	0x3fd34413
 800c350:	0800ffd6 	.word	0x0800ffd6
 800c354:	0800ffed 	.word	0x0800ffed
 800c358:	7ff00000 	.word	0x7ff00000
 800c35c:	0800ffd2 	.word	0x0800ffd2
 800c360:	0800ffc9 	.word	0x0800ffc9
 800c364:	0800fe4d 	.word	0x0800fe4d
 800c368:	3ff80000 	.word	0x3ff80000
 800c36c:	080101c0 	.word	0x080101c0
 800c370:	08010048 	.word	0x08010048
 800c374:	2501      	movs	r5, #1
 800c376:	2300      	movs	r3, #0
 800c378:	9306      	str	r3, [sp, #24]
 800c37a:	9508      	str	r5, [sp, #32]
 800c37c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c380:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c384:	2200      	movs	r2, #0
 800c386:	2312      	movs	r3, #18
 800c388:	e7b0      	b.n	800c2ec <_dtoa_r+0x26c>
 800c38a:	2301      	movs	r3, #1
 800c38c:	9308      	str	r3, [sp, #32]
 800c38e:	e7f5      	b.n	800c37c <_dtoa_r+0x2fc>
 800c390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c392:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c396:	e7b8      	b.n	800c30a <_dtoa_r+0x28a>
 800c398:	3101      	adds	r1, #1
 800c39a:	6041      	str	r1, [r0, #4]
 800c39c:	0052      	lsls	r2, r2, #1
 800c39e:	e7b8      	b.n	800c312 <_dtoa_r+0x292>
 800c3a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3a2:	9a01      	ldr	r2, [sp, #4]
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	9b03      	ldr	r3, [sp, #12]
 800c3a8:	2b0e      	cmp	r3, #14
 800c3aa:	f200 809d 	bhi.w	800c4e8 <_dtoa_r+0x468>
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	f000 809a 	beq.w	800c4e8 <_dtoa_r+0x468>
 800c3b4:	9b00      	ldr	r3, [sp, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	dd32      	ble.n	800c420 <_dtoa_r+0x3a0>
 800c3ba:	4ab7      	ldr	r2, [pc, #732]	; (800c698 <_dtoa_r+0x618>)
 800c3bc:	f003 030f 	and.w	r3, r3, #15
 800c3c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c3c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3c8:	9b00      	ldr	r3, [sp, #0]
 800c3ca:	05d8      	lsls	r0, r3, #23
 800c3cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c3d0:	d516      	bpl.n	800c400 <_dtoa_r+0x380>
 800c3d2:	4bb2      	ldr	r3, [pc, #712]	; (800c69c <_dtoa_r+0x61c>)
 800c3d4:	ec51 0b19 	vmov	r0, r1, d9
 800c3d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3dc:	f7f4 fa36 	bl	800084c <__aeabi_ddiv>
 800c3e0:	f007 070f 	and.w	r7, r7, #15
 800c3e4:	4682      	mov	sl, r0
 800c3e6:	468b      	mov	fp, r1
 800c3e8:	2503      	movs	r5, #3
 800c3ea:	4eac      	ldr	r6, [pc, #688]	; (800c69c <_dtoa_r+0x61c>)
 800c3ec:	b957      	cbnz	r7, 800c404 <_dtoa_r+0x384>
 800c3ee:	4642      	mov	r2, r8
 800c3f0:	464b      	mov	r3, r9
 800c3f2:	4650      	mov	r0, sl
 800c3f4:	4659      	mov	r1, fp
 800c3f6:	f7f4 fa29 	bl	800084c <__aeabi_ddiv>
 800c3fa:	4682      	mov	sl, r0
 800c3fc:	468b      	mov	fp, r1
 800c3fe:	e028      	b.n	800c452 <_dtoa_r+0x3d2>
 800c400:	2502      	movs	r5, #2
 800c402:	e7f2      	b.n	800c3ea <_dtoa_r+0x36a>
 800c404:	07f9      	lsls	r1, r7, #31
 800c406:	d508      	bpl.n	800c41a <_dtoa_r+0x39a>
 800c408:	4640      	mov	r0, r8
 800c40a:	4649      	mov	r1, r9
 800c40c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c410:	f7f4 f8f2 	bl	80005f8 <__aeabi_dmul>
 800c414:	3501      	adds	r5, #1
 800c416:	4680      	mov	r8, r0
 800c418:	4689      	mov	r9, r1
 800c41a:	107f      	asrs	r7, r7, #1
 800c41c:	3608      	adds	r6, #8
 800c41e:	e7e5      	b.n	800c3ec <_dtoa_r+0x36c>
 800c420:	f000 809b 	beq.w	800c55a <_dtoa_r+0x4da>
 800c424:	9b00      	ldr	r3, [sp, #0]
 800c426:	4f9d      	ldr	r7, [pc, #628]	; (800c69c <_dtoa_r+0x61c>)
 800c428:	425e      	negs	r6, r3
 800c42a:	4b9b      	ldr	r3, [pc, #620]	; (800c698 <_dtoa_r+0x618>)
 800c42c:	f006 020f 	and.w	r2, r6, #15
 800c430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	ec51 0b19 	vmov	r0, r1, d9
 800c43c:	f7f4 f8dc 	bl	80005f8 <__aeabi_dmul>
 800c440:	1136      	asrs	r6, r6, #4
 800c442:	4682      	mov	sl, r0
 800c444:	468b      	mov	fp, r1
 800c446:	2300      	movs	r3, #0
 800c448:	2502      	movs	r5, #2
 800c44a:	2e00      	cmp	r6, #0
 800c44c:	d17a      	bne.n	800c544 <_dtoa_r+0x4c4>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1d3      	bne.n	800c3fa <_dtoa_r+0x37a>
 800c452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 8082 	beq.w	800c55e <_dtoa_r+0x4de>
 800c45a:	4b91      	ldr	r3, [pc, #580]	; (800c6a0 <_dtoa_r+0x620>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	4650      	mov	r0, sl
 800c460:	4659      	mov	r1, fp
 800c462:	f7f4 fb3b 	bl	8000adc <__aeabi_dcmplt>
 800c466:	2800      	cmp	r0, #0
 800c468:	d079      	beq.n	800c55e <_dtoa_r+0x4de>
 800c46a:	9b03      	ldr	r3, [sp, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d076      	beq.n	800c55e <_dtoa_r+0x4de>
 800c470:	9b02      	ldr	r3, [sp, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	dd36      	ble.n	800c4e4 <_dtoa_r+0x464>
 800c476:	9b00      	ldr	r3, [sp, #0]
 800c478:	4650      	mov	r0, sl
 800c47a:	4659      	mov	r1, fp
 800c47c:	1e5f      	subs	r7, r3, #1
 800c47e:	2200      	movs	r2, #0
 800c480:	4b88      	ldr	r3, [pc, #544]	; (800c6a4 <_dtoa_r+0x624>)
 800c482:	f7f4 f8b9 	bl	80005f8 <__aeabi_dmul>
 800c486:	9e02      	ldr	r6, [sp, #8]
 800c488:	4682      	mov	sl, r0
 800c48a:	468b      	mov	fp, r1
 800c48c:	3501      	adds	r5, #1
 800c48e:	4628      	mov	r0, r5
 800c490:	f7f4 f848 	bl	8000524 <__aeabi_i2d>
 800c494:	4652      	mov	r2, sl
 800c496:	465b      	mov	r3, fp
 800c498:	f7f4 f8ae 	bl	80005f8 <__aeabi_dmul>
 800c49c:	4b82      	ldr	r3, [pc, #520]	; (800c6a8 <_dtoa_r+0x628>)
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f7f3 fef4 	bl	800028c <__adddf3>
 800c4a4:	46d0      	mov	r8, sl
 800c4a6:	46d9      	mov	r9, fp
 800c4a8:	4682      	mov	sl, r0
 800c4aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	d158      	bne.n	800c564 <_dtoa_r+0x4e4>
 800c4b2:	4b7e      	ldr	r3, [pc, #504]	; (800c6ac <_dtoa_r+0x62c>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4640      	mov	r0, r8
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	f7f3 fee5 	bl	8000288 <__aeabi_dsub>
 800c4be:	4652      	mov	r2, sl
 800c4c0:	465b      	mov	r3, fp
 800c4c2:	4680      	mov	r8, r0
 800c4c4:	4689      	mov	r9, r1
 800c4c6:	f7f4 fb27 	bl	8000b18 <__aeabi_dcmpgt>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	f040 8295 	bne.w	800c9fa <_dtoa_r+0x97a>
 800c4d0:	4652      	mov	r2, sl
 800c4d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	4649      	mov	r1, r9
 800c4da:	f7f4 faff 	bl	8000adc <__aeabi_dcmplt>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	f040 8289 	bne.w	800c9f6 <_dtoa_r+0x976>
 800c4e4:	ec5b ab19 	vmov	sl, fp, d9
 800c4e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f2c0 8148 	blt.w	800c780 <_dtoa_r+0x700>
 800c4f0:	9a00      	ldr	r2, [sp, #0]
 800c4f2:	2a0e      	cmp	r2, #14
 800c4f4:	f300 8144 	bgt.w	800c780 <_dtoa_r+0x700>
 800c4f8:	4b67      	ldr	r3, [pc, #412]	; (800c698 <_dtoa_r+0x618>)
 800c4fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c504:	2b00      	cmp	r3, #0
 800c506:	f280 80d5 	bge.w	800c6b4 <_dtoa_r+0x634>
 800c50a:	9b03      	ldr	r3, [sp, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f300 80d1 	bgt.w	800c6b4 <_dtoa_r+0x634>
 800c512:	f040 826f 	bne.w	800c9f4 <_dtoa_r+0x974>
 800c516:	4b65      	ldr	r3, [pc, #404]	; (800c6ac <_dtoa_r+0x62c>)
 800c518:	2200      	movs	r2, #0
 800c51a:	4640      	mov	r0, r8
 800c51c:	4649      	mov	r1, r9
 800c51e:	f7f4 f86b 	bl	80005f8 <__aeabi_dmul>
 800c522:	4652      	mov	r2, sl
 800c524:	465b      	mov	r3, fp
 800c526:	f7f4 faed 	bl	8000b04 <__aeabi_dcmpge>
 800c52a:	9e03      	ldr	r6, [sp, #12]
 800c52c:	4637      	mov	r7, r6
 800c52e:	2800      	cmp	r0, #0
 800c530:	f040 8245 	bne.w	800c9be <_dtoa_r+0x93e>
 800c534:	9d01      	ldr	r5, [sp, #4]
 800c536:	2331      	movs	r3, #49	; 0x31
 800c538:	f805 3b01 	strb.w	r3, [r5], #1
 800c53c:	9b00      	ldr	r3, [sp, #0]
 800c53e:	3301      	adds	r3, #1
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	e240      	b.n	800c9c6 <_dtoa_r+0x946>
 800c544:	07f2      	lsls	r2, r6, #31
 800c546:	d505      	bpl.n	800c554 <_dtoa_r+0x4d4>
 800c548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c54c:	f7f4 f854 	bl	80005f8 <__aeabi_dmul>
 800c550:	3501      	adds	r5, #1
 800c552:	2301      	movs	r3, #1
 800c554:	1076      	asrs	r6, r6, #1
 800c556:	3708      	adds	r7, #8
 800c558:	e777      	b.n	800c44a <_dtoa_r+0x3ca>
 800c55a:	2502      	movs	r5, #2
 800c55c:	e779      	b.n	800c452 <_dtoa_r+0x3d2>
 800c55e:	9f00      	ldr	r7, [sp, #0]
 800c560:	9e03      	ldr	r6, [sp, #12]
 800c562:	e794      	b.n	800c48e <_dtoa_r+0x40e>
 800c564:	9901      	ldr	r1, [sp, #4]
 800c566:	4b4c      	ldr	r3, [pc, #304]	; (800c698 <_dtoa_r+0x618>)
 800c568:	4431      	add	r1, r6
 800c56a:	910d      	str	r1, [sp, #52]	; 0x34
 800c56c:	9908      	ldr	r1, [sp, #32]
 800c56e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c572:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c576:	2900      	cmp	r1, #0
 800c578:	d043      	beq.n	800c602 <_dtoa_r+0x582>
 800c57a:	494d      	ldr	r1, [pc, #308]	; (800c6b0 <_dtoa_r+0x630>)
 800c57c:	2000      	movs	r0, #0
 800c57e:	f7f4 f965 	bl	800084c <__aeabi_ddiv>
 800c582:	4652      	mov	r2, sl
 800c584:	465b      	mov	r3, fp
 800c586:	f7f3 fe7f 	bl	8000288 <__aeabi_dsub>
 800c58a:	9d01      	ldr	r5, [sp, #4]
 800c58c:	4682      	mov	sl, r0
 800c58e:	468b      	mov	fp, r1
 800c590:	4649      	mov	r1, r9
 800c592:	4640      	mov	r0, r8
 800c594:	f7f4 fae0 	bl	8000b58 <__aeabi_d2iz>
 800c598:	4606      	mov	r6, r0
 800c59a:	f7f3 ffc3 	bl	8000524 <__aeabi_i2d>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	f7f3 fe6f 	bl	8000288 <__aeabi_dsub>
 800c5aa:	3630      	adds	r6, #48	; 0x30
 800c5ac:	f805 6b01 	strb.w	r6, [r5], #1
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	465b      	mov	r3, fp
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	4689      	mov	r9, r1
 800c5b8:	f7f4 fa90 	bl	8000adc <__aeabi_dcmplt>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d163      	bne.n	800c688 <_dtoa_r+0x608>
 800c5c0:	4642      	mov	r2, r8
 800c5c2:	464b      	mov	r3, r9
 800c5c4:	4936      	ldr	r1, [pc, #216]	; (800c6a0 <_dtoa_r+0x620>)
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	f7f3 fe5e 	bl	8000288 <__aeabi_dsub>
 800c5cc:	4652      	mov	r2, sl
 800c5ce:	465b      	mov	r3, fp
 800c5d0:	f7f4 fa84 	bl	8000adc <__aeabi_dcmplt>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	f040 80b5 	bne.w	800c744 <_dtoa_r+0x6c4>
 800c5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5dc:	429d      	cmp	r5, r3
 800c5de:	d081      	beq.n	800c4e4 <_dtoa_r+0x464>
 800c5e0:	4b30      	ldr	r3, [pc, #192]	; (800c6a4 <_dtoa_r+0x624>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	4650      	mov	r0, sl
 800c5e6:	4659      	mov	r1, fp
 800c5e8:	f7f4 f806 	bl	80005f8 <__aeabi_dmul>
 800c5ec:	4b2d      	ldr	r3, [pc, #180]	; (800c6a4 <_dtoa_r+0x624>)
 800c5ee:	4682      	mov	sl, r0
 800c5f0:	468b      	mov	fp, r1
 800c5f2:	4640      	mov	r0, r8
 800c5f4:	4649      	mov	r1, r9
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	e7c6      	b.n	800c590 <_dtoa_r+0x510>
 800c602:	4650      	mov	r0, sl
 800c604:	4659      	mov	r1, fp
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c60c:	9d01      	ldr	r5, [sp, #4]
 800c60e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c610:	4682      	mov	sl, r0
 800c612:	468b      	mov	fp, r1
 800c614:	4649      	mov	r1, r9
 800c616:	4640      	mov	r0, r8
 800c618:	f7f4 fa9e 	bl	8000b58 <__aeabi_d2iz>
 800c61c:	4606      	mov	r6, r0
 800c61e:	f7f3 ff81 	bl	8000524 <__aeabi_i2d>
 800c622:	3630      	adds	r6, #48	; 0x30
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4640      	mov	r0, r8
 800c62a:	4649      	mov	r1, r9
 800c62c:	f7f3 fe2c 	bl	8000288 <__aeabi_dsub>
 800c630:	f805 6b01 	strb.w	r6, [r5], #1
 800c634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c636:	429d      	cmp	r5, r3
 800c638:	4680      	mov	r8, r0
 800c63a:	4689      	mov	r9, r1
 800c63c:	f04f 0200 	mov.w	r2, #0
 800c640:	d124      	bne.n	800c68c <_dtoa_r+0x60c>
 800c642:	4b1b      	ldr	r3, [pc, #108]	; (800c6b0 <_dtoa_r+0x630>)
 800c644:	4650      	mov	r0, sl
 800c646:	4659      	mov	r1, fp
 800c648:	f7f3 fe20 	bl	800028c <__adddf3>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	4640      	mov	r0, r8
 800c652:	4649      	mov	r1, r9
 800c654:	f7f4 fa60 	bl	8000b18 <__aeabi_dcmpgt>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d173      	bne.n	800c744 <_dtoa_r+0x6c4>
 800c65c:	4652      	mov	r2, sl
 800c65e:	465b      	mov	r3, fp
 800c660:	4913      	ldr	r1, [pc, #76]	; (800c6b0 <_dtoa_r+0x630>)
 800c662:	2000      	movs	r0, #0
 800c664:	f7f3 fe10 	bl	8000288 <__aeabi_dsub>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4640      	mov	r0, r8
 800c66e:	4649      	mov	r1, r9
 800c670:	f7f4 fa34 	bl	8000adc <__aeabi_dcmplt>
 800c674:	2800      	cmp	r0, #0
 800c676:	f43f af35 	beq.w	800c4e4 <_dtoa_r+0x464>
 800c67a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c67c:	1e6b      	subs	r3, r5, #1
 800c67e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c680:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c684:	2b30      	cmp	r3, #48	; 0x30
 800c686:	d0f8      	beq.n	800c67a <_dtoa_r+0x5fa>
 800c688:	9700      	str	r7, [sp, #0]
 800c68a:	e049      	b.n	800c720 <_dtoa_r+0x6a0>
 800c68c:	4b05      	ldr	r3, [pc, #20]	; (800c6a4 <_dtoa_r+0x624>)
 800c68e:	f7f3 ffb3 	bl	80005f8 <__aeabi_dmul>
 800c692:	4680      	mov	r8, r0
 800c694:	4689      	mov	r9, r1
 800c696:	e7bd      	b.n	800c614 <_dtoa_r+0x594>
 800c698:	080101c0 	.word	0x080101c0
 800c69c:	08010198 	.word	0x08010198
 800c6a0:	3ff00000 	.word	0x3ff00000
 800c6a4:	40240000 	.word	0x40240000
 800c6a8:	401c0000 	.word	0x401c0000
 800c6ac:	40140000 	.word	0x40140000
 800c6b0:	3fe00000 	.word	0x3fe00000
 800c6b4:	9d01      	ldr	r5, [sp, #4]
 800c6b6:	4656      	mov	r6, sl
 800c6b8:	465f      	mov	r7, fp
 800c6ba:	4642      	mov	r2, r8
 800c6bc:	464b      	mov	r3, r9
 800c6be:	4630      	mov	r0, r6
 800c6c0:	4639      	mov	r1, r7
 800c6c2:	f7f4 f8c3 	bl	800084c <__aeabi_ddiv>
 800c6c6:	f7f4 fa47 	bl	8000b58 <__aeabi_d2iz>
 800c6ca:	4682      	mov	sl, r0
 800c6cc:	f7f3 ff2a 	bl	8000524 <__aeabi_i2d>
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	464b      	mov	r3, r9
 800c6d4:	f7f3 ff90 	bl	80005f8 <__aeabi_dmul>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4630      	mov	r0, r6
 800c6de:	4639      	mov	r1, r7
 800c6e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c6e4:	f7f3 fdd0 	bl	8000288 <__aeabi_dsub>
 800c6e8:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ec:	9e01      	ldr	r6, [sp, #4]
 800c6ee:	9f03      	ldr	r7, [sp, #12]
 800c6f0:	1bae      	subs	r6, r5, r6
 800c6f2:	42b7      	cmp	r7, r6
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	d135      	bne.n	800c766 <_dtoa_r+0x6e6>
 800c6fa:	f7f3 fdc7 	bl	800028c <__adddf3>
 800c6fe:	4642      	mov	r2, r8
 800c700:	464b      	mov	r3, r9
 800c702:	4606      	mov	r6, r0
 800c704:	460f      	mov	r7, r1
 800c706:	f7f4 fa07 	bl	8000b18 <__aeabi_dcmpgt>
 800c70a:	b9d0      	cbnz	r0, 800c742 <_dtoa_r+0x6c2>
 800c70c:	4642      	mov	r2, r8
 800c70e:	464b      	mov	r3, r9
 800c710:	4630      	mov	r0, r6
 800c712:	4639      	mov	r1, r7
 800c714:	f7f4 f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c718:	b110      	cbz	r0, 800c720 <_dtoa_r+0x6a0>
 800c71a:	f01a 0f01 	tst.w	sl, #1
 800c71e:	d110      	bne.n	800c742 <_dtoa_r+0x6c2>
 800c720:	4620      	mov	r0, r4
 800c722:	ee18 1a10 	vmov	r1, s16
 800c726:	f000 ff71 	bl	800d60c <_Bfree>
 800c72a:	2300      	movs	r3, #0
 800c72c:	9800      	ldr	r0, [sp, #0]
 800c72e:	702b      	strb	r3, [r5, #0]
 800c730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c732:	3001      	adds	r0, #1
 800c734:	6018      	str	r0, [r3, #0]
 800c736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f43f acf1 	beq.w	800c120 <_dtoa_r+0xa0>
 800c73e:	601d      	str	r5, [r3, #0]
 800c740:	e4ee      	b.n	800c120 <_dtoa_r+0xa0>
 800c742:	9f00      	ldr	r7, [sp, #0]
 800c744:	462b      	mov	r3, r5
 800c746:	461d      	mov	r5, r3
 800c748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c74c:	2a39      	cmp	r2, #57	; 0x39
 800c74e:	d106      	bne.n	800c75e <_dtoa_r+0x6de>
 800c750:	9a01      	ldr	r2, [sp, #4]
 800c752:	429a      	cmp	r2, r3
 800c754:	d1f7      	bne.n	800c746 <_dtoa_r+0x6c6>
 800c756:	9901      	ldr	r1, [sp, #4]
 800c758:	2230      	movs	r2, #48	; 0x30
 800c75a:	3701      	adds	r7, #1
 800c75c:	700a      	strb	r2, [r1, #0]
 800c75e:	781a      	ldrb	r2, [r3, #0]
 800c760:	3201      	adds	r2, #1
 800c762:	701a      	strb	r2, [r3, #0]
 800c764:	e790      	b.n	800c688 <_dtoa_r+0x608>
 800c766:	4ba6      	ldr	r3, [pc, #664]	; (800ca00 <_dtoa_r+0x980>)
 800c768:	2200      	movs	r2, #0
 800c76a:	f7f3 ff45 	bl	80005f8 <__aeabi_dmul>
 800c76e:	2200      	movs	r2, #0
 800c770:	2300      	movs	r3, #0
 800c772:	4606      	mov	r6, r0
 800c774:	460f      	mov	r7, r1
 800c776:	f7f4 f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d09d      	beq.n	800c6ba <_dtoa_r+0x63a>
 800c77e:	e7cf      	b.n	800c720 <_dtoa_r+0x6a0>
 800c780:	9a08      	ldr	r2, [sp, #32]
 800c782:	2a00      	cmp	r2, #0
 800c784:	f000 80d7 	beq.w	800c936 <_dtoa_r+0x8b6>
 800c788:	9a06      	ldr	r2, [sp, #24]
 800c78a:	2a01      	cmp	r2, #1
 800c78c:	f300 80ba 	bgt.w	800c904 <_dtoa_r+0x884>
 800c790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c792:	2a00      	cmp	r2, #0
 800c794:	f000 80b2 	beq.w	800c8fc <_dtoa_r+0x87c>
 800c798:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c79c:	9e07      	ldr	r6, [sp, #28]
 800c79e:	9d04      	ldr	r5, [sp, #16]
 800c7a0:	9a04      	ldr	r2, [sp, #16]
 800c7a2:	441a      	add	r2, r3
 800c7a4:	9204      	str	r2, [sp, #16]
 800c7a6:	9a05      	ldr	r2, [sp, #20]
 800c7a8:	2101      	movs	r1, #1
 800c7aa:	441a      	add	r2, r3
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	9205      	str	r2, [sp, #20]
 800c7b0:	f001 f82e 	bl	800d810 <__i2b>
 800c7b4:	4607      	mov	r7, r0
 800c7b6:	2d00      	cmp	r5, #0
 800c7b8:	dd0c      	ble.n	800c7d4 <_dtoa_r+0x754>
 800c7ba:	9b05      	ldr	r3, [sp, #20]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd09      	ble.n	800c7d4 <_dtoa_r+0x754>
 800c7c0:	42ab      	cmp	r3, r5
 800c7c2:	9a04      	ldr	r2, [sp, #16]
 800c7c4:	bfa8      	it	ge
 800c7c6:	462b      	movge	r3, r5
 800c7c8:	1ad2      	subs	r2, r2, r3
 800c7ca:	9204      	str	r2, [sp, #16]
 800c7cc:	9a05      	ldr	r2, [sp, #20]
 800c7ce:	1aed      	subs	r5, r5, r3
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	9305      	str	r3, [sp, #20]
 800c7d4:	9b07      	ldr	r3, [sp, #28]
 800c7d6:	b31b      	cbz	r3, 800c820 <_dtoa_r+0x7a0>
 800c7d8:	9b08      	ldr	r3, [sp, #32]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 80af 	beq.w	800c93e <_dtoa_r+0x8be>
 800c7e0:	2e00      	cmp	r6, #0
 800c7e2:	dd13      	ble.n	800c80c <_dtoa_r+0x78c>
 800c7e4:	4639      	mov	r1, r7
 800c7e6:	4632      	mov	r2, r6
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f001 f8d1 	bl	800d990 <__pow5mult>
 800c7ee:	ee18 2a10 	vmov	r2, s16
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	4607      	mov	r7, r0
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f001 f820 	bl	800d83c <__multiply>
 800c7fc:	ee18 1a10 	vmov	r1, s16
 800c800:	4680      	mov	r8, r0
 800c802:	4620      	mov	r0, r4
 800c804:	f000 ff02 	bl	800d60c <_Bfree>
 800c808:	ee08 8a10 	vmov	s16, r8
 800c80c:	9b07      	ldr	r3, [sp, #28]
 800c80e:	1b9a      	subs	r2, r3, r6
 800c810:	d006      	beq.n	800c820 <_dtoa_r+0x7a0>
 800c812:	ee18 1a10 	vmov	r1, s16
 800c816:	4620      	mov	r0, r4
 800c818:	f001 f8ba 	bl	800d990 <__pow5mult>
 800c81c:	ee08 0a10 	vmov	s16, r0
 800c820:	2101      	movs	r1, #1
 800c822:	4620      	mov	r0, r4
 800c824:	f000 fff4 	bl	800d810 <__i2b>
 800c828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	4606      	mov	r6, r0
 800c82e:	f340 8088 	ble.w	800c942 <_dtoa_r+0x8c2>
 800c832:	461a      	mov	r2, r3
 800c834:	4601      	mov	r1, r0
 800c836:	4620      	mov	r0, r4
 800c838:	f001 f8aa 	bl	800d990 <__pow5mult>
 800c83c:	9b06      	ldr	r3, [sp, #24]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	4606      	mov	r6, r0
 800c842:	f340 8081 	ble.w	800c948 <_dtoa_r+0x8c8>
 800c846:	f04f 0800 	mov.w	r8, #0
 800c84a:	6933      	ldr	r3, [r6, #16]
 800c84c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c850:	6918      	ldr	r0, [r3, #16]
 800c852:	f000 ff8d 	bl	800d770 <__hi0bits>
 800c856:	f1c0 0020 	rsb	r0, r0, #32
 800c85a:	9b05      	ldr	r3, [sp, #20]
 800c85c:	4418      	add	r0, r3
 800c85e:	f010 001f 	ands.w	r0, r0, #31
 800c862:	f000 8092 	beq.w	800c98a <_dtoa_r+0x90a>
 800c866:	f1c0 0320 	rsb	r3, r0, #32
 800c86a:	2b04      	cmp	r3, #4
 800c86c:	f340 808a 	ble.w	800c984 <_dtoa_r+0x904>
 800c870:	f1c0 001c 	rsb	r0, r0, #28
 800c874:	9b04      	ldr	r3, [sp, #16]
 800c876:	4403      	add	r3, r0
 800c878:	9304      	str	r3, [sp, #16]
 800c87a:	9b05      	ldr	r3, [sp, #20]
 800c87c:	4403      	add	r3, r0
 800c87e:	4405      	add	r5, r0
 800c880:	9305      	str	r3, [sp, #20]
 800c882:	9b04      	ldr	r3, [sp, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	dd07      	ble.n	800c898 <_dtoa_r+0x818>
 800c888:	ee18 1a10 	vmov	r1, s16
 800c88c:	461a      	mov	r2, r3
 800c88e:	4620      	mov	r0, r4
 800c890:	f001 f8d8 	bl	800da44 <__lshift>
 800c894:	ee08 0a10 	vmov	s16, r0
 800c898:	9b05      	ldr	r3, [sp, #20]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	dd05      	ble.n	800c8aa <_dtoa_r+0x82a>
 800c89e:	4631      	mov	r1, r6
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f001 f8ce 	bl	800da44 <__lshift>
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d06e      	beq.n	800c98e <_dtoa_r+0x90e>
 800c8b0:	ee18 0a10 	vmov	r0, s16
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	f001 f935 	bl	800db24 <__mcmp>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	da67      	bge.n	800c98e <_dtoa_r+0x90e>
 800c8be:	9b00      	ldr	r3, [sp, #0]
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	ee18 1a10 	vmov	r1, s16
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	220a      	movs	r2, #10
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 febf 	bl	800d650 <__multadd>
 800c8d2:	9b08      	ldr	r3, [sp, #32]
 800c8d4:	ee08 0a10 	vmov	s16, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 81b1 	beq.w	800cc40 <_dtoa_r+0xbc0>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	4639      	mov	r1, r7
 800c8e2:	220a      	movs	r2, #10
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f000 feb3 	bl	800d650 <__multadd>
 800c8ea:	9b02      	ldr	r3, [sp, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	4607      	mov	r7, r0
 800c8f0:	f300 808e 	bgt.w	800ca10 <_dtoa_r+0x990>
 800c8f4:	9b06      	ldr	r3, [sp, #24]
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	dc51      	bgt.n	800c99e <_dtoa_r+0x91e>
 800c8fa:	e089      	b.n	800ca10 <_dtoa_r+0x990>
 800c8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c902:	e74b      	b.n	800c79c <_dtoa_r+0x71c>
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	1e5e      	subs	r6, r3, #1
 800c908:	9b07      	ldr	r3, [sp, #28]
 800c90a:	42b3      	cmp	r3, r6
 800c90c:	bfbf      	itttt	lt
 800c90e:	9b07      	ldrlt	r3, [sp, #28]
 800c910:	9607      	strlt	r6, [sp, #28]
 800c912:	1af2      	sublt	r2, r6, r3
 800c914:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c916:	bfb6      	itet	lt
 800c918:	189b      	addlt	r3, r3, r2
 800c91a:	1b9e      	subge	r6, r3, r6
 800c91c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c91e:	9b03      	ldr	r3, [sp, #12]
 800c920:	bfb8      	it	lt
 800c922:	2600      	movlt	r6, #0
 800c924:	2b00      	cmp	r3, #0
 800c926:	bfb7      	itett	lt
 800c928:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c92c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c930:	1a9d      	sublt	r5, r3, r2
 800c932:	2300      	movlt	r3, #0
 800c934:	e734      	b.n	800c7a0 <_dtoa_r+0x720>
 800c936:	9e07      	ldr	r6, [sp, #28]
 800c938:	9d04      	ldr	r5, [sp, #16]
 800c93a:	9f08      	ldr	r7, [sp, #32]
 800c93c:	e73b      	b.n	800c7b6 <_dtoa_r+0x736>
 800c93e:	9a07      	ldr	r2, [sp, #28]
 800c940:	e767      	b.n	800c812 <_dtoa_r+0x792>
 800c942:	9b06      	ldr	r3, [sp, #24]
 800c944:	2b01      	cmp	r3, #1
 800c946:	dc18      	bgt.n	800c97a <_dtoa_r+0x8fa>
 800c948:	f1ba 0f00 	cmp.w	sl, #0
 800c94c:	d115      	bne.n	800c97a <_dtoa_r+0x8fa>
 800c94e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c952:	b993      	cbnz	r3, 800c97a <_dtoa_r+0x8fa>
 800c954:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c958:	0d1b      	lsrs	r3, r3, #20
 800c95a:	051b      	lsls	r3, r3, #20
 800c95c:	b183      	cbz	r3, 800c980 <_dtoa_r+0x900>
 800c95e:	9b04      	ldr	r3, [sp, #16]
 800c960:	3301      	adds	r3, #1
 800c962:	9304      	str	r3, [sp, #16]
 800c964:	9b05      	ldr	r3, [sp, #20]
 800c966:	3301      	adds	r3, #1
 800c968:	9305      	str	r3, [sp, #20]
 800c96a:	f04f 0801 	mov.w	r8, #1
 800c96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c970:	2b00      	cmp	r3, #0
 800c972:	f47f af6a 	bne.w	800c84a <_dtoa_r+0x7ca>
 800c976:	2001      	movs	r0, #1
 800c978:	e76f      	b.n	800c85a <_dtoa_r+0x7da>
 800c97a:	f04f 0800 	mov.w	r8, #0
 800c97e:	e7f6      	b.n	800c96e <_dtoa_r+0x8ee>
 800c980:	4698      	mov	r8, r3
 800c982:	e7f4      	b.n	800c96e <_dtoa_r+0x8ee>
 800c984:	f43f af7d 	beq.w	800c882 <_dtoa_r+0x802>
 800c988:	4618      	mov	r0, r3
 800c98a:	301c      	adds	r0, #28
 800c98c:	e772      	b.n	800c874 <_dtoa_r+0x7f4>
 800c98e:	9b03      	ldr	r3, [sp, #12]
 800c990:	2b00      	cmp	r3, #0
 800c992:	dc37      	bgt.n	800ca04 <_dtoa_r+0x984>
 800c994:	9b06      	ldr	r3, [sp, #24]
 800c996:	2b02      	cmp	r3, #2
 800c998:	dd34      	ble.n	800ca04 <_dtoa_r+0x984>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	9302      	str	r3, [sp, #8]
 800c99e:	9b02      	ldr	r3, [sp, #8]
 800c9a0:	b96b      	cbnz	r3, 800c9be <_dtoa_r+0x93e>
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	2205      	movs	r2, #5
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f000 fe52 	bl	800d650 <__multadd>
 800c9ac:	4601      	mov	r1, r0
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	ee18 0a10 	vmov	r0, s16
 800c9b4:	f001 f8b6 	bl	800db24 <__mcmp>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	f73f adbb 	bgt.w	800c534 <_dtoa_r+0x4b4>
 800c9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9c0:	9d01      	ldr	r5, [sp, #4]
 800c9c2:	43db      	mvns	r3, r3
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	f04f 0800 	mov.w	r8, #0
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 fe1d 	bl	800d60c <_Bfree>
 800c9d2:	2f00      	cmp	r7, #0
 800c9d4:	f43f aea4 	beq.w	800c720 <_dtoa_r+0x6a0>
 800c9d8:	f1b8 0f00 	cmp.w	r8, #0
 800c9dc:	d005      	beq.n	800c9ea <_dtoa_r+0x96a>
 800c9de:	45b8      	cmp	r8, r7
 800c9e0:	d003      	beq.n	800c9ea <_dtoa_r+0x96a>
 800c9e2:	4641      	mov	r1, r8
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f000 fe11 	bl	800d60c <_Bfree>
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f000 fe0d 	bl	800d60c <_Bfree>
 800c9f2:	e695      	b.n	800c720 <_dtoa_r+0x6a0>
 800c9f4:	2600      	movs	r6, #0
 800c9f6:	4637      	mov	r7, r6
 800c9f8:	e7e1      	b.n	800c9be <_dtoa_r+0x93e>
 800c9fa:	9700      	str	r7, [sp, #0]
 800c9fc:	4637      	mov	r7, r6
 800c9fe:	e599      	b.n	800c534 <_dtoa_r+0x4b4>
 800ca00:	40240000 	.word	0x40240000
 800ca04:	9b08      	ldr	r3, [sp, #32]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 80ca 	beq.w	800cba0 <_dtoa_r+0xb20>
 800ca0c:	9b03      	ldr	r3, [sp, #12]
 800ca0e:	9302      	str	r3, [sp, #8]
 800ca10:	2d00      	cmp	r5, #0
 800ca12:	dd05      	ble.n	800ca20 <_dtoa_r+0x9a0>
 800ca14:	4639      	mov	r1, r7
 800ca16:	462a      	mov	r2, r5
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f001 f813 	bl	800da44 <__lshift>
 800ca1e:	4607      	mov	r7, r0
 800ca20:	f1b8 0f00 	cmp.w	r8, #0
 800ca24:	d05b      	beq.n	800cade <_dtoa_r+0xa5e>
 800ca26:	6879      	ldr	r1, [r7, #4]
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f000 fdaf 	bl	800d58c <_Balloc>
 800ca2e:	4605      	mov	r5, r0
 800ca30:	b928      	cbnz	r0, 800ca3e <_dtoa_r+0x9be>
 800ca32:	4b87      	ldr	r3, [pc, #540]	; (800cc50 <_dtoa_r+0xbd0>)
 800ca34:	4602      	mov	r2, r0
 800ca36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca3a:	f7ff bb3b 	b.w	800c0b4 <_dtoa_r+0x34>
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	3202      	adds	r2, #2
 800ca42:	0092      	lsls	r2, r2, #2
 800ca44:	f107 010c 	add.w	r1, r7, #12
 800ca48:	300c      	adds	r0, #12
 800ca4a:	f000 fd84 	bl	800d556 <memcpy>
 800ca4e:	2201      	movs	r2, #1
 800ca50:	4629      	mov	r1, r5
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 fff6 	bl	800da44 <__lshift>
 800ca58:	9b01      	ldr	r3, [sp, #4]
 800ca5a:	f103 0901 	add.w	r9, r3, #1
 800ca5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ca62:	4413      	add	r3, r2
 800ca64:	9305      	str	r3, [sp, #20]
 800ca66:	f00a 0301 	and.w	r3, sl, #1
 800ca6a:	46b8      	mov	r8, r7
 800ca6c:	9304      	str	r3, [sp, #16]
 800ca6e:	4607      	mov	r7, r0
 800ca70:	4631      	mov	r1, r6
 800ca72:	ee18 0a10 	vmov	r0, s16
 800ca76:	f7ff fa77 	bl	800bf68 <quorem>
 800ca7a:	4641      	mov	r1, r8
 800ca7c:	9002      	str	r0, [sp, #8]
 800ca7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca82:	ee18 0a10 	vmov	r0, s16
 800ca86:	f001 f84d 	bl	800db24 <__mcmp>
 800ca8a:	463a      	mov	r2, r7
 800ca8c:	9003      	str	r0, [sp, #12]
 800ca8e:	4631      	mov	r1, r6
 800ca90:	4620      	mov	r0, r4
 800ca92:	f001 f863 	bl	800db5c <__mdiff>
 800ca96:	68c2      	ldr	r2, [r0, #12]
 800ca98:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	bb02      	cbnz	r2, 800cae2 <_dtoa_r+0xa62>
 800caa0:	4601      	mov	r1, r0
 800caa2:	ee18 0a10 	vmov	r0, s16
 800caa6:	f001 f83d 	bl	800db24 <__mcmp>
 800caaa:	4602      	mov	r2, r0
 800caac:	4629      	mov	r1, r5
 800caae:	4620      	mov	r0, r4
 800cab0:	9207      	str	r2, [sp, #28]
 800cab2:	f000 fdab 	bl	800d60c <_Bfree>
 800cab6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800caba:	ea43 0102 	orr.w	r1, r3, r2
 800cabe:	9b04      	ldr	r3, [sp, #16]
 800cac0:	430b      	orrs	r3, r1
 800cac2:	464d      	mov	r5, r9
 800cac4:	d10f      	bne.n	800cae6 <_dtoa_r+0xa66>
 800cac6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800caca:	d02a      	beq.n	800cb22 <_dtoa_r+0xaa2>
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	dd02      	ble.n	800cad8 <_dtoa_r+0xa58>
 800cad2:	9b02      	ldr	r3, [sp, #8]
 800cad4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cad8:	f88b a000 	strb.w	sl, [fp]
 800cadc:	e775      	b.n	800c9ca <_dtoa_r+0x94a>
 800cade:	4638      	mov	r0, r7
 800cae0:	e7ba      	b.n	800ca58 <_dtoa_r+0x9d8>
 800cae2:	2201      	movs	r2, #1
 800cae4:	e7e2      	b.n	800caac <_dtoa_r+0xa2c>
 800cae6:	9b03      	ldr	r3, [sp, #12]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	db04      	blt.n	800caf6 <_dtoa_r+0xa76>
 800caec:	9906      	ldr	r1, [sp, #24]
 800caee:	430b      	orrs	r3, r1
 800caf0:	9904      	ldr	r1, [sp, #16]
 800caf2:	430b      	orrs	r3, r1
 800caf4:	d122      	bne.n	800cb3c <_dtoa_r+0xabc>
 800caf6:	2a00      	cmp	r2, #0
 800caf8:	ddee      	ble.n	800cad8 <_dtoa_r+0xa58>
 800cafa:	ee18 1a10 	vmov	r1, s16
 800cafe:	2201      	movs	r2, #1
 800cb00:	4620      	mov	r0, r4
 800cb02:	f000 ff9f 	bl	800da44 <__lshift>
 800cb06:	4631      	mov	r1, r6
 800cb08:	ee08 0a10 	vmov	s16, r0
 800cb0c:	f001 f80a 	bl	800db24 <__mcmp>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	dc03      	bgt.n	800cb1c <_dtoa_r+0xa9c>
 800cb14:	d1e0      	bne.n	800cad8 <_dtoa_r+0xa58>
 800cb16:	f01a 0f01 	tst.w	sl, #1
 800cb1a:	d0dd      	beq.n	800cad8 <_dtoa_r+0xa58>
 800cb1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb20:	d1d7      	bne.n	800cad2 <_dtoa_r+0xa52>
 800cb22:	2339      	movs	r3, #57	; 0x39
 800cb24:	f88b 3000 	strb.w	r3, [fp]
 800cb28:	462b      	mov	r3, r5
 800cb2a:	461d      	mov	r5, r3
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb32:	2a39      	cmp	r2, #57	; 0x39
 800cb34:	d071      	beq.n	800cc1a <_dtoa_r+0xb9a>
 800cb36:	3201      	adds	r2, #1
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	e746      	b.n	800c9ca <_dtoa_r+0x94a>
 800cb3c:	2a00      	cmp	r2, #0
 800cb3e:	dd07      	ble.n	800cb50 <_dtoa_r+0xad0>
 800cb40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb44:	d0ed      	beq.n	800cb22 <_dtoa_r+0xaa2>
 800cb46:	f10a 0301 	add.w	r3, sl, #1
 800cb4a:	f88b 3000 	strb.w	r3, [fp]
 800cb4e:	e73c      	b.n	800c9ca <_dtoa_r+0x94a>
 800cb50:	9b05      	ldr	r3, [sp, #20]
 800cb52:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cb56:	4599      	cmp	r9, r3
 800cb58:	d047      	beq.n	800cbea <_dtoa_r+0xb6a>
 800cb5a:	ee18 1a10 	vmov	r1, s16
 800cb5e:	2300      	movs	r3, #0
 800cb60:	220a      	movs	r2, #10
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 fd74 	bl	800d650 <__multadd>
 800cb68:	45b8      	cmp	r8, r7
 800cb6a:	ee08 0a10 	vmov	s16, r0
 800cb6e:	f04f 0300 	mov.w	r3, #0
 800cb72:	f04f 020a 	mov.w	r2, #10
 800cb76:	4641      	mov	r1, r8
 800cb78:	4620      	mov	r0, r4
 800cb7a:	d106      	bne.n	800cb8a <_dtoa_r+0xb0a>
 800cb7c:	f000 fd68 	bl	800d650 <__multadd>
 800cb80:	4680      	mov	r8, r0
 800cb82:	4607      	mov	r7, r0
 800cb84:	f109 0901 	add.w	r9, r9, #1
 800cb88:	e772      	b.n	800ca70 <_dtoa_r+0x9f0>
 800cb8a:	f000 fd61 	bl	800d650 <__multadd>
 800cb8e:	4639      	mov	r1, r7
 800cb90:	4680      	mov	r8, r0
 800cb92:	2300      	movs	r3, #0
 800cb94:	220a      	movs	r2, #10
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 fd5a 	bl	800d650 <__multadd>
 800cb9c:	4607      	mov	r7, r0
 800cb9e:	e7f1      	b.n	800cb84 <_dtoa_r+0xb04>
 800cba0:	9b03      	ldr	r3, [sp, #12]
 800cba2:	9302      	str	r3, [sp, #8]
 800cba4:	9d01      	ldr	r5, [sp, #4]
 800cba6:	ee18 0a10 	vmov	r0, s16
 800cbaa:	4631      	mov	r1, r6
 800cbac:	f7ff f9dc 	bl	800bf68 <quorem>
 800cbb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cbb4:	9b01      	ldr	r3, [sp, #4]
 800cbb6:	f805 ab01 	strb.w	sl, [r5], #1
 800cbba:	1aea      	subs	r2, r5, r3
 800cbbc:	9b02      	ldr	r3, [sp, #8]
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	dd09      	ble.n	800cbd6 <_dtoa_r+0xb56>
 800cbc2:	ee18 1a10 	vmov	r1, s16
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	220a      	movs	r2, #10
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f000 fd40 	bl	800d650 <__multadd>
 800cbd0:	ee08 0a10 	vmov	s16, r0
 800cbd4:	e7e7      	b.n	800cba6 <_dtoa_r+0xb26>
 800cbd6:	9b02      	ldr	r3, [sp, #8]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bfc8      	it	gt
 800cbdc:	461d      	movgt	r5, r3
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	bfd8      	it	le
 800cbe2:	2501      	movle	r5, #1
 800cbe4:	441d      	add	r5, r3
 800cbe6:	f04f 0800 	mov.w	r8, #0
 800cbea:	ee18 1a10 	vmov	r1, s16
 800cbee:	2201      	movs	r2, #1
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f000 ff27 	bl	800da44 <__lshift>
 800cbf6:	4631      	mov	r1, r6
 800cbf8:	ee08 0a10 	vmov	s16, r0
 800cbfc:	f000 ff92 	bl	800db24 <__mcmp>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	dc91      	bgt.n	800cb28 <_dtoa_r+0xaa8>
 800cc04:	d102      	bne.n	800cc0c <_dtoa_r+0xb8c>
 800cc06:	f01a 0f01 	tst.w	sl, #1
 800cc0a:	d18d      	bne.n	800cb28 <_dtoa_r+0xaa8>
 800cc0c:	462b      	mov	r3, r5
 800cc0e:	461d      	mov	r5, r3
 800cc10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc14:	2a30      	cmp	r2, #48	; 0x30
 800cc16:	d0fa      	beq.n	800cc0e <_dtoa_r+0xb8e>
 800cc18:	e6d7      	b.n	800c9ca <_dtoa_r+0x94a>
 800cc1a:	9a01      	ldr	r2, [sp, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d184      	bne.n	800cb2a <_dtoa_r+0xaaa>
 800cc20:	9b00      	ldr	r3, [sp, #0]
 800cc22:	3301      	adds	r3, #1
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	2331      	movs	r3, #49	; 0x31
 800cc28:	7013      	strb	r3, [r2, #0]
 800cc2a:	e6ce      	b.n	800c9ca <_dtoa_r+0x94a>
 800cc2c:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <_dtoa_r+0xbd4>)
 800cc2e:	f7ff ba95 	b.w	800c15c <_dtoa_r+0xdc>
 800cc32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f47f aa6e 	bne.w	800c116 <_dtoa_r+0x96>
 800cc3a:	4b07      	ldr	r3, [pc, #28]	; (800cc58 <_dtoa_r+0xbd8>)
 800cc3c:	f7ff ba8e 	b.w	800c15c <_dtoa_r+0xdc>
 800cc40:	9b02      	ldr	r3, [sp, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	dcae      	bgt.n	800cba4 <_dtoa_r+0xb24>
 800cc46:	9b06      	ldr	r3, [sp, #24]
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	f73f aea8 	bgt.w	800c99e <_dtoa_r+0x91e>
 800cc4e:	e7a9      	b.n	800cba4 <_dtoa_r+0xb24>
 800cc50:	08010048 	.word	0x08010048
 800cc54:	0800fe4c 	.word	0x0800fe4c
 800cc58:	0800ffc9 	.word	0x0800ffc9

0800cc5c <std>:
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	b510      	push	{r4, lr}
 800cc60:	4604      	mov	r4, r0
 800cc62:	e9c0 3300 	strd	r3, r3, [r0]
 800cc66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc6a:	6083      	str	r3, [r0, #8]
 800cc6c:	8181      	strh	r1, [r0, #12]
 800cc6e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc70:	81c2      	strh	r2, [r0, #14]
 800cc72:	6183      	str	r3, [r0, #24]
 800cc74:	4619      	mov	r1, r3
 800cc76:	2208      	movs	r2, #8
 800cc78:	305c      	adds	r0, #92	; 0x5c
 800cc7a:	f7fd fb17 	bl	800a2ac <memset>
 800cc7e:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <std+0x38>)
 800cc80:	6263      	str	r3, [r4, #36]	; 0x24
 800cc82:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <std+0x3c>)
 800cc84:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc86:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <std+0x40>)
 800cc88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc8a:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <std+0x44>)
 800cc8c:	6224      	str	r4, [r4, #32]
 800cc8e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc90:	bd10      	pop	{r4, pc}
 800cc92:	bf00      	nop
 800cc94:	0800e4b9 	.word	0x0800e4b9
 800cc98:	0800e4db 	.word	0x0800e4db
 800cc9c:	0800e513 	.word	0x0800e513
 800cca0:	0800e537 	.word	0x0800e537

0800cca4 <_cleanup_r>:
 800cca4:	4901      	ldr	r1, [pc, #4]	; (800ccac <_cleanup_r+0x8>)
 800cca6:	f000 b8af 	b.w	800ce08 <_fwalk_reent>
 800ccaa:	bf00      	nop
 800ccac:	0800e891 	.word	0x0800e891

0800ccb0 <__sfmoreglue>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	2268      	movs	r2, #104	; 0x68
 800ccb4:	1e4d      	subs	r5, r1, #1
 800ccb6:	4355      	muls	r5, r2
 800ccb8:	460e      	mov	r6, r1
 800ccba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccbe:	f7fd fb69 	bl	800a394 <_malloc_r>
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	b140      	cbz	r0, 800ccd8 <__sfmoreglue+0x28>
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	e9c0 1600 	strd	r1, r6, [r0]
 800cccc:	300c      	adds	r0, #12
 800ccce:	60a0      	str	r0, [r4, #8]
 800ccd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccd4:	f7fd faea 	bl	800a2ac <memset>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	bd70      	pop	{r4, r5, r6, pc}

0800ccdc <__sfp_lock_acquire>:
 800ccdc:	4801      	ldr	r0, [pc, #4]	; (800cce4 <__sfp_lock_acquire+0x8>)
 800ccde:	f000 bc26 	b.w	800d52e <__retarget_lock_acquire_recursive>
 800cce2:	bf00      	nop
 800cce4:	20000aa9 	.word	0x20000aa9

0800cce8 <__sfp_lock_release>:
 800cce8:	4801      	ldr	r0, [pc, #4]	; (800ccf0 <__sfp_lock_release+0x8>)
 800ccea:	f000 bc21 	b.w	800d530 <__retarget_lock_release_recursive>
 800ccee:	bf00      	nop
 800ccf0:	20000aa9 	.word	0x20000aa9

0800ccf4 <__sinit_lock_acquire>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	; (800ccfc <__sinit_lock_acquire+0x8>)
 800ccf6:	f000 bc1a 	b.w	800d52e <__retarget_lock_acquire_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	20000aaa 	.word	0x20000aaa

0800cd00 <__sinit_lock_release>:
 800cd00:	4801      	ldr	r0, [pc, #4]	; (800cd08 <__sinit_lock_release+0x8>)
 800cd02:	f000 bc15 	b.w	800d530 <__retarget_lock_release_recursive>
 800cd06:	bf00      	nop
 800cd08:	20000aaa 	.word	0x20000aaa

0800cd0c <__sinit>:
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	4604      	mov	r4, r0
 800cd10:	f7ff fff0 	bl	800ccf4 <__sinit_lock_acquire>
 800cd14:	69a3      	ldr	r3, [r4, #24]
 800cd16:	b11b      	cbz	r3, 800cd20 <__sinit+0x14>
 800cd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd1c:	f7ff bff0 	b.w	800cd00 <__sinit_lock_release>
 800cd20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd24:	6523      	str	r3, [r4, #80]	; 0x50
 800cd26:	4b13      	ldr	r3, [pc, #76]	; (800cd74 <__sinit+0x68>)
 800cd28:	4a13      	ldr	r2, [pc, #76]	; (800cd78 <__sinit+0x6c>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	bf04      	itt	eq
 800cd32:	2301      	moveq	r3, #1
 800cd34:	61a3      	streq	r3, [r4, #24]
 800cd36:	4620      	mov	r0, r4
 800cd38:	f000 f820 	bl	800cd7c <__sfp>
 800cd3c:	6060      	str	r0, [r4, #4]
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f000 f81c 	bl	800cd7c <__sfp>
 800cd44:	60a0      	str	r0, [r4, #8]
 800cd46:	4620      	mov	r0, r4
 800cd48:	f000 f818 	bl	800cd7c <__sfp>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	60e0      	str	r0, [r4, #12]
 800cd50:	2104      	movs	r1, #4
 800cd52:	6860      	ldr	r0, [r4, #4]
 800cd54:	f7ff ff82 	bl	800cc5c <std>
 800cd58:	68a0      	ldr	r0, [r4, #8]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	2109      	movs	r1, #9
 800cd5e:	f7ff ff7d 	bl	800cc5c <std>
 800cd62:	68e0      	ldr	r0, [r4, #12]
 800cd64:	2202      	movs	r2, #2
 800cd66:	2112      	movs	r1, #18
 800cd68:	f7ff ff78 	bl	800cc5c <std>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	61a3      	str	r3, [r4, #24]
 800cd70:	e7d2      	b.n	800cd18 <__sinit+0xc>
 800cd72:	bf00      	nop
 800cd74:	0800fe38 	.word	0x0800fe38
 800cd78:	0800cca5 	.word	0x0800cca5

0800cd7c <__sfp>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	4607      	mov	r7, r0
 800cd80:	f7ff ffac 	bl	800ccdc <__sfp_lock_acquire>
 800cd84:	4b1e      	ldr	r3, [pc, #120]	; (800ce00 <__sfp+0x84>)
 800cd86:	681e      	ldr	r6, [r3, #0]
 800cd88:	69b3      	ldr	r3, [r6, #24]
 800cd8a:	b913      	cbnz	r3, 800cd92 <__sfp+0x16>
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	f7ff ffbd 	bl	800cd0c <__sinit>
 800cd92:	3648      	adds	r6, #72	; 0x48
 800cd94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	d503      	bpl.n	800cda4 <__sfp+0x28>
 800cd9c:	6833      	ldr	r3, [r6, #0]
 800cd9e:	b30b      	cbz	r3, 800cde4 <__sfp+0x68>
 800cda0:	6836      	ldr	r6, [r6, #0]
 800cda2:	e7f7      	b.n	800cd94 <__sfp+0x18>
 800cda4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cda8:	b9d5      	cbnz	r5, 800cde0 <__sfp+0x64>
 800cdaa:	4b16      	ldr	r3, [pc, #88]	; (800ce04 <__sfp+0x88>)
 800cdac:	60e3      	str	r3, [r4, #12]
 800cdae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdb2:	6665      	str	r5, [r4, #100]	; 0x64
 800cdb4:	f000 fbba 	bl	800d52c <__retarget_lock_init_recursive>
 800cdb8:	f7ff ff96 	bl	800cce8 <__sfp_lock_release>
 800cdbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cdc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cdc4:	6025      	str	r5, [r4, #0]
 800cdc6:	61a5      	str	r5, [r4, #24]
 800cdc8:	2208      	movs	r2, #8
 800cdca:	4629      	mov	r1, r5
 800cdcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cdd0:	f7fd fa6c 	bl	800a2ac <memset>
 800cdd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cddc:	4620      	mov	r0, r4
 800cdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cde0:	3468      	adds	r4, #104	; 0x68
 800cde2:	e7d9      	b.n	800cd98 <__sfp+0x1c>
 800cde4:	2104      	movs	r1, #4
 800cde6:	4638      	mov	r0, r7
 800cde8:	f7ff ff62 	bl	800ccb0 <__sfmoreglue>
 800cdec:	4604      	mov	r4, r0
 800cdee:	6030      	str	r0, [r6, #0]
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d1d5      	bne.n	800cda0 <__sfp+0x24>
 800cdf4:	f7ff ff78 	bl	800cce8 <__sfp_lock_release>
 800cdf8:	230c      	movs	r3, #12
 800cdfa:	603b      	str	r3, [r7, #0]
 800cdfc:	e7ee      	b.n	800cddc <__sfp+0x60>
 800cdfe:	bf00      	nop
 800ce00:	0800fe38 	.word	0x0800fe38
 800ce04:	ffff0001 	.word	0xffff0001

0800ce08 <_fwalk_reent>:
 800ce08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce0c:	4606      	mov	r6, r0
 800ce0e:	4688      	mov	r8, r1
 800ce10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce14:	2700      	movs	r7, #0
 800ce16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ce1e:	d505      	bpl.n	800ce2c <_fwalk_reent+0x24>
 800ce20:	6824      	ldr	r4, [r4, #0]
 800ce22:	2c00      	cmp	r4, #0
 800ce24:	d1f7      	bne.n	800ce16 <_fwalk_reent+0xe>
 800ce26:	4638      	mov	r0, r7
 800ce28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce2c:	89ab      	ldrh	r3, [r5, #12]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d907      	bls.n	800ce42 <_fwalk_reent+0x3a>
 800ce32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce36:	3301      	adds	r3, #1
 800ce38:	d003      	beq.n	800ce42 <_fwalk_reent+0x3a>
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	47c0      	blx	r8
 800ce40:	4307      	orrs	r7, r0
 800ce42:	3568      	adds	r5, #104	; 0x68
 800ce44:	e7e9      	b.n	800ce1a <_fwalk_reent+0x12>

0800ce46 <rshift>:
 800ce46:	6903      	ldr	r3, [r0, #16]
 800ce48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce50:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce54:	f100 0414 	add.w	r4, r0, #20
 800ce58:	dd45      	ble.n	800cee6 <rshift+0xa0>
 800ce5a:	f011 011f 	ands.w	r1, r1, #31
 800ce5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce66:	d10c      	bne.n	800ce82 <rshift+0x3c>
 800ce68:	f100 0710 	add.w	r7, r0, #16
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	42b1      	cmp	r1, r6
 800ce70:	d334      	bcc.n	800cedc <rshift+0x96>
 800ce72:	1a9b      	subs	r3, r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	1eea      	subs	r2, r5, #3
 800ce78:	4296      	cmp	r6, r2
 800ce7a:	bf38      	it	cc
 800ce7c:	2300      	movcc	r3, #0
 800ce7e:	4423      	add	r3, r4
 800ce80:	e015      	b.n	800ceae <rshift+0x68>
 800ce82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce86:	f1c1 0820 	rsb	r8, r1, #32
 800ce8a:	40cf      	lsrs	r7, r1
 800ce8c:	f105 0e04 	add.w	lr, r5, #4
 800ce90:	46a1      	mov	r9, r4
 800ce92:	4576      	cmp	r6, lr
 800ce94:	46f4      	mov	ip, lr
 800ce96:	d815      	bhi.n	800cec4 <rshift+0x7e>
 800ce98:	1a9a      	subs	r2, r3, r2
 800ce9a:	0092      	lsls	r2, r2, #2
 800ce9c:	3a04      	subs	r2, #4
 800ce9e:	3501      	adds	r5, #1
 800cea0:	42ae      	cmp	r6, r5
 800cea2:	bf38      	it	cc
 800cea4:	2200      	movcc	r2, #0
 800cea6:	18a3      	adds	r3, r4, r2
 800cea8:	50a7      	str	r7, [r4, r2]
 800ceaa:	b107      	cbz	r7, 800ceae <rshift+0x68>
 800ceac:	3304      	adds	r3, #4
 800ceae:	1b1a      	subs	r2, r3, r4
 800ceb0:	42a3      	cmp	r3, r4
 800ceb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ceb6:	bf08      	it	eq
 800ceb8:	2300      	moveq	r3, #0
 800ceba:	6102      	str	r2, [r0, #16]
 800cebc:	bf08      	it	eq
 800cebe:	6143      	streq	r3, [r0, #20]
 800cec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cec4:	f8dc c000 	ldr.w	ip, [ip]
 800cec8:	fa0c fc08 	lsl.w	ip, ip, r8
 800cecc:	ea4c 0707 	orr.w	r7, ip, r7
 800ced0:	f849 7b04 	str.w	r7, [r9], #4
 800ced4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ced8:	40cf      	lsrs	r7, r1
 800ceda:	e7da      	b.n	800ce92 <rshift+0x4c>
 800cedc:	f851 cb04 	ldr.w	ip, [r1], #4
 800cee0:	f847 cf04 	str.w	ip, [r7, #4]!
 800cee4:	e7c3      	b.n	800ce6e <rshift+0x28>
 800cee6:	4623      	mov	r3, r4
 800cee8:	e7e1      	b.n	800ceae <rshift+0x68>

0800ceea <__hexdig_fun>:
 800ceea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ceee:	2b09      	cmp	r3, #9
 800cef0:	d802      	bhi.n	800cef8 <__hexdig_fun+0xe>
 800cef2:	3820      	subs	r0, #32
 800cef4:	b2c0      	uxtb	r0, r0
 800cef6:	4770      	bx	lr
 800cef8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cefc:	2b05      	cmp	r3, #5
 800cefe:	d801      	bhi.n	800cf04 <__hexdig_fun+0x1a>
 800cf00:	3847      	subs	r0, #71	; 0x47
 800cf02:	e7f7      	b.n	800cef4 <__hexdig_fun+0xa>
 800cf04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf08:	2b05      	cmp	r3, #5
 800cf0a:	d801      	bhi.n	800cf10 <__hexdig_fun+0x26>
 800cf0c:	3827      	subs	r0, #39	; 0x27
 800cf0e:	e7f1      	b.n	800cef4 <__hexdig_fun+0xa>
 800cf10:	2000      	movs	r0, #0
 800cf12:	4770      	bx	lr

0800cf14 <__gethex>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	ed2d 8b02 	vpush	{d8}
 800cf1c:	b089      	sub	sp, #36	; 0x24
 800cf1e:	ee08 0a10 	vmov	s16, r0
 800cf22:	9304      	str	r3, [sp, #16]
 800cf24:	4bb4      	ldr	r3, [pc, #720]	; (800d1f8 <__gethex+0x2e4>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	468b      	mov	fp, r1
 800cf2e:	4690      	mov	r8, r2
 800cf30:	f7f3 f94e 	bl	80001d0 <strlen>
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	f8db 2000 	ldr.w	r2, [fp]
 800cf3a:	4403      	add	r3, r0
 800cf3c:	4682      	mov	sl, r0
 800cf3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	1c93      	adds	r3, r2, #2
 800cf46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf4e:	32fe      	adds	r2, #254	; 0xfe
 800cf50:	18d1      	adds	r1, r2, r3
 800cf52:	461f      	mov	r7, r3
 800cf54:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf58:	9100      	str	r1, [sp, #0]
 800cf5a:	2830      	cmp	r0, #48	; 0x30
 800cf5c:	d0f8      	beq.n	800cf50 <__gethex+0x3c>
 800cf5e:	f7ff ffc4 	bl	800ceea <__hexdig_fun>
 800cf62:	4604      	mov	r4, r0
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d13a      	bne.n	800cfde <__gethex+0xca>
 800cf68:	9901      	ldr	r1, [sp, #4]
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f001 fae6 	bl	800e53e <strncmp>
 800cf72:	4605      	mov	r5, r0
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d168      	bne.n	800d04a <__gethex+0x136>
 800cf78:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cf7c:	eb07 060a 	add.w	r6, r7, sl
 800cf80:	f7ff ffb3 	bl	800ceea <__hexdig_fun>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d062      	beq.n	800d04e <__gethex+0x13a>
 800cf88:	4633      	mov	r3, r6
 800cf8a:	7818      	ldrb	r0, [r3, #0]
 800cf8c:	2830      	cmp	r0, #48	; 0x30
 800cf8e:	461f      	mov	r7, r3
 800cf90:	f103 0301 	add.w	r3, r3, #1
 800cf94:	d0f9      	beq.n	800cf8a <__gethex+0x76>
 800cf96:	f7ff ffa8 	bl	800ceea <__hexdig_fun>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	fab0 f480 	clz	r4, r0
 800cfa0:	0964      	lsrs	r4, r4, #5
 800cfa2:	4635      	mov	r5, r6
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	463a      	mov	r2, r7
 800cfa8:	4616      	mov	r6, r2
 800cfaa:	3201      	adds	r2, #1
 800cfac:	7830      	ldrb	r0, [r6, #0]
 800cfae:	f7ff ff9c 	bl	800ceea <__hexdig_fun>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d1f8      	bne.n	800cfa8 <__gethex+0x94>
 800cfb6:	9901      	ldr	r1, [sp, #4]
 800cfb8:	4652      	mov	r2, sl
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f001 fabf 	bl	800e53e <strncmp>
 800cfc0:	b980      	cbnz	r0, 800cfe4 <__gethex+0xd0>
 800cfc2:	b94d      	cbnz	r5, 800cfd8 <__gethex+0xc4>
 800cfc4:	eb06 050a 	add.w	r5, r6, sl
 800cfc8:	462a      	mov	r2, r5
 800cfca:	4616      	mov	r6, r2
 800cfcc:	3201      	adds	r2, #1
 800cfce:	7830      	ldrb	r0, [r6, #0]
 800cfd0:	f7ff ff8b 	bl	800ceea <__hexdig_fun>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d1f8      	bne.n	800cfca <__gethex+0xb6>
 800cfd8:	1bad      	subs	r5, r5, r6
 800cfda:	00ad      	lsls	r5, r5, #2
 800cfdc:	e004      	b.n	800cfe8 <__gethex+0xd4>
 800cfde:	2400      	movs	r4, #0
 800cfe0:	4625      	mov	r5, r4
 800cfe2:	e7e0      	b.n	800cfa6 <__gethex+0x92>
 800cfe4:	2d00      	cmp	r5, #0
 800cfe6:	d1f7      	bne.n	800cfd8 <__gethex+0xc4>
 800cfe8:	7833      	ldrb	r3, [r6, #0]
 800cfea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfee:	2b50      	cmp	r3, #80	; 0x50
 800cff0:	d13b      	bne.n	800d06a <__gethex+0x156>
 800cff2:	7873      	ldrb	r3, [r6, #1]
 800cff4:	2b2b      	cmp	r3, #43	; 0x2b
 800cff6:	d02c      	beq.n	800d052 <__gethex+0x13e>
 800cff8:	2b2d      	cmp	r3, #45	; 0x2d
 800cffa:	d02e      	beq.n	800d05a <__gethex+0x146>
 800cffc:	1c71      	adds	r1, r6, #1
 800cffe:	f04f 0900 	mov.w	r9, #0
 800d002:	7808      	ldrb	r0, [r1, #0]
 800d004:	f7ff ff71 	bl	800ceea <__hexdig_fun>
 800d008:	1e43      	subs	r3, r0, #1
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b18      	cmp	r3, #24
 800d00e:	d82c      	bhi.n	800d06a <__gethex+0x156>
 800d010:	f1a0 0210 	sub.w	r2, r0, #16
 800d014:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d018:	f7ff ff67 	bl	800ceea <__hexdig_fun>
 800d01c:	1e43      	subs	r3, r0, #1
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	2b18      	cmp	r3, #24
 800d022:	d91d      	bls.n	800d060 <__gethex+0x14c>
 800d024:	f1b9 0f00 	cmp.w	r9, #0
 800d028:	d000      	beq.n	800d02c <__gethex+0x118>
 800d02a:	4252      	negs	r2, r2
 800d02c:	4415      	add	r5, r2
 800d02e:	f8cb 1000 	str.w	r1, [fp]
 800d032:	b1e4      	cbz	r4, 800d06e <__gethex+0x15a>
 800d034:	9b00      	ldr	r3, [sp, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	bf14      	ite	ne
 800d03a:	2700      	movne	r7, #0
 800d03c:	2706      	moveq	r7, #6
 800d03e:	4638      	mov	r0, r7
 800d040:	b009      	add	sp, #36	; 0x24
 800d042:	ecbd 8b02 	vpop	{d8}
 800d046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04a:	463e      	mov	r6, r7
 800d04c:	4625      	mov	r5, r4
 800d04e:	2401      	movs	r4, #1
 800d050:	e7ca      	b.n	800cfe8 <__gethex+0xd4>
 800d052:	f04f 0900 	mov.w	r9, #0
 800d056:	1cb1      	adds	r1, r6, #2
 800d058:	e7d3      	b.n	800d002 <__gethex+0xee>
 800d05a:	f04f 0901 	mov.w	r9, #1
 800d05e:	e7fa      	b.n	800d056 <__gethex+0x142>
 800d060:	230a      	movs	r3, #10
 800d062:	fb03 0202 	mla	r2, r3, r2, r0
 800d066:	3a10      	subs	r2, #16
 800d068:	e7d4      	b.n	800d014 <__gethex+0x100>
 800d06a:	4631      	mov	r1, r6
 800d06c:	e7df      	b.n	800d02e <__gethex+0x11a>
 800d06e:	1bf3      	subs	r3, r6, r7
 800d070:	3b01      	subs	r3, #1
 800d072:	4621      	mov	r1, r4
 800d074:	2b07      	cmp	r3, #7
 800d076:	dc0b      	bgt.n	800d090 <__gethex+0x17c>
 800d078:	ee18 0a10 	vmov	r0, s16
 800d07c:	f000 fa86 	bl	800d58c <_Balloc>
 800d080:	4604      	mov	r4, r0
 800d082:	b940      	cbnz	r0, 800d096 <__gethex+0x182>
 800d084:	4b5d      	ldr	r3, [pc, #372]	; (800d1fc <__gethex+0x2e8>)
 800d086:	4602      	mov	r2, r0
 800d088:	21de      	movs	r1, #222	; 0xde
 800d08a:	485d      	ldr	r0, [pc, #372]	; (800d200 <__gethex+0x2ec>)
 800d08c:	f001 fb4c 	bl	800e728 <__assert_func>
 800d090:	3101      	adds	r1, #1
 800d092:	105b      	asrs	r3, r3, #1
 800d094:	e7ee      	b.n	800d074 <__gethex+0x160>
 800d096:	f100 0914 	add.w	r9, r0, #20
 800d09a:	f04f 0b00 	mov.w	fp, #0
 800d09e:	f1ca 0301 	rsb	r3, sl, #1
 800d0a2:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0a6:	f8cd b000 	str.w	fp, [sp]
 800d0aa:	9306      	str	r3, [sp, #24]
 800d0ac:	42b7      	cmp	r7, r6
 800d0ae:	d340      	bcc.n	800d132 <__gethex+0x21e>
 800d0b0:	9802      	ldr	r0, [sp, #8]
 800d0b2:	9b00      	ldr	r3, [sp, #0]
 800d0b4:	f840 3b04 	str.w	r3, [r0], #4
 800d0b8:	eba0 0009 	sub.w	r0, r0, r9
 800d0bc:	1080      	asrs	r0, r0, #2
 800d0be:	0146      	lsls	r6, r0, #5
 800d0c0:	6120      	str	r0, [r4, #16]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f000 fb54 	bl	800d770 <__hi0bits>
 800d0c8:	1a30      	subs	r0, r6, r0
 800d0ca:	f8d8 6000 	ldr.w	r6, [r8]
 800d0ce:	42b0      	cmp	r0, r6
 800d0d0:	dd63      	ble.n	800d19a <__gethex+0x286>
 800d0d2:	1b87      	subs	r7, r0, r6
 800d0d4:	4639      	mov	r1, r7
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f000 fef8 	bl	800decc <__any_on>
 800d0dc:	4682      	mov	sl, r0
 800d0de:	b1a8      	cbz	r0, 800d10c <__gethex+0x1f8>
 800d0e0:	1e7b      	subs	r3, r7, #1
 800d0e2:	1159      	asrs	r1, r3, #5
 800d0e4:	f003 021f 	and.w	r2, r3, #31
 800d0e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d0ec:	f04f 0a01 	mov.w	sl, #1
 800d0f0:	fa0a f202 	lsl.w	r2, sl, r2
 800d0f4:	420a      	tst	r2, r1
 800d0f6:	d009      	beq.n	800d10c <__gethex+0x1f8>
 800d0f8:	4553      	cmp	r3, sl
 800d0fa:	dd05      	ble.n	800d108 <__gethex+0x1f4>
 800d0fc:	1eb9      	subs	r1, r7, #2
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 fee4 	bl	800decc <__any_on>
 800d104:	2800      	cmp	r0, #0
 800d106:	d145      	bne.n	800d194 <__gethex+0x280>
 800d108:	f04f 0a02 	mov.w	sl, #2
 800d10c:	4639      	mov	r1, r7
 800d10e:	4620      	mov	r0, r4
 800d110:	f7ff fe99 	bl	800ce46 <rshift>
 800d114:	443d      	add	r5, r7
 800d116:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d11a:	42ab      	cmp	r3, r5
 800d11c:	da4c      	bge.n	800d1b8 <__gethex+0x2a4>
 800d11e:	ee18 0a10 	vmov	r0, s16
 800d122:	4621      	mov	r1, r4
 800d124:	f000 fa72 	bl	800d60c <_Bfree>
 800d128:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d12a:	2300      	movs	r3, #0
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	27a3      	movs	r7, #163	; 0xa3
 800d130:	e785      	b.n	800d03e <__gethex+0x12a>
 800d132:	1e73      	subs	r3, r6, #1
 800d134:	9a05      	ldr	r2, [sp, #20]
 800d136:	9303      	str	r3, [sp, #12]
 800d138:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d019      	beq.n	800d174 <__gethex+0x260>
 800d140:	f1bb 0f20 	cmp.w	fp, #32
 800d144:	d107      	bne.n	800d156 <__gethex+0x242>
 800d146:	9b02      	ldr	r3, [sp, #8]
 800d148:	9a00      	ldr	r2, [sp, #0]
 800d14a:	f843 2b04 	str.w	r2, [r3], #4
 800d14e:	9302      	str	r3, [sp, #8]
 800d150:	2300      	movs	r3, #0
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	469b      	mov	fp, r3
 800d156:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d15a:	f7ff fec6 	bl	800ceea <__hexdig_fun>
 800d15e:	9b00      	ldr	r3, [sp, #0]
 800d160:	f000 000f 	and.w	r0, r0, #15
 800d164:	fa00 f00b 	lsl.w	r0, r0, fp
 800d168:	4303      	orrs	r3, r0
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	f10b 0b04 	add.w	fp, fp, #4
 800d170:	9b03      	ldr	r3, [sp, #12]
 800d172:	e00d      	b.n	800d190 <__gethex+0x27c>
 800d174:	9b03      	ldr	r3, [sp, #12]
 800d176:	9a06      	ldr	r2, [sp, #24]
 800d178:	4413      	add	r3, r2
 800d17a:	42bb      	cmp	r3, r7
 800d17c:	d3e0      	bcc.n	800d140 <__gethex+0x22c>
 800d17e:	4618      	mov	r0, r3
 800d180:	9901      	ldr	r1, [sp, #4]
 800d182:	9307      	str	r3, [sp, #28]
 800d184:	4652      	mov	r2, sl
 800d186:	f001 f9da 	bl	800e53e <strncmp>
 800d18a:	9b07      	ldr	r3, [sp, #28]
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d1d7      	bne.n	800d140 <__gethex+0x22c>
 800d190:	461e      	mov	r6, r3
 800d192:	e78b      	b.n	800d0ac <__gethex+0x198>
 800d194:	f04f 0a03 	mov.w	sl, #3
 800d198:	e7b8      	b.n	800d10c <__gethex+0x1f8>
 800d19a:	da0a      	bge.n	800d1b2 <__gethex+0x29e>
 800d19c:	1a37      	subs	r7, r6, r0
 800d19e:	4621      	mov	r1, r4
 800d1a0:	ee18 0a10 	vmov	r0, s16
 800d1a4:	463a      	mov	r2, r7
 800d1a6:	f000 fc4d 	bl	800da44 <__lshift>
 800d1aa:	1bed      	subs	r5, r5, r7
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	f100 0914 	add.w	r9, r0, #20
 800d1b2:	f04f 0a00 	mov.w	sl, #0
 800d1b6:	e7ae      	b.n	800d116 <__gethex+0x202>
 800d1b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d1bc:	42a8      	cmp	r0, r5
 800d1be:	dd72      	ble.n	800d2a6 <__gethex+0x392>
 800d1c0:	1b45      	subs	r5, r0, r5
 800d1c2:	42ae      	cmp	r6, r5
 800d1c4:	dc36      	bgt.n	800d234 <__gethex+0x320>
 800d1c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d02a      	beq.n	800d224 <__gethex+0x310>
 800d1ce:	2b03      	cmp	r3, #3
 800d1d0:	d02c      	beq.n	800d22c <__gethex+0x318>
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d11c      	bne.n	800d210 <__gethex+0x2fc>
 800d1d6:	42ae      	cmp	r6, r5
 800d1d8:	d11a      	bne.n	800d210 <__gethex+0x2fc>
 800d1da:	2e01      	cmp	r6, #1
 800d1dc:	d112      	bne.n	800d204 <__gethex+0x2f0>
 800d1de:	9a04      	ldr	r2, [sp, #16]
 800d1e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1e4:	6013      	str	r3, [r2, #0]
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	6123      	str	r3, [r4, #16]
 800d1ea:	f8c9 3000 	str.w	r3, [r9]
 800d1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1f0:	2762      	movs	r7, #98	; 0x62
 800d1f2:	601c      	str	r4, [r3, #0]
 800d1f4:	e723      	b.n	800d03e <__gethex+0x12a>
 800d1f6:	bf00      	nop
 800d1f8:	08010124 	.word	0x08010124
 800d1fc:	08010048 	.word	0x08010048
 800d200:	080100bc 	.word	0x080100bc
 800d204:	1e71      	subs	r1, r6, #1
 800d206:	4620      	mov	r0, r4
 800d208:	f000 fe60 	bl	800decc <__any_on>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d1e6      	bne.n	800d1de <__gethex+0x2ca>
 800d210:	ee18 0a10 	vmov	r0, s16
 800d214:	4621      	mov	r1, r4
 800d216:	f000 f9f9 	bl	800d60c <_Bfree>
 800d21a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d21c:	2300      	movs	r3, #0
 800d21e:	6013      	str	r3, [r2, #0]
 800d220:	2750      	movs	r7, #80	; 0x50
 800d222:	e70c      	b.n	800d03e <__gethex+0x12a>
 800d224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1f2      	bne.n	800d210 <__gethex+0x2fc>
 800d22a:	e7d8      	b.n	800d1de <__gethex+0x2ca>
 800d22c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1d5      	bne.n	800d1de <__gethex+0x2ca>
 800d232:	e7ed      	b.n	800d210 <__gethex+0x2fc>
 800d234:	1e6f      	subs	r7, r5, #1
 800d236:	f1ba 0f00 	cmp.w	sl, #0
 800d23a:	d131      	bne.n	800d2a0 <__gethex+0x38c>
 800d23c:	b127      	cbz	r7, 800d248 <__gethex+0x334>
 800d23e:	4639      	mov	r1, r7
 800d240:	4620      	mov	r0, r4
 800d242:	f000 fe43 	bl	800decc <__any_on>
 800d246:	4682      	mov	sl, r0
 800d248:	117b      	asrs	r3, r7, #5
 800d24a:	2101      	movs	r1, #1
 800d24c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d250:	f007 071f 	and.w	r7, r7, #31
 800d254:	fa01 f707 	lsl.w	r7, r1, r7
 800d258:	421f      	tst	r7, r3
 800d25a:	4629      	mov	r1, r5
 800d25c:	4620      	mov	r0, r4
 800d25e:	bf18      	it	ne
 800d260:	f04a 0a02 	orrne.w	sl, sl, #2
 800d264:	1b76      	subs	r6, r6, r5
 800d266:	f7ff fdee 	bl	800ce46 <rshift>
 800d26a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d26e:	2702      	movs	r7, #2
 800d270:	f1ba 0f00 	cmp.w	sl, #0
 800d274:	d048      	beq.n	800d308 <__gethex+0x3f4>
 800d276:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	d015      	beq.n	800d2aa <__gethex+0x396>
 800d27e:	2b03      	cmp	r3, #3
 800d280:	d017      	beq.n	800d2b2 <__gethex+0x39e>
 800d282:	2b01      	cmp	r3, #1
 800d284:	d109      	bne.n	800d29a <__gethex+0x386>
 800d286:	f01a 0f02 	tst.w	sl, #2
 800d28a:	d006      	beq.n	800d29a <__gethex+0x386>
 800d28c:	f8d9 0000 	ldr.w	r0, [r9]
 800d290:	ea4a 0a00 	orr.w	sl, sl, r0
 800d294:	f01a 0f01 	tst.w	sl, #1
 800d298:	d10e      	bne.n	800d2b8 <__gethex+0x3a4>
 800d29a:	f047 0710 	orr.w	r7, r7, #16
 800d29e:	e033      	b.n	800d308 <__gethex+0x3f4>
 800d2a0:	f04f 0a01 	mov.w	sl, #1
 800d2a4:	e7d0      	b.n	800d248 <__gethex+0x334>
 800d2a6:	2701      	movs	r7, #1
 800d2a8:	e7e2      	b.n	800d270 <__gethex+0x35c>
 800d2aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2ac:	f1c3 0301 	rsb	r3, r3, #1
 800d2b0:	9315      	str	r3, [sp, #84]	; 0x54
 800d2b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d0f0      	beq.n	800d29a <__gethex+0x386>
 800d2b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2bc:	f104 0314 	add.w	r3, r4, #20
 800d2c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d2c8:	f04f 0c00 	mov.w	ip, #0
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d2d6:	d01c      	beq.n	800d312 <__gethex+0x3fe>
 800d2d8:	3201      	adds	r2, #1
 800d2da:	6002      	str	r2, [r0, #0]
 800d2dc:	2f02      	cmp	r7, #2
 800d2de:	f104 0314 	add.w	r3, r4, #20
 800d2e2:	d13f      	bne.n	800d364 <__gethex+0x450>
 800d2e4:	f8d8 2000 	ldr.w	r2, [r8]
 800d2e8:	3a01      	subs	r2, #1
 800d2ea:	42b2      	cmp	r2, r6
 800d2ec:	d10a      	bne.n	800d304 <__gethex+0x3f0>
 800d2ee:	1171      	asrs	r1, r6, #5
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2f6:	f006 061f 	and.w	r6, r6, #31
 800d2fa:	fa02 f606 	lsl.w	r6, r2, r6
 800d2fe:	421e      	tst	r6, r3
 800d300:	bf18      	it	ne
 800d302:	4617      	movne	r7, r2
 800d304:	f047 0720 	orr.w	r7, r7, #32
 800d308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d30a:	601c      	str	r4, [r3, #0]
 800d30c:	9b04      	ldr	r3, [sp, #16]
 800d30e:	601d      	str	r5, [r3, #0]
 800d310:	e695      	b.n	800d03e <__gethex+0x12a>
 800d312:	4299      	cmp	r1, r3
 800d314:	f843 cc04 	str.w	ip, [r3, #-4]
 800d318:	d8d8      	bhi.n	800d2cc <__gethex+0x3b8>
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	459b      	cmp	fp, r3
 800d31e:	db19      	blt.n	800d354 <__gethex+0x440>
 800d320:	6861      	ldr	r1, [r4, #4]
 800d322:	ee18 0a10 	vmov	r0, s16
 800d326:	3101      	adds	r1, #1
 800d328:	f000 f930 	bl	800d58c <_Balloc>
 800d32c:	4681      	mov	r9, r0
 800d32e:	b918      	cbnz	r0, 800d338 <__gethex+0x424>
 800d330:	4b1a      	ldr	r3, [pc, #104]	; (800d39c <__gethex+0x488>)
 800d332:	4602      	mov	r2, r0
 800d334:	2184      	movs	r1, #132	; 0x84
 800d336:	e6a8      	b.n	800d08a <__gethex+0x176>
 800d338:	6922      	ldr	r2, [r4, #16]
 800d33a:	3202      	adds	r2, #2
 800d33c:	f104 010c 	add.w	r1, r4, #12
 800d340:	0092      	lsls	r2, r2, #2
 800d342:	300c      	adds	r0, #12
 800d344:	f000 f907 	bl	800d556 <memcpy>
 800d348:	4621      	mov	r1, r4
 800d34a:	ee18 0a10 	vmov	r0, s16
 800d34e:	f000 f95d 	bl	800d60c <_Bfree>
 800d352:	464c      	mov	r4, r9
 800d354:	6923      	ldr	r3, [r4, #16]
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d35c:	6122      	str	r2, [r4, #16]
 800d35e:	2201      	movs	r2, #1
 800d360:	615a      	str	r2, [r3, #20]
 800d362:	e7bb      	b.n	800d2dc <__gethex+0x3c8>
 800d364:	6922      	ldr	r2, [r4, #16]
 800d366:	455a      	cmp	r2, fp
 800d368:	dd0b      	ble.n	800d382 <__gethex+0x46e>
 800d36a:	2101      	movs	r1, #1
 800d36c:	4620      	mov	r0, r4
 800d36e:	f7ff fd6a 	bl	800ce46 <rshift>
 800d372:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d376:	3501      	adds	r5, #1
 800d378:	42ab      	cmp	r3, r5
 800d37a:	f6ff aed0 	blt.w	800d11e <__gethex+0x20a>
 800d37e:	2701      	movs	r7, #1
 800d380:	e7c0      	b.n	800d304 <__gethex+0x3f0>
 800d382:	f016 061f 	ands.w	r6, r6, #31
 800d386:	d0fa      	beq.n	800d37e <__gethex+0x46a>
 800d388:	4453      	add	r3, sl
 800d38a:	f1c6 0620 	rsb	r6, r6, #32
 800d38e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d392:	f000 f9ed 	bl	800d770 <__hi0bits>
 800d396:	42b0      	cmp	r0, r6
 800d398:	dbe7      	blt.n	800d36a <__gethex+0x456>
 800d39a:	e7f0      	b.n	800d37e <__gethex+0x46a>
 800d39c:	08010048 	.word	0x08010048

0800d3a0 <L_shift>:
 800d3a0:	f1c2 0208 	rsb	r2, r2, #8
 800d3a4:	0092      	lsls	r2, r2, #2
 800d3a6:	b570      	push	{r4, r5, r6, lr}
 800d3a8:	f1c2 0620 	rsb	r6, r2, #32
 800d3ac:	6843      	ldr	r3, [r0, #4]
 800d3ae:	6804      	ldr	r4, [r0, #0]
 800d3b0:	fa03 f506 	lsl.w	r5, r3, r6
 800d3b4:	432c      	orrs	r4, r5
 800d3b6:	40d3      	lsrs	r3, r2
 800d3b8:	6004      	str	r4, [r0, #0]
 800d3ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3be:	4288      	cmp	r0, r1
 800d3c0:	d3f4      	bcc.n	800d3ac <L_shift+0xc>
 800d3c2:	bd70      	pop	{r4, r5, r6, pc}

0800d3c4 <__match>:
 800d3c4:	b530      	push	{r4, r5, lr}
 800d3c6:	6803      	ldr	r3, [r0, #0]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ce:	b914      	cbnz	r4, 800d3d6 <__match+0x12>
 800d3d0:	6003      	str	r3, [r0, #0]
 800d3d2:	2001      	movs	r0, #1
 800d3d4:	bd30      	pop	{r4, r5, pc}
 800d3d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d3de:	2d19      	cmp	r5, #25
 800d3e0:	bf98      	it	ls
 800d3e2:	3220      	addls	r2, #32
 800d3e4:	42a2      	cmp	r2, r4
 800d3e6:	d0f0      	beq.n	800d3ca <__match+0x6>
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	e7f3      	b.n	800d3d4 <__match+0x10>

0800d3ec <__hexnan>:
 800d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f0:	680b      	ldr	r3, [r1, #0]
 800d3f2:	115e      	asrs	r6, r3, #5
 800d3f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3f8:	f013 031f 	ands.w	r3, r3, #31
 800d3fc:	b087      	sub	sp, #28
 800d3fe:	bf18      	it	ne
 800d400:	3604      	addne	r6, #4
 800d402:	2500      	movs	r5, #0
 800d404:	1f37      	subs	r7, r6, #4
 800d406:	4690      	mov	r8, r2
 800d408:	6802      	ldr	r2, [r0, #0]
 800d40a:	9301      	str	r3, [sp, #4]
 800d40c:	4682      	mov	sl, r0
 800d40e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d412:	46b9      	mov	r9, r7
 800d414:	463c      	mov	r4, r7
 800d416:	9502      	str	r5, [sp, #8]
 800d418:	46ab      	mov	fp, r5
 800d41a:	7851      	ldrb	r1, [r2, #1]
 800d41c:	1c53      	adds	r3, r2, #1
 800d41e:	9303      	str	r3, [sp, #12]
 800d420:	b341      	cbz	r1, 800d474 <__hexnan+0x88>
 800d422:	4608      	mov	r0, r1
 800d424:	9205      	str	r2, [sp, #20]
 800d426:	9104      	str	r1, [sp, #16]
 800d428:	f7ff fd5f 	bl	800ceea <__hexdig_fun>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d14f      	bne.n	800d4d0 <__hexnan+0xe4>
 800d430:	9904      	ldr	r1, [sp, #16]
 800d432:	9a05      	ldr	r2, [sp, #20]
 800d434:	2920      	cmp	r1, #32
 800d436:	d818      	bhi.n	800d46a <__hexnan+0x7e>
 800d438:	9b02      	ldr	r3, [sp, #8]
 800d43a:	459b      	cmp	fp, r3
 800d43c:	dd13      	ble.n	800d466 <__hexnan+0x7a>
 800d43e:	454c      	cmp	r4, r9
 800d440:	d206      	bcs.n	800d450 <__hexnan+0x64>
 800d442:	2d07      	cmp	r5, #7
 800d444:	dc04      	bgt.n	800d450 <__hexnan+0x64>
 800d446:	462a      	mov	r2, r5
 800d448:	4649      	mov	r1, r9
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7ff ffa8 	bl	800d3a0 <L_shift>
 800d450:	4544      	cmp	r4, r8
 800d452:	d950      	bls.n	800d4f6 <__hexnan+0x10a>
 800d454:	2300      	movs	r3, #0
 800d456:	f1a4 0904 	sub.w	r9, r4, #4
 800d45a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d45e:	f8cd b008 	str.w	fp, [sp, #8]
 800d462:	464c      	mov	r4, r9
 800d464:	461d      	mov	r5, r3
 800d466:	9a03      	ldr	r2, [sp, #12]
 800d468:	e7d7      	b.n	800d41a <__hexnan+0x2e>
 800d46a:	2929      	cmp	r1, #41	; 0x29
 800d46c:	d156      	bne.n	800d51c <__hexnan+0x130>
 800d46e:	3202      	adds	r2, #2
 800d470:	f8ca 2000 	str.w	r2, [sl]
 800d474:	f1bb 0f00 	cmp.w	fp, #0
 800d478:	d050      	beq.n	800d51c <__hexnan+0x130>
 800d47a:	454c      	cmp	r4, r9
 800d47c:	d206      	bcs.n	800d48c <__hexnan+0xa0>
 800d47e:	2d07      	cmp	r5, #7
 800d480:	dc04      	bgt.n	800d48c <__hexnan+0xa0>
 800d482:	462a      	mov	r2, r5
 800d484:	4649      	mov	r1, r9
 800d486:	4620      	mov	r0, r4
 800d488:	f7ff ff8a 	bl	800d3a0 <L_shift>
 800d48c:	4544      	cmp	r4, r8
 800d48e:	d934      	bls.n	800d4fa <__hexnan+0x10e>
 800d490:	f1a8 0204 	sub.w	r2, r8, #4
 800d494:	4623      	mov	r3, r4
 800d496:	f853 1b04 	ldr.w	r1, [r3], #4
 800d49a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d49e:	429f      	cmp	r7, r3
 800d4a0:	d2f9      	bcs.n	800d496 <__hexnan+0xaa>
 800d4a2:	1b3b      	subs	r3, r7, r4
 800d4a4:	f023 0303 	bic.w	r3, r3, #3
 800d4a8:	3304      	adds	r3, #4
 800d4aa:	3401      	adds	r4, #1
 800d4ac:	3e03      	subs	r6, #3
 800d4ae:	42b4      	cmp	r4, r6
 800d4b0:	bf88      	it	hi
 800d4b2:	2304      	movhi	r3, #4
 800d4b4:	4443      	add	r3, r8
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f843 2b04 	str.w	r2, [r3], #4
 800d4bc:	429f      	cmp	r7, r3
 800d4be:	d2fb      	bcs.n	800d4b8 <__hexnan+0xcc>
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	b91b      	cbnz	r3, 800d4cc <__hexnan+0xe0>
 800d4c4:	4547      	cmp	r7, r8
 800d4c6:	d127      	bne.n	800d518 <__hexnan+0x12c>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	603b      	str	r3, [r7, #0]
 800d4cc:	2005      	movs	r0, #5
 800d4ce:	e026      	b.n	800d51e <__hexnan+0x132>
 800d4d0:	3501      	adds	r5, #1
 800d4d2:	2d08      	cmp	r5, #8
 800d4d4:	f10b 0b01 	add.w	fp, fp, #1
 800d4d8:	dd06      	ble.n	800d4e8 <__hexnan+0xfc>
 800d4da:	4544      	cmp	r4, r8
 800d4dc:	d9c3      	bls.n	800d466 <__hexnan+0x7a>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4e4:	2501      	movs	r5, #1
 800d4e6:	3c04      	subs	r4, #4
 800d4e8:	6822      	ldr	r2, [r4, #0]
 800d4ea:	f000 000f 	and.w	r0, r0, #15
 800d4ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d4f2:	6022      	str	r2, [r4, #0]
 800d4f4:	e7b7      	b.n	800d466 <__hexnan+0x7a>
 800d4f6:	2508      	movs	r5, #8
 800d4f8:	e7b5      	b.n	800d466 <__hexnan+0x7a>
 800d4fa:	9b01      	ldr	r3, [sp, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d0df      	beq.n	800d4c0 <__hexnan+0xd4>
 800d500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d504:	f1c3 0320 	rsb	r3, r3, #32
 800d508:	fa22 f303 	lsr.w	r3, r2, r3
 800d50c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d510:	401a      	ands	r2, r3
 800d512:	f846 2c04 	str.w	r2, [r6, #-4]
 800d516:	e7d3      	b.n	800d4c0 <__hexnan+0xd4>
 800d518:	3f04      	subs	r7, #4
 800d51a:	e7d1      	b.n	800d4c0 <__hexnan+0xd4>
 800d51c:	2004      	movs	r0, #4
 800d51e:	b007      	add	sp, #28
 800d520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d524 <_localeconv_r>:
 800d524:	4800      	ldr	r0, [pc, #0]	; (800d528 <_localeconv_r+0x4>)
 800d526:	4770      	bx	lr
 800d528:	20000184 	.word	0x20000184

0800d52c <__retarget_lock_init_recursive>:
 800d52c:	4770      	bx	lr

0800d52e <__retarget_lock_acquire_recursive>:
 800d52e:	4770      	bx	lr

0800d530 <__retarget_lock_release_recursive>:
 800d530:	4770      	bx	lr

0800d532 <__ascii_mbtowc>:
 800d532:	b082      	sub	sp, #8
 800d534:	b901      	cbnz	r1, 800d538 <__ascii_mbtowc+0x6>
 800d536:	a901      	add	r1, sp, #4
 800d538:	b142      	cbz	r2, 800d54c <__ascii_mbtowc+0x1a>
 800d53a:	b14b      	cbz	r3, 800d550 <__ascii_mbtowc+0x1e>
 800d53c:	7813      	ldrb	r3, [r2, #0]
 800d53e:	600b      	str	r3, [r1, #0]
 800d540:	7812      	ldrb	r2, [r2, #0]
 800d542:	1e10      	subs	r0, r2, #0
 800d544:	bf18      	it	ne
 800d546:	2001      	movne	r0, #1
 800d548:	b002      	add	sp, #8
 800d54a:	4770      	bx	lr
 800d54c:	4610      	mov	r0, r2
 800d54e:	e7fb      	b.n	800d548 <__ascii_mbtowc+0x16>
 800d550:	f06f 0001 	mvn.w	r0, #1
 800d554:	e7f8      	b.n	800d548 <__ascii_mbtowc+0x16>

0800d556 <memcpy>:
 800d556:	440a      	add	r2, r1
 800d558:	4291      	cmp	r1, r2
 800d55a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d55e:	d100      	bne.n	800d562 <memcpy+0xc>
 800d560:	4770      	bx	lr
 800d562:	b510      	push	{r4, lr}
 800d564:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d56c:	4291      	cmp	r1, r2
 800d56e:	d1f9      	bne.n	800d564 <memcpy+0xe>
 800d570:	bd10      	pop	{r4, pc}
	...

0800d574 <__malloc_lock>:
 800d574:	4801      	ldr	r0, [pc, #4]	; (800d57c <__malloc_lock+0x8>)
 800d576:	f7ff bfda 	b.w	800d52e <__retarget_lock_acquire_recursive>
 800d57a:	bf00      	nop
 800d57c:	20000aa8 	.word	0x20000aa8

0800d580 <__malloc_unlock>:
 800d580:	4801      	ldr	r0, [pc, #4]	; (800d588 <__malloc_unlock+0x8>)
 800d582:	f7ff bfd5 	b.w	800d530 <__retarget_lock_release_recursive>
 800d586:	bf00      	nop
 800d588:	20000aa8 	.word	0x20000aa8

0800d58c <_Balloc>:
 800d58c:	b570      	push	{r4, r5, r6, lr}
 800d58e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d590:	4604      	mov	r4, r0
 800d592:	460d      	mov	r5, r1
 800d594:	b976      	cbnz	r6, 800d5b4 <_Balloc+0x28>
 800d596:	2010      	movs	r0, #16
 800d598:	f7fc fe78 	bl	800a28c <malloc>
 800d59c:	4602      	mov	r2, r0
 800d59e:	6260      	str	r0, [r4, #36]	; 0x24
 800d5a0:	b920      	cbnz	r0, 800d5ac <_Balloc+0x20>
 800d5a2:	4b18      	ldr	r3, [pc, #96]	; (800d604 <_Balloc+0x78>)
 800d5a4:	4818      	ldr	r0, [pc, #96]	; (800d608 <_Balloc+0x7c>)
 800d5a6:	2166      	movs	r1, #102	; 0x66
 800d5a8:	f001 f8be 	bl	800e728 <__assert_func>
 800d5ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5b0:	6006      	str	r6, [r0, #0]
 800d5b2:	60c6      	str	r6, [r0, #12]
 800d5b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5b6:	68f3      	ldr	r3, [r6, #12]
 800d5b8:	b183      	cbz	r3, 800d5dc <_Balloc+0x50>
 800d5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5c2:	b9b8      	cbnz	r0, 800d5f4 <_Balloc+0x68>
 800d5c4:	2101      	movs	r1, #1
 800d5c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d5ca:	1d72      	adds	r2, r6, #5
 800d5cc:	0092      	lsls	r2, r2, #2
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f000 fc9d 	bl	800df0e <_calloc_r>
 800d5d4:	b160      	cbz	r0, 800d5f0 <_Balloc+0x64>
 800d5d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5da:	e00e      	b.n	800d5fa <_Balloc+0x6e>
 800d5dc:	2221      	movs	r2, #33	; 0x21
 800d5de:	2104      	movs	r1, #4
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f000 fc94 	bl	800df0e <_calloc_r>
 800d5e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5e8:	60f0      	str	r0, [r6, #12]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1e4      	bne.n	800d5ba <_Balloc+0x2e>
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	6802      	ldr	r2, [r0, #0]
 800d5f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d600:	e7f7      	b.n	800d5f2 <_Balloc+0x66>
 800d602:	bf00      	nop
 800d604:	0800ffd6 	.word	0x0800ffd6
 800d608:	08010138 	.word	0x08010138

0800d60c <_Bfree>:
 800d60c:	b570      	push	{r4, r5, r6, lr}
 800d60e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d610:	4605      	mov	r5, r0
 800d612:	460c      	mov	r4, r1
 800d614:	b976      	cbnz	r6, 800d634 <_Bfree+0x28>
 800d616:	2010      	movs	r0, #16
 800d618:	f7fc fe38 	bl	800a28c <malloc>
 800d61c:	4602      	mov	r2, r0
 800d61e:	6268      	str	r0, [r5, #36]	; 0x24
 800d620:	b920      	cbnz	r0, 800d62c <_Bfree+0x20>
 800d622:	4b09      	ldr	r3, [pc, #36]	; (800d648 <_Bfree+0x3c>)
 800d624:	4809      	ldr	r0, [pc, #36]	; (800d64c <_Bfree+0x40>)
 800d626:	218a      	movs	r1, #138	; 0x8a
 800d628:	f001 f87e 	bl	800e728 <__assert_func>
 800d62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d630:	6006      	str	r6, [r0, #0]
 800d632:	60c6      	str	r6, [r0, #12]
 800d634:	b13c      	cbz	r4, 800d646 <_Bfree+0x3a>
 800d636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d638:	6862      	ldr	r2, [r4, #4]
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d640:	6021      	str	r1, [r4, #0]
 800d642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d646:	bd70      	pop	{r4, r5, r6, pc}
 800d648:	0800ffd6 	.word	0x0800ffd6
 800d64c:	08010138 	.word	0x08010138

0800d650 <__multadd>:
 800d650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d654:	690d      	ldr	r5, [r1, #16]
 800d656:	4607      	mov	r7, r0
 800d658:	460c      	mov	r4, r1
 800d65a:	461e      	mov	r6, r3
 800d65c:	f101 0c14 	add.w	ip, r1, #20
 800d660:	2000      	movs	r0, #0
 800d662:	f8dc 3000 	ldr.w	r3, [ip]
 800d666:	b299      	uxth	r1, r3
 800d668:	fb02 6101 	mla	r1, r2, r1, r6
 800d66c:	0c1e      	lsrs	r6, r3, #16
 800d66e:	0c0b      	lsrs	r3, r1, #16
 800d670:	fb02 3306 	mla	r3, r2, r6, r3
 800d674:	b289      	uxth	r1, r1
 800d676:	3001      	adds	r0, #1
 800d678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d67c:	4285      	cmp	r5, r0
 800d67e:	f84c 1b04 	str.w	r1, [ip], #4
 800d682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d686:	dcec      	bgt.n	800d662 <__multadd+0x12>
 800d688:	b30e      	cbz	r6, 800d6ce <__multadd+0x7e>
 800d68a:	68a3      	ldr	r3, [r4, #8]
 800d68c:	42ab      	cmp	r3, r5
 800d68e:	dc19      	bgt.n	800d6c4 <__multadd+0x74>
 800d690:	6861      	ldr	r1, [r4, #4]
 800d692:	4638      	mov	r0, r7
 800d694:	3101      	adds	r1, #1
 800d696:	f7ff ff79 	bl	800d58c <_Balloc>
 800d69a:	4680      	mov	r8, r0
 800d69c:	b928      	cbnz	r0, 800d6aa <__multadd+0x5a>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	4b0c      	ldr	r3, [pc, #48]	; (800d6d4 <__multadd+0x84>)
 800d6a2:	480d      	ldr	r0, [pc, #52]	; (800d6d8 <__multadd+0x88>)
 800d6a4:	21b5      	movs	r1, #181	; 0xb5
 800d6a6:	f001 f83f 	bl	800e728 <__assert_func>
 800d6aa:	6922      	ldr	r2, [r4, #16]
 800d6ac:	3202      	adds	r2, #2
 800d6ae:	f104 010c 	add.w	r1, r4, #12
 800d6b2:	0092      	lsls	r2, r2, #2
 800d6b4:	300c      	adds	r0, #12
 800d6b6:	f7ff ff4e 	bl	800d556 <memcpy>
 800d6ba:	4621      	mov	r1, r4
 800d6bc:	4638      	mov	r0, r7
 800d6be:	f7ff ffa5 	bl	800d60c <_Bfree>
 800d6c2:	4644      	mov	r4, r8
 800d6c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6c8:	3501      	adds	r5, #1
 800d6ca:	615e      	str	r6, [r3, #20]
 800d6cc:	6125      	str	r5, [r4, #16]
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d4:	08010048 	.word	0x08010048
 800d6d8:	08010138 	.word	0x08010138

0800d6dc <__s2b>:
 800d6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6e0:	460c      	mov	r4, r1
 800d6e2:	4615      	mov	r5, r2
 800d6e4:	461f      	mov	r7, r3
 800d6e6:	2209      	movs	r2, #9
 800d6e8:	3308      	adds	r3, #8
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	db09      	blt.n	800d70c <__s2b+0x30>
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f7ff ff47 	bl	800d58c <_Balloc>
 800d6fe:	b940      	cbnz	r0, 800d712 <__s2b+0x36>
 800d700:	4602      	mov	r2, r0
 800d702:	4b19      	ldr	r3, [pc, #100]	; (800d768 <__s2b+0x8c>)
 800d704:	4819      	ldr	r0, [pc, #100]	; (800d76c <__s2b+0x90>)
 800d706:	21ce      	movs	r1, #206	; 0xce
 800d708:	f001 f80e 	bl	800e728 <__assert_func>
 800d70c:	0052      	lsls	r2, r2, #1
 800d70e:	3101      	adds	r1, #1
 800d710:	e7f0      	b.n	800d6f4 <__s2b+0x18>
 800d712:	9b08      	ldr	r3, [sp, #32]
 800d714:	6143      	str	r3, [r0, #20]
 800d716:	2d09      	cmp	r5, #9
 800d718:	f04f 0301 	mov.w	r3, #1
 800d71c:	6103      	str	r3, [r0, #16]
 800d71e:	dd16      	ble.n	800d74e <__s2b+0x72>
 800d720:	f104 0909 	add.w	r9, r4, #9
 800d724:	46c8      	mov	r8, r9
 800d726:	442c      	add	r4, r5
 800d728:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d72c:	4601      	mov	r1, r0
 800d72e:	3b30      	subs	r3, #48	; 0x30
 800d730:	220a      	movs	r2, #10
 800d732:	4630      	mov	r0, r6
 800d734:	f7ff ff8c 	bl	800d650 <__multadd>
 800d738:	45a0      	cmp	r8, r4
 800d73a:	d1f5      	bne.n	800d728 <__s2b+0x4c>
 800d73c:	f1a5 0408 	sub.w	r4, r5, #8
 800d740:	444c      	add	r4, r9
 800d742:	1b2d      	subs	r5, r5, r4
 800d744:	1963      	adds	r3, r4, r5
 800d746:	42bb      	cmp	r3, r7
 800d748:	db04      	blt.n	800d754 <__s2b+0x78>
 800d74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d74e:	340a      	adds	r4, #10
 800d750:	2509      	movs	r5, #9
 800d752:	e7f6      	b.n	800d742 <__s2b+0x66>
 800d754:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d758:	4601      	mov	r1, r0
 800d75a:	3b30      	subs	r3, #48	; 0x30
 800d75c:	220a      	movs	r2, #10
 800d75e:	4630      	mov	r0, r6
 800d760:	f7ff ff76 	bl	800d650 <__multadd>
 800d764:	e7ee      	b.n	800d744 <__s2b+0x68>
 800d766:	bf00      	nop
 800d768:	08010048 	.word	0x08010048
 800d76c:	08010138 	.word	0x08010138

0800d770 <__hi0bits>:
 800d770:	0c03      	lsrs	r3, r0, #16
 800d772:	041b      	lsls	r3, r3, #16
 800d774:	b9d3      	cbnz	r3, 800d7ac <__hi0bits+0x3c>
 800d776:	0400      	lsls	r0, r0, #16
 800d778:	2310      	movs	r3, #16
 800d77a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d77e:	bf04      	itt	eq
 800d780:	0200      	lsleq	r0, r0, #8
 800d782:	3308      	addeq	r3, #8
 800d784:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d788:	bf04      	itt	eq
 800d78a:	0100      	lsleq	r0, r0, #4
 800d78c:	3304      	addeq	r3, #4
 800d78e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d792:	bf04      	itt	eq
 800d794:	0080      	lsleq	r0, r0, #2
 800d796:	3302      	addeq	r3, #2
 800d798:	2800      	cmp	r0, #0
 800d79a:	db05      	blt.n	800d7a8 <__hi0bits+0x38>
 800d79c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7a0:	f103 0301 	add.w	r3, r3, #1
 800d7a4:	bf08      	it	eq
 800d7a6:	2320      	moveq	r3, #32
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	4770      	bx	lr
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e7e4      	b.n	800d77a <__hi0bits+0xa>

0800d7b0 <__lo0bits>:
 800d7b0:	6803      	ldr	r3, [r0, #0]
 800d7b2:	f013 0207 	ands.w	r2, r3, #7
 800d7b6:	4601      	mov	r1, r0
 800d7b8:	d00b      	beq.n	800d7d2 <__lo0bits+0x22>
 800d7ba:	07da      	lsls	r2, r3, #31
 800d7bc:	d423      	bmi.n	800d806 <__lo0bits+0x56>
 800d7be:	0798      	lsls	r0, r3, #30
 800d7c0:	bf49      	itett	mi
 800d7c2:	085b      	lsrmi	r3, r3, #1
 800d7c4:	089b      	lsrpl	r3, r3, #2
 800d7c6:	2001      	movmi	r0, #1
 800d7c8:	600b      	strmi	r3, [r1, #0]
 800d7ca:	bf5c      	itt	pl
 800d7cc:	600b      	strpl	r3, [r1, #0]
 800d7ce:	2002      	movpl	r0, #2
 800d7d0:	4770      	bx	lr
 800d7d2:	b298      	uxth	r0, r3
 800d7d4:	b9a8      	cbnz	r0, 800d802 <__lo0bits+0x52>
 800d7d6:	0c1b      	lsrs	r3, r3, #16
 800d7d8:	2010      	movs	r0, #16
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	b90a      	cbnz	r2, 800d7e2 <__lo0bits+0x32>
 800d7de:	3008      	adds	r0, #8
 800d7e0:	0a1b      	lsrs	r3, r3, #8
 800d7e2:	071a      	lsls	r2, r3, #28
 800d7e4:	bf04      	itt	eq
 800d7e6:	091b      	lsreq	r3, r3, #4
 800d7e8:	3004      	addeq	r0, #4
 800d7ea:	079a      	lsls	r2, r3, #30
 800d7ec:	bf04      	itt	eq
 800d7ee:	089b      	lsreq	r3, r3, #2
 800d7f0:	3002      	addeq	r0, #2
 800d7f2:	07da      	lsls	r2, r3, #31
 800d7f4:	d403      	bmi.n	800d7fe <__lo0bits+0x4e>
 800d7f6:	085b      	lsrs	r3, r3, #1
 800d7f8:	f100 0001 	add.w	r0, r0, #1
 800d7fc:	d005      	beq.n	800d80a <__lo0bits+0x5a>
 800d7fe:	600b      	str	r3, [r1, #0]
 800d800:	4770      	bx	lr
 800d802:	4610      	mov	r0, r2
 800d804:	e7e9      	b.n	800d7da <__lo0bits+0x2a>
 800d806:	2000      	movs	r0, #0
 800d808:	4770      	bx	lr
 800d80a:	2020      	movs	r0, #32
 800d80c:	4770      	bx	lr
	...

0800d810 <__i2b>:
 800d810:	b510      	push	{r4, lr}
 800d812:	460c      	mov	r4, r1
 800d814:	2101      	movs	r1, #1
 800d816:	f7ff feb9 	bl	800d58c <_Balloc>
 800d81a:	4602      	mov	r2, r0
 800d81c:	b928      	cbnz	r0, 800d82a <__i2b+0x1a>
 800d81e:	4b05      	ldr	r3, [pc, #20]	; (800d834 <__i2b+0x24>)
 800d820:	4805      	ldr	r0, [pc, #20]	; (800d838 <__i2b+0x28>)
 800d822:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d826:	f000 ff7f 	bl	800e728 <__assert_func>
 800d82a:	2301      	movs	r3, #1
 800d82c:	6144      	str	r4, [r0, #20]
 800d82e:	6103      	str	r3, [r0, #16]
 800d830:	bd10      	pop	{r4, pc}
 800d832:	bf00      	nop
 800d834:	08010048 	.word	0x08010048
 800d838:	08010138 	.word	0x08010138

0800d83c <__multiply>:
 800d83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d840:	4691      	mov	r9, r2
 800d842:	690a      	ldr	r2, [r1, #16]
 800d844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d848:	429a      	cmp	r2, r3
 800d84a:	bfb8      	it	lt
 800d84c:	460b      	movlt	r3, r1
 800d84e:	460c      	mov	r4, r1
 800d850:	bfbc      	itt	lt
 800d852:	464c      	movlt	r4, r9
 800d854:	4699      	movlt	r9, r3
 800d856:	6927      	ldr	r7, [r4, #16]
 800d858:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d85c:	68a3      	ldr	r3, [r4, #8]
 800d85e:	6861      	ldr	r1, [r4, #4]
 800d860:	eb07 060a 	add.w	r6, r7, sl
 800d864:	42b3      	cmp	r3, r6
 800d866:	b085      	sub	sp, #20
 800d868:	bfb8      	it	lt
 800d86a:	3101      	addlt	r1, #1
 800d86c:	f7ff fe8e 	bl	800d58c <_Balloc>
 800d870:	b930      	cbnz	r0, 800d880 <__multiply+0x44>
 800d872:	4602      	mov	r2, r0
 800d874:	4b44      	ldr	r3, [pc, #272]	; (800d988 <__multiply+0x14c>)
 800d876:	4845      	ldr	r0, [pc, #276]	; (800d98c <__multiply+0x150>)
 800d878:	f240 115d 	movw	r1, #349	; 0x15d
 800d87c:	f000 ff54 	bl	800e728 <__assert_func>
 800d880:	f100 0514 	add.w	r5, r0, #20
 800d884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d888:	462b      	mov	r3, r5
 800d88a:	2200      	movs	r2, #0
 800d88c:	4543      	cmp	r3, r8
 800d88e:	d321      	bcc.n	800d8d4 <__multiply+0x98>
 800d890:	f104 0314 	add.w	r3, r4, #20
 800d894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d898:	f109 0314 	add.w	r3, r9, #20
 800d89c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d8a0:	9202      	str	r2, [sp, #8]
 800d8a2:	1b3a      	subs	r2, r7, r4
 800d8a4:	3a15      	subs	r2, #21
 800d8a6:	f022 0203 	bic.w	r2, r2, #3
 800d8aa:	3204      	adds	r2, #4
 800d8ac:	f104 0115 	add.w	r1, r4, #21
 800d8b0:	428f      	cmp	r7, r1
 800d8b2:	bf38      	it	cc
 800d8b4:	2204      	movcc	r2, #4
 800d8b6:	9201      	str	r2, [sp, #4]
 800d8b8:	9a02      	ldr	r2, [sp, #8]
 800d8ba:	9303      	str	r3, [sp, #12]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d80c      	bhi.n	800d8da <__multiply+0x9e>
 800d8c0:	2e00      	cmp	r6, #0
 800d8c2:	dd03      	ble.n	800d8cc <__multiply+0x90>
 800d8c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d05a      	beq.n	800d982 <__multiply+0x146>
 800d8cc:	6106      	str	r6, [r0, #16]
 800d8ce:	b005      	add	sp, #20
 800d8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d4:	f843 2b04 	str.w	r2, [r3], #4
 800d8d8:	e7d8      	b.n	800d88c <__multiply+0x50>
 800d8da:	f8b3 a000 	ldrh.w	sl, [r3]
 800d8de:	f1ba 0f00 	cmp.w	sl, #0
 800d8e2:	d024      	beq.n	800d92e <__multiply+0xf2>
 800d8e4:	f104 0e14 	add.w	lr, r4, #20
 800d8e8:	46a9      	mov	r9, r5
 800d8ea:	f04f 0c00 	mov.w	ip, #0
 800d8ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d8f2:	f8d9 1000 	ldr.w	r1, [r9]
 800d8f6:	fa1f fb82 	uxth.w	fp, r2
 800d8fa:	b289      	uxth	r1, r1
 800d8fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d900:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d904:	f8d9 2000 	ldr.w	r2, [r9]
 800d908:	4461      	add	r1, ip
 800d90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d90e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d916:	b289      	uxth	r1, r1
 800d918:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d91c:	4577      	cmp	r7, lr
 800d91e:	f849 1b04 	str.w	r1, [r9], #4
 800d922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d926:	d8e2      	bhi.n	800d8ee <__multiply+0xb2>
 800d928:	9a01      	ldr	r2, [sp, #4]
 800d92a:	f845 c002 	str.w	ip, [r5, r2]
 800d92e:	9a03      	ldr	r2, [sp, #12]
 800d930:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d934:	3304      	adds	r3, #4
 800d936:	f1b9 0f00 	cmp.w	r9, #0
 800d93a:	d020      	beq.n	800d97e <__multiply+0x142>
 800d93c:	6829      	ldr	r1, [r5, #0]
 800d93e:	f104 0c14 	add.w	ip, r4, #20
 800d942:	46ae      	mov	lr, r5
 800d944:	f04f 0a00 	mov.w	sl, #0
 800d948:	f8bc b000 	ldrh.w	fp, [ip]
 800d94c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d950:	fb09 220b 	mla	r2, r9, fp, r2
 800d954:	4492      	add	sl, r2
 800d956:	b289      	uxth	r1, r1
 800d958:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d95c:	f84e 1b04 	str.w	r1, [lr], #4
 800d960:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d964:	f8be 1000 	ldrh.w	r1, [lr]
 800d968:	0c12      	lsrs	r2, r2, #16
 800d96a:	fb09 1102 	mla	r1, r9, r2, r1
 800d96e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d972:	4567      	cmp	r7, ip
 800d974:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d978:	d8e6      	bhi.n	800d948 <__multiply+0x10c>
 800d97a:	9a01      	ldr	r2, [sp, #4]
 800d97c:	50a9      	str	r1, [r5, r2]
 800d97e:	3504      	adds	r5, #4
 800d980:	e79a      	b.n	800d8b8 <__multiply+0x7c>
 800d982:	3e01      	subs	r6, #1
 800d984:	e79c      	b.n	800d8c0 <__multiply+0x84>
 800d986:	bf00      	nop
 800d988:	08010048 	.word	0x08010048
 800d98c:	08010138 	.word	0x08010138

0800d990 <__pow5mult>:
 800d990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d994:	4615      	mov	r5, r2
 800d996:	f012 0203 	ands.w	r2, r2, #3
 800d99a:	4606      	mov	r6, r0
 800d99c:	460f      	mov	r7, r1
 800d99e:	d007      	beq.n	800d9b0 <__pow5mult+0x20>
 800d9a0:	4c25      	ldr	r4, [pc, #148]	; (800da38 <__pow5mult+0xa8>)
 800d9a2:	3a01      	subs	r2, #1
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9aa:	f7ff fe51 	bl	800d650 <__multadd>
 800d9ae:	4607      	mov	r7, r0
 800d9b0:	10ad      	asrs	r5, r5, #2
 800d9b2:	d03d      	beq.n	800da30 <__pow5mult+0xa0>
 800d9b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9b6:	b97c      	cbnz	r4, 800d9d8 <__pow5mult+0x48>
 800d9b8:	2010      	movs	r0, #16
 800d9ba:	f7fc fc67 	bl	800a28c <malloc>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	6270      	str	r0, [r6, #36]	; 0x24
 800d9c2:	b928      	cbnz	r0, 800d9d0 <__pow5mult+0x40>
 800d9c4:	4b1d      	ldr	r3, [pc, #116]	; (800da3c <__pow5mult+0xac>)
 800d9c6:	481e      	ldr	r0, [pc, #120]	; (800da40 <__pow5mult+0xb0>)
 800d9c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d9cc:	f000 feac 	bl	800e728 <__assert_func>
 800d9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9d4:	6004      	str	r4, [r0, #0]
 800d9d6:	60c4      	str	r4, [r0, #12]
 800d9d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9e0:	b94c      	cbnz	r4, 800d9f6 <__pow5mult+0x66>
 800d9e2:	f240 2171 	movw	r1, #625	; 0x271
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f7ff ff12 	bl	800d810 <__i2b>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	6003      	str	r3, [r0, #0]
 800d9f6:	f04f 0900 	mov.w	r9, #0
 800d9fa:	07eb      	lsls	r3, r5, #31
 800d9fc:	d50a      	bpl.n	800da14 <__pow5mult+0x84>
 800d9fe:	4639      	mov	r1, r7
 800da00:	4622      	mov	r2, r4
 800da02:	4630      	mov	r0, r6
 800da04:	f7ff ff1a 	bl	800d83c <__multiply>
 800da08:	4639      	mov	r1, r7
 800da0a:	4680      	mov	r8, r0
 800da0c:	4630      	mov	r0, r6
 800da0e:	f7ff fdfd 	bl	800d60c <_Bfree>
 800da12:	4647      	mov	r7, r8
 800da14:	106d      	asrs	r5, r5, #1
 800da16:	d00b      	beq.n	800da30 <__pow5mult+0xa0>
 800da18:	6820      	ldr	r0, [r4, #0]
 800da1a:	b938      	cbnz	r0, 800da2c <__pow5mult+0x9c>
 800da1c:	4622      	mov	r2, r4
 800da1e:	4621      	mov	r1, r4
 800da20:	4630      	mov	r0, r6
 800da22:	f7ff ff0b 	bl	800d83c <__multiply>
 800da26:	6020      	str	r0, [r4, #0]
 800da28:	f8c0 9000 	str.w	r9, [r0]
 800da2c:	4604      	mov	r4, r0
 800da2e:	e7e4      	b.n	800d9fa <__pow5mult+0x6a>
 800da30:	4638      	mov	r0, r7
 800da32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da36:	bf00      	nop
 800da38:	08010288 	.word	0x08010288
 800da3c:	0800ffd6 	.word	0x0800ffd6
 800da40:	08010138 	.word	0x08010138

0800da44 <__lshift>:
 800da44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da48:	460c      	mov	r4, r1
 800da4a:	6849      	ldr	r1, [r1, #4]
 800da4c:	6923      	ldr	r3, [r4, #16]
 800da4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	4607      	mov	r7, r0
 800da56:	4691      	mov	r9, r2
 800da58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da5c:	f108 0601 	add.w	r6, r8, #1
 800da60:	42b3      	cmp	r3, r6
 800da62:	db0b      	blt.n	800da7c <__lshift+0x38>
 800da64:	4638      	mov	r0, r7
 800da66:	f7ff fd91 	bl	800d58c <_Balloc>
 800da6a:	4605      	mov	r5, r0
 800da6c:	b948      	cbnz	r0, 800da82 <__lshift+0x3e>
 800da6e:	4602      	mov	r2, r0
 800da70:	4b2a      	ldr	r3, [pc, #168]	; (800db1c <__lshift+0xd8>)
 800da72:	482b      	ldr	r0, [pc, #172]	; (800db20 <__lshift+0xdc>)
 800da74:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da78:	f000 fe56 	bl	800e728 <__assert_func>
 800da7c:	3101      	adds	r1, #1
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	e7ee      	b.n	800da60 <__lshift+0x1c>
 800da82:	2300      	movs	r3, #0
 800da84:	f100 0114 	add.w	r1, r0, #20
 800da88:	f100 0210 	add.w	r2, r0, #16
 800da8c:	4618      	mov	r0, r3
 800da8e:	4553      	cmp	r3, sl
 800da90:	db37      	blt.n	800db02 <__lshift+0xbe>
 800da92:	6920      	ldr	r0, [r4, #16]
 800da94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da98:	f104 0314 	add.w	r3, r4, #20
 800da9c:	f019 091f 	ands.w	r9, r9, #31
 800daa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800daa8:	d02f      	beq.n	800db0a <__lshift+0xc6>
 800daaa:	f1c9 0e20 	rsb	lr, r9, #32
 800daae:	468a      	mov	sl, r1
 800dab0:	f04f 0c00 	mov.w	ip, #0
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	fa02 f209 	lsl.w	r2, r2, r9
 800daba:	ea42 020c 	orr.w	r2, r2, ip
 800dabe:	f84a 2b04 	str.w	r2, [sl], #4
 800dac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dac6:	4298      	cmp	r0, r3
 800dac8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dacc:	d8f2      	bhi.n	800dab4 <__lshift+0x70>
 800dace:	1b03      	subs	r3, r0, r4
 800dad0:	3b15      	subs	r3, #21
 800dad2:	f023 0303 	bic.w	r3, r3, #3
 800dad6:	3304      	adds	r3, #4
 800dad8:	f104 0215 	add.w	r2, r4, #21
 800dadc:	4290      	cmp	r0, r2
 800dade:	bf38      	it	cc
 800dae0:	2304      	movcc	r3, #4
 800dae2:	f841 c003 	str.w	ip, [r1, r3]
 800dae6:	f1bc 0f00 	cmp.w	ip, #0
 800daea:	d001      	beq.n	800daf0 <__lshift+0xac>
 800daec:	f108 0602 	add.w	r6, r8, #2
 800daf0:	3e01      	subs	r6, #1
 800daf2:	4638      	mov	r0, r7
 800daf4:	612e      	str	r6, [r5, #16]
 800daf6:	4621      	mov	r1, r4
 800daf8:	f7ff fd88 	bl	800d60c <_Bfree>
 800dafc:	4628      	mov	r0, r5
 800dafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db02:	f842 0f04 	str.w	r0, [r2, #4]!
 800db06:	3301      	adds	r3, #1
 800db08:	e7c1      	b.n	800da8e <__lshift+0x4a>
 800db0a:	3904      	subs	r1, #4
 800db0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db10:	f841 2f04 	str.w	r2, [r1, #4]!
 800db14:	4298      	cmp	r0, r3
 800db16:	d8f9      	bhi.n	800db0c <__lshift+0xc8>
 800db18:	e7ea      	b.n	800daf0 <__lshift+0xac>
 800db1a:	bf00      	nop
 800db1c:	08010048 	.word	0x08010048
 800db20:	08010138 	.word	0x08010138

0800db24 <__mcmp>:
 800db24:	b530      	push	{r4, r5, lr}
 800db26:	6902      	ldr	r2, [r0, #16]
 800db28:	690c      	ldr	r4, [r1, #16]
 800db2a:	1b12      	subs	r2, r2, r4
 800db2c:	d10e      	bne.n	800db4c <__mcmp+0x28>
 800db2e:	f100 0314 	add.w	r3, r0, #20
 800db32:	3114      	adds	r1, #20
 800db34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db44:	42a5      	cmp	r5, r4
 800db46:	d003      	beq.n	800db50 <__mcmp+0x2c>
 800db48:	d305      	bcc.n	800db56 <__mcmp+0x32>
 800db4a:	2201      	movs	r2, #1
 800db4c:	4610      	mov	r0, r2
 800db4e:	bd30      	pop	{r4, r5, pc}
 800db50:	4283      	cmp	r3, r0
 800db52:	d3f3      	bcc.n	800db3c <__mcmp+0x18>
 800db54:	e7fa      	b.n	800db4c <__mcmp+0x28>
 800db56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db5a:	e7f7      	b.n	800db4c <__mcmp+0x28>

0800db5c <__mdiff>:
 800db5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	460c      	mov	r4, r1
 800db62:	4606      	mov	r6, r0
 800db64:	4611      	mov	r1, r2
 800db66:	4620      	mov	r0, r4
 800db68:	4690      	mov	r8, r2
 800db6a:	f7ff ffdb 	bl	800db24 <__mcmp>
 800db6e:	1e05      	subs	r5, r0, #0
 800db70:	d110      	bne.n	800db94 <__mdiff+0x38>
 800db72:	4629      	mov	r1, r5
 800db74:	4630      	mov	r0, r6
 800db76:	f7ff fd09 	bl	800d58c <_Balloc>
 800db7a:	b930      	cbnz	r0, 800db8a <__mdiff+0x2e>
 800db7c:	4b3a      	ldr	r3, [pc, #232]	; (800dc68 <__mdiff+0x10c>)
 800db7e:	4602      	mov	r2, r0
 800db80:	f240 2132 	movw	r1, #562	; 0x232
 800db84:	4839      	ldr	r0, [pc, #228]	; (800dc6c <__mdiff+0x110>)
 800db86:	f000 fdcf 	bl	800e728 <__assert_func>
 800db8a:	2301      	movs	r3, #1
 800db8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db94:	bfa4      	itt	ge
 800db96:	4643      	movge	r3, r8
 800db98:	46a0      	movge	r8, r4
 800db9a:	4630      	mov	r0, r6
 800db9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dba0:	bfa6      	itte	ge
 800dba2:	461c      	movge	r4, r3
 800dba4:	2500      	movge	r5, #0
 800dba6:	2501      	movlt	r5, #1
 800dba8:	f7ff fcf0 	bl	800d58c <_Balloc>
 800dbac:	b920      	cbnz	r0, 800dbb8 <__mdiff+0x5c>
 800dbae:	4b2e      	ldr	r3, [pc, #184]	; (800dc68 <__mdiff+0x10c>)
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbb6:	e7e5      	b.n	800db84 <__mdiff+0x28>
 800dbb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbbc:	6926      	ldr	r6, [r4, #16]
 800dbbe:	60c5      	str	r5, [r0, #12]
 800dbc0:	f104 0914 	add.w	r9, r4, #20
 800dbc4:	f108 0514 	add.w	r5, r8, #20
 800dbc8:	f100 0e14 	add.w	lr, r0, #20
 800dbcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dbd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbd4:	f108 0210 	add.w	r2, r8, #16
 800dbd8:	46f2      	mov	sl, lr
 800dbda:	2100      	movs	r1, #0
 800dbdc:	f859 3b04 	ldr.w	r3, [r9], #4
 800dbe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dbe4:	fa1f f883 	uxth.w	r8, r3
 800dbe8:	fa11 f18b 	uxtah	r1, r1, fp
 800dbec:	0c1b      	lsrs	r3, r3, #16
 800dbee:	eba1 0808 	sub.w	r8, r1, r8
 800dbf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dbf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dbfa:	fa1f f888 	uxth.w	r8, r8
 800dbfe:	1419      	asrs	r1, r3, #16
 800dc00:	454e      	cmp	r6, r9
 800dc02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc06:	f84a 3b04 	str.w	r3, [sl], #4
 800dc0a:	d8e7      	bhi.n	800dbdc <__mdiff+0x80>
 800dc0c:	1b33      	subs	r3, r6, r4
 800dc0e:	3b15      	subs	r3, #21
 800dc10:	f023 0303 	bic.w	r3, r3, #3
 800dc14:	3304      	adds	r3, #4
 800dc16:	3415      	adds	r4, #21
 800dc18:	42a6      	cmp	r6, r4
 800dc1a:	bf38      	it	cc
 800dc1c:	2304      	movcc	r3, #4
 800dc1e:	441d      	add	r5, r3
 800dc20:	4473      	add	r3, lr
 800dc22:	469e      	mov	lr, r3
 800dc24:	462e      	mov	r6, r5
 800dc26:	4566      	cmp	r6, ip
 800dc28:	d30e      	bcc.n	800dc48 <__mdiff+0xec>
 800dc2a:	f10c 0203 	add.w	r2, ip, #3
 800dc2e:	1b52      	subs	r2, r2, r5
 800dc30:	f022 0203 	bic.w	r2, r2, #3
 800dc34:	3d03      	subs	r5, #3
 800dc36:	45ac      	cmp	ip, r5
 800dc38:	bf38      	it	cc
 800dc3a:	2200      	movcc	r2, #0
 800dc3c:	441a      	add	r2, r3
 800dc3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc42:	b17b      	cbz	r3, 800dc64 <__mdiff+0x108>
 800dc44:	6107      	str	r7, [r0, #16]
 800dc46:	e7a3      	b.n	800db90 <__mdiff+0x34>
 800dc48:	f856 8b04 	ldr.w	r8, [r6], #4
 800dc4c:	fa11 f288 	uxtah	r2, r1, r8
 800dc50:	1414      	asrs	r4, r2, #16
 800dc52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc56:	b292      	uxth	r2, r2
 800dc58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc5c:	f84e 2b04 	str.w	r2, [lr], #4
 800dc60:	1421      	asrs	r1, r4, #16
 800dc62:	e7e0      	b.n	800dc26 <__mdiff+0xca>
 800dc64:	3f01      	subs	r7, #1
 800dc66:	e7ea      	b.n	800dc3e <__mdiff+0xe2>
 800dc68:	08010048 	.word	0x08010048
 800dc6c:	08010138 	.word	0x08010138

0800dc70 <__ulp>:
 800dc70:	b082      	sub	sp, #8
 800dc72:	ed8d 0b00 	vstr	d0, [sp]
 800dc76:	9b01      	ldr	r3, [sp, #4]
 800dc78:	4912      	ldr	r1, [pc, #72]	; (800dcc4 <__ulp+0x54>)
 800dc7a:	4019      	ands	r1, r3
 800dc7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dc80:	2900      	cmp	r1, #0
 800dc82:	dd05      	ble.n	800dc90 <__ulp+0x20>
 800dc84:	2200      	movs	r2, #0
 800dc86:	460b      	mov	r3, r1
 800dc88:	ec43 2b10 	vmov	d0, r2, r3
 800dc8c:	b002      	add	sp, #8
 800dc8e:	4770      	bx	lr
 800dc90:	4249      	negs	r1, r1
 800dc92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dc96:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dc9a:	f04f 0200 	mov.w	r2, #0
 800dc9e:	f04f 0300 	mov.w	r3, #0
 800dca2:	da04      	bge.n	800dcae <__ulp+0x3e>
 800dca4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dca8:	fa41 f300 	asr.w	r3, r1, r0
 800dcac:	e7ec      	b.n	800dc88 <__ulp+0x18>
 800dcae:	f1a0 0114 	sub.w	r1, r0, #20
 800dcb2:	291e      	cmp	r1, #30
 800dcb4:	bfda      	itte	le
 800dcb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dcba:	fa20 f101 	lsrle.w	r1, r0, r1
 800dcbe:	2101      	movgt	r1, #1
 800dcc0:	460a      	mov	r2, r1
 800dcc2:	e7e1      	b.n	800dc88 <__ulp+0x18>
 800dcc4:	7ff00000 	.word	0x7ff00000

0800dcc8 <__b2d>:
 800dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcca:	6905      	ldr	r5, [r0, #16]
 800dccc:	f100 0714 	add.w	r7, r0, #20
 800dcd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dcd4:	1f2e      	subs	r6, r5, #4
 800dcd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f7ff fd48 	bl	800d770 <__hi0bits>
 800dce0:	f1c0 0320 	rsb	r3, r0, #32
 800dce4:	280a      	cmp	r0, #10
 800dce6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd64 <__b2d+0x9c>
 800dcea:	600b      	str	r3, [r1, #0]
 800dcec:	dc14      	bgt.n	800dd18 <__b2d+0x50>
 800dcee:	f1c0 0e0b 	rsb	lr, r0, #11
 800dcf2:	fa24 f10e 	lsr.w	r1, r4, lr
 800dcf6:	42b7      	cmp	r7, r6
 800dcf8:	ea41 030c 	orr.w	r3, r1, ip
 800dcfc:	bf34      	ite	cc
 800dcfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd02:	2100      	movcs	r1, #0
 800dd04:	3015      	adds	r0, #21
 800dd06:	fa04 f000 	lsl.w	r0, r4, r0
 800dd0a:	fa21 f10e 	lsr.w	r1, r1, lr
 800dd0e:	ea40 0201 	orr.w	r2, r0, r1
 800dd12:	ec43 2b10 	vmov	d0, r2, r3
 800dd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd18:	42b7      	cmp	r7, r6
 800dd1a:	bf3a      	itte	cc
 800dd1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd20:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd24:	2100      	movcs	r1, #0
 800dd26:	380b      	subs	r0, #11
 800dd28:	d017      	beq.n	800dd5a <__b2d+0x92>
 800dd2a:	f1c0 0c20 	rsb	ip, r0, #32
 800dd2e:	fa04 f500 	lsl.w	r5, r4, r0
 800dd32:	42be      	cmp	r6, r7
 800dd34:	fa21 f40c 	lsr.w	r4, r1, ip
 800dd38:	ea45 0504 	orr.w	r5, r5, r4
 800dd3c:	bf8c      	ite	hi
 800dd3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dd42:	2400      	movls	r4, #0
 800dd44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dd48:	fa01 f000 	lsl.w	r0, r1, r0
 800dd4c:	fa24 f40c 	lsr.w	r4, r4, ip
 800dd50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd54:	ea40 0204 	orr.w	r2, r0, r4
 800dd58:	e7db      	b.n	800dd12 <__b2d+0x4a>
 800dd5a:	ea44 030c 	orr.w	r3, r4, ip
 800dd5e:	460a      	mov	r2, r1
 800dd60:	e7d7      	b.n	800dd12 <__b2d+0x4a>
 800dd62:	bf00      	nop
 800dd64:	3ff00000 	.word	0x3ff00000

0800dd68 <__d2b>:
 800dd68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd6c:	4689      	mov	r9, r1
 800dd6e:	2101      	movs	r1, #1
 800dd70:	ec57 6b10 	vmov	r6, r7, d0
 800dd74:	4690      	mov	r8, r2
 800dd76:	f7ff fc09 	bl	800d58c <_Balloc>
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	b930      	cbnz	r0, 800dd8c <__d2b+0x24>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	4b25      	ldr	r3, [pc, #148]	; (800de18 <__d2b+0xb0>)
 800dd82:	4826      	ldr	r0, [pc, #152]	; (800de1c <__d2b+0xb4>)
 800dd84:	f240 310a 	movw	r1, #778	; 0x30a
 800dd88:	f000 fcce 	bl	800e728 <__assert_func>
 800dd8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd94:	bb35      	cbnz	r5, 800dde4 <__d2b+0x7c>
 800dd96:	2e00      	cmp	r6, #0
 800dd98:	9301      	str	r3, [sp, #4]
 800dd9a:	d028      	beq.n	800ddee <__d2b+0x86>
 800dd9c:	4668      	mov	r0, sp
 800dd9e:	9600      	str	r6, [sp, #0]
 800dda0:	f7ff fd06 	bl	800d7b0 <__lo0bits>
 800dda4:	9900      	ldr	r1, [sp, #0]
 800dda6:	b300      	cbz	r0, 800ddea <__d2b+0x82>
 800dda8:	9a01      	ldr	r2, [sp, #4]
 800ddaa:	f1c0 0320 	rsb	r3, r0, #32
 800ddae:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb2:	430b      	orrs	r3, r1
 800ddb4:	40c2      	lsrs	r2, r0
 800ddb6:	6163      	str	r3, [r4, #20]
 800ddb8:	9201      	str	r2, [sp, #4]
 800ddba:	9b01      	ldr	r3, [sp, #4]
 800ddbc:	61a3      	str	r3, [r4, #24]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	bf14      	ite	ne
 800ddc2:	2202      	movne	r2, #2
 800ddc4:	2201      	moveq	r2, #1
 800ddc6:	6122      	str	r2, [r4, #16]
 800ddc8:	b1d5      	cbz	r5, 800de00 <__d2b+0x98>
 800ddca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddce:	4405      	add	r5, r0
 800ddd0:	f8c9 5000 	str.w	r5, [r9]
 800ddd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddd8:	f8c8 0000 	str.w	r0, [r8]
 800dddc:	4620      	mov	r0, r4
 800ddde:	b003      	add	sp, #12
 800dde0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dde8:	e7d5      	b.n	800dd96 <__d2b+0x2e>
 800ddea:	6161      	str	r1, [r4, #20]
 800ddec:	e7e5      	b.n	800ddba <__d2b+0x52>
 800ddee:	a801      	add	r0, sp, #4
 800ddf0:	f7ff fcde 	bl	800d7b0 <__lo0bits>
 800ddf4:	9b01      	ldr	r3, [sp, #4]
 800ddf6:	6163      	str	r3, [r4, #20]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	6122      	str	r2, [r4, #16]
 800ddfc:	3020      	adds	r0, #32
 800ddfe:	e7e3      	b.n	800ddc8 <__d2b+0x60>
 800de00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de08:	f8c9 0000 	str.w	r0, [r9]
 800de0c:	6918      	ldr	r0, [r3, #16]
 800de0e:	f7ff fcaf 	bl	800d770 <__hi0bits>
 800de12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de16:	e7df      	b.n	800ddd8 <__d2b+0x70>
 800de18:	08010048 	.word	0x08010048
 800de1c:	08010138 	.word	0x08010138

0800de20 <__ratio>:
 800de20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	4688      	mov	r8, r1
 800de26:	4669      	mov	r1, sp
 800de28:	4681      	mov	r9, r0
 800de2a:	f7ff ff4d 	bl	800dcc8 <__b2d>
 800de2e:	a901      	add	r1, sp, #4
 800de30:	4640      	mov	r0, r8
 800de32:	ec55 4b10 	vmov	r4, r5, d0
 800de36:	f7ff ff47 	bl	800dcc8 <__b2d>
 800de3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de42:	eba3 0c02 	sub.w	ip, r3, r2
 800de46:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de4a:	1a9b      	subs	r3, r3, r2
 800de4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de50:	ec51 0b10 	vmov	r0, r1, d0
 800de54:	2b00      	cmp	r3, #0
 800de56:	bfd6      	itet	le
 800de58:	460a      	movle	r2, r1
 800de5a:	462a      	movgt	r2, r5
 800de5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de60:	468b      	mov	fp, r1
 800de62:	462f      	mov	r7, r5
 800de64:	bfd4      	ite	le
 800de66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de6e:	4620      	mov	r0, r4
 800de70:	ee10 2a10 	vmov	r2, s0
 800de74:	465b      	mov	r3, fp
 800de76:	4639      	mov	r1, r7
 800de78:	f7f2 fce8 	bl	800084c <__aeabi_ddiv>
 800de7c:	ec41 0b10 	vmov	d0, r0, r1
 800de80:	b003      	add	sp, #12
 800de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de86 <__copybits>:
 800de86:	3901      	subs	r1, #1
 800de88:	b570      	push	{r4, r5, r6, lr}
 800de8a:	1149      	asrs	r1, r1, #5
 800de8c:	6914      	ldr	r4, [r2, #16]
 800de8e:	3101      	adds	r1, #1
 800de90:	f102 0314 	add.w	r3, r2, #20
 800de94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de9c:	1f05      	subs	r5, r0, #4
 800de9e:	42a3      	cmp	r3, r4
 800dea0:	d30c      	bcc.n	800debc <__copybits+0x36>
 800dea2:	1aa3      	subs	r3, r4, r2
 800dea4:	3b11      	subs	r3, #17
 800dea6:	f023 0303 	bic.w	r3, r3, #3
 800deaa:	3211      	adds	r2, #17
 800deac:	42a2      	cmp	r2, r4
 800deae:	bf88      	it	hi
 800deb0:	2300      	movhi	r3, #0
 800deb2:	4418      	add	r0, r3
 800deb4:	2300      	movs	r3, #0
 800deb6:	4288      	cmp	r0, r1
 800deb8:	d305      	bcc.n	800dec6 <__copybits+0x40>
 800deba:	bd70      	pop	{r4, r5, r6, pc}
 800debc:	f853 6b04 	ldr.w	r6, [r3], #4
 800dec0:	f845 6f04 	str.w	r6, [r5, #4]!
 800dec4:	e7eb      	b.n	800de9e <__copybits+0x18>
 800dec6:	f840 3b04 	str.w	r3, [r0], #4
 800deca:	e7f4      	b.n	800deb6 <__copybits+0x30>

0800decc <__any_on>:
 800decc:	f100 0214 	add.w	r2, r0, #20
 800ded0:	6900      	ldr	r0, [r0, #16]
 800ded2:	114b      	asrs	r3, r1, #5
 800ded4:	4298      	cmp	r0, r3
 800ded6:	b510      	push	{r4, lr}
 800ded8:	db11      	blt.n	800defe <__any_on+0x32>
 800deda:	dd0a      	ble.n	800def2 <__any_on+0x26>
 800dedc:	f011 011f 	ands.w	r1, r1, #31
 800dee0:	d007      	beq.n	800def2 <__any_on+0x26>
 800dee2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dee6:	fa24 f001 	lsr.w	r0, r4, r1
 800deea:	fa00 f101 	lsl.w	r1, r0, r1
 800deee:	428c      	cmp	r4, r1
 800def0:	d10b      	bne.n	800df0a <__any_on+0x3e>
 800def2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800def6:	4293      	cmp	r3, r2
 800def8:	d803      	bhi.n	800df02 <__any_on+0x36>
 800defa:	2000      	movs	r0, #0
 800defc:	bd10      	pop	{r4, pc}
 800defe:	4603      	mov	r3, r0
 800df00:	e7f7      	b.n	800def2 <__any_on+0x26>
 800df02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df06:	2900      	cmp	r1, #0
 800df08:	d0f5      	beq.n	800def6 <__any_on+0x2a>
 800df0a:	2001      	movs	r0, #1
 800df0c:	e7f6      	b.n	800defc <__any_on+0x30>

0800df0e <_calloc_r>:
 800df0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df10:	fba1 2402 	umull	r2, r4, r1, r2
 800df14:	b94c      	cbnz	r4, 800df2a <_calloc_r+0x1c>
 800df16:	4611      	mov	r1, r2
 800df18:	9201      	str	r2, [sp, #4]
 800df1a:	f7fc fa3b 	bl	800a394 <_malloc_r>
 800df1e:	9a01      	ldr	r2, [sp, #4]
 800df20:	4605      	mov	r5, r0
 800df22:	b930      	cbnz	r0, 800df32 <_calloc_r+0x24>
 800df24:	4628      	mov	r0, r5
 800df26:	b003      	add	sp, #12
 800df28:	bd30      	pop	{r4, r5, pc}
 800df2a:	220c      	movs	r2, #12
 800df2c:	6002      	str	r2, [r0, #0]
 800df2e:	2500      	movs	r5, #0
 800df30:	e7f8      	b.n	800df24 <_calloc_r+0x16>
 800df32:	4621      	mov	r1, r4
 800df34:	f7fc f9ba 	bl	800a2ac <memset>
 800df38:	e7f4      	b.n	800df24 <_calloc_r+0x16>

0800df3a <__ssputs_r>:
 800df3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df3e:	688e      	ldr	r6, [r1, #8]
 800df40:	429e      	cmp	r6, r3
 800df42:	4682      	mov	sl, r0
 800df44:	460c      	mov	r4, r1
 800df46:	4690      	mov	r8, r2
 800df48:	461f      	mov	r7, r3
 800df4a:	d838      	bhi.n	800dfbe <__ssputs_r+0x84>
 800df4c:	898a      	ldrh	r2, [r1, #12]
 800df4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df52:	d032      	beq.n	800dfba <__ssputs_r+0x80>
 800df54:	6825      	ldr	r5, [r4, #0]
 800df56:	6909      	ldr	r1, [r1, #16]
 800df58:	eba5 0901 	sub.w	r9, r5, r1
 800df5c:	6965      	ldr	r5, [r4, #20]
 800df5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df66:	3301      	adds	r3, #1
 800df68:	444b      	add	r3, r9
 800df6a:	106d      	asrs	r5, r5, #1
 800df6c:	429d      	cmp	r5, r3
 800df6e:	bf38      	it	cc
 800df70:	461d      	movcc	r5, r3
 800df72:	0553      	lsls	r3, r2, #21
 800df74:	d531      	bpl.n	800dfda <__ssputs_r+0xa0>
 800df76:	4629      	mov	r1, r5
 800df78:	f7fc fa0c 	bl	800a394 <_malloc_r>
 800df7c:	4606      	mov	r6, r0
 800df7e:	b950      	cbnz	r0, 800df96 <__ssputs_r+0x5c>
 800df80:	230c      	movs	r3, #12
 800df82:	f8ca 3000 	str.w	r3, [sl]
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df8c:	81a3      	strh	r3, [r4, #12]
 800df8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df96:	6921      	ldr	r1, [r4, #16]
 800df98:	464a      	mov	r2, r9
 800df9a:	f7ff fadc 	bl	800d556 <memcpy>
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dfa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfa8:	81a3      	strh	r3, [r4, #12]
 800dfaa:	6126      	str	r6, [r4, #16]
 800dfac:	6165      	str	r5, [r4, #20]
 800dfae:	444e      	add	r6, r9
 800dfb0:	eba5 0509 	sub.w	r5, r5, r9
 800dfb4:	6026      	str	r6, [r4, #0]
 800dfb6:	60a5      	str	r5, [r4, #8]
 800dfb8:	463e      	mov	r6, r7
 800dfba:	42be      	cmp	r6, r7
 800dfbc:	d900      	bls.n	800dfc0 <__ssputs_r+0x86>
 800dfbe:	463e      	mov	r6, r7
 800dfc0:	6820      	ldr	r0, [r4, #0]
 800dfc2:	4632      	mov	r2, r6
 800dfc4:	4641      	mov	r1, r8
 800dfc6:	f000 fd29 	bl	800ea1c <memmove>
 800dfca:	68a3      	ldr	r3, [r4, #8]
 800dfcc:	1b9b      	subs	r3, r3, r6
 800dfce:	60a3      	str	r3, [r4, #8]
 800dfd0:	6823      	ldr	r3, [r4, #0]
 800dfd2:	4433      	add	r3, r6
 800dfd4:	6023      	str	r3, [r4, #0]
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	e7db      	b.n	800df92 <__ssputs_r+0x58>
 800dfda:	462a      	mov	r2, r5
 800dfdc:	f000 fd38 	bl	800ea50 <_realloc_r>
 800dfe0:	4606      	mov	r6, r0
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d1e1      	bne.n	800dfaa <__ssputs_r+0x70>
 800dfe6:	6921      	ldr	r1, [r4, #16]
 800dfe8:	4650      	mov	r0, sl
 800dfea:	f7fc f967 	bl	800a2bc <_free_r>
 800dfee:	e7c7      	b.n	800df80 <__ssputs_r+0x46>

0800dff0 <_svfiprintf_r>:
 800dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	4698      	mov	r8, r3
 800dff6:	898b      	ldrh	r3, [r1, #12]
 800dff8:	061b      	lsls	r3, r3, #24
 800dffa:	b09d      	sub	sp, #116	; 0x74
 800dffc:	4607      	mov	r7, r0
 800dffe:	460d      	mov	r5, r1
 800e000:	4614      	mov	r4, r2
 800e002:	d50e      	bpl.n	800e022 <_svfiprintf_r+0x32>
 800e004:	690b      	ldr	r3, [r1, #16]
 800e006:	b963      	cbnz	r3, 800e022 <_svfiprintf_r+0x32>
 800e008:	2140      	movs	r1, #64	; 0x40
 800e00a:	f7fc f9c3 	bl	800a394 <_malloc_r>
 800e00e:	6028      	str	r0, [r5, #0]
 800e010:	6128      	str	r0, [r5, #16]
 800e012:	b920      	cbnz	r0, 800e01e <_svfiprintf_r+0x2e>
 800e014:	230c      	movs	r3, #12
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e01c:	e0d1      	b.n	800e1c2 <_svfiprintf_r+0x1d2>
 800e01e:	2340      	movs	r3, #64	; 0x40
 800e020:	616b      	str	r3, [r5, #20]
 800e022:	2300      	movs	r3, #0
 800e024:	9309      	str	r3, [sp, #36]	; 0x24
 800e026:	2320      	movs	r3, #32
 800e028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e030:	2330      	movs	r3, #48	; 0x30
 800e032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e1dc <_svfiprintf_r+0x1ec>
 800e036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e03a:	f04f 0901 	mov.w	r9, #1
 800e03e:	4623      	mov	r3, r4
 800e040:	469a      	mov	sl, r3
 800e042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e046:	b10a      	cbz	r2, 800e04c <_svfiprintf_r+0x5c>
 800e048:	2a25      	cmp	r2, #37	; 0x25
 800e04a:	d1f9      	bne.n	800e040 <_svfiprintf_r+0x50>
 800e04c:	ebba 0b04 	subs.w	fp, sl, r4
 800e050:	d00b      	beq.n	800e06a <_svfiprintf_r+0x7a>
 800e052:	465b      	mov	r3, fp
 800e054:	4622      	mov	r2, r4
 800e056:	4629      	mov	r1, r5
 800e058:	4638      	mov	r0, r7
 800e05a:	f7ff ff6e 	bl	800df3a <__ssputs_r>
 800e05e:	3001      	adds	r0, #1
 800e060:	f000 80aa 	beq.w	800e1b8 <_svfiprintf_r+0x1c8>
 800e064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e066:	445a      	add	r2, fp
 800e068:	9209      	str	r2, [sp, #36]	; 0x24
 800e06a:	f89a 3000 	ldrb.w	r3, [sl]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f000 80a2 	beq.w	800e1b8 <_svfiprintf_r+0x1c8>
 800e074:	2300      	movs	r3, #0
 800e076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e07a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e07e:	f10a 0a01 	add.w	sl, sl, #1
 800e082:	9304      	str	r3, [sp, #16]
 800e084:	9307      	str	r3, [sp, #28]
 800e086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e08a:	931a      	str	r3, [sp, #104]	; 0x68
 800e08c:	4654      	mov	r4, sl
 800e08e:	2205      	movs	r2, #5
 800e090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e094:	4851      	ldr	r0, [pc, #324]	; (800e1dc <_svfiprintf_r+0x1ec>)
 800e096:	f7f2 f8a3 	bl	80001e0 <memchr>
 800e09a:	9a04      	ldr	r2, [sp, #16]
 800e09c:	b9d8      	cbnz	r0, 800e0d6 <_svfiprintf_r+0xe6>
 800e09e:	06d0      	lsls	r0, r2, #27
 800e0a0:	bf44      	itt	mi
 800e0a2:	2320      	movmi	r3, #32
 800e0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0a8:	0711      	lsls	r1, r2, #28
 800e0aa:	bf44      	itt	mi
 800e0ac:	232b      	movmi	r3, #43	; 0x2b
 800e0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800e0b8:	d015      	beq.n	800e0e6 <_svfiprintf_r+0xf6>
 800e0ba:	9a07      	ldr	r2, [sp, #28]
 800e0bc:	4654      	mov	r4, sl
 800e0be:	2000      	movs	r0, #0
 800e0c0:	f04f 0c0a 	mov.w	ip, #10
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0ca:	3b30      	subs	r3, #48	; 0x30
 800e0cc:	2b09      	cmp	r3, #9
 800e0ce:	d94e      	bls.n	800e16e <_svfiprintf_r+0x17e>
 800e0d0:	b1b0      	cbz	r0, 800e100 <_svfiprintf_r+0x110>
 800e0d2:	9207      	str	r2, [sp, #28]
 800e0d4:	e014      	b.n	800e100 <_svfiprintf_r+0x110>
 800e0d6:	eba0 0308 	sub.w	r3, r0, r8
 800e0da:	fa09 f303 	lsl.w	r3, r9, r3
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	46a2      	mov	sl, r4
 800e0e4:	e7d2      	b.n	800e08c <_svfiprintf_r+0x9c>
 800e0e6:	9b03      	ldr	r3, [sp, #12]
 800e0e8:	1d19      	adds	r1, r3, #4
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	9103      	str	r1, [sp, #12]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	bfbb      	ittet	lt
 800e0f2:	425b      	neglt	r3, r3
 800e0f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e0f8:	9307      	strge	r3, [sp, #28]
 800e0fa:	9307      	strlt	r3, [sp, #28]
 800e0fc:	bfb8      	it	lt
 800e0fe:	9204      	strlt	r2, [sp, #16]
 800e100:	7823      	ldrb	r3, [r4, #0]
 800e102:	2b2e      	cmp	r3, #46	; 0x2e
 800e104:	d10c      	bne.n	800e120 <_svfiprintf_r+0x130>
 800e106:	7863      	ldrb	r3, [r4, #1]
 800e108:	2b2a      	cmp	r3, #42	; 0x2a
 800e10a:	d135      	bne.n	800e178 <_svfiprintf_r+0x188>
 800e10c:	9b03      	ldr	r3, [sp, #12]
 800e10e:	1d1a      	adds	r2, r3, #4
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	9203      	str	r2, [sp, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	bfb8      	it	lt
 800e118:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e11c:	3402      	adds	r4, #2
 800e11e:	9305      	str	r3, [sp, #20]
 800e120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1ec <_svfiprintf_r+0x1fc>
 800e124:	7821      	ldrb	r1, [r4, #0]
 800e126:	2203      	movs	r2, #3
 800e128:	4650      	mov	r0, sl
 800e12a:	f7f2 f859 	bl	80001e0 <memchr>
 800e12e:	b140      	cbz	r0, 800e142 <_svfiprintf_r+0x152>
 800e130:	2340      	movs	r3, #64	; 0x40
 800e132:	eba0 000a 	sub.w	r0, r0, sl
 800e136:	fa03 f000 	lsl.w	r0, r3, r0
 800e13a:	9b04      	ldr	r3, [sp, #16]
 800e13c:	4303      	orrs	r3, r0
 800e13e:	3401      	adds	r4, #1
 800e140:	9304      	str	r3, [sp, #16]
 800e142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e146:	4826      	ldr	r0, [pc, #152]	; (800e1e0 <_svfiprintf_r+0x1f0>)
 800e148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e14c:	2206      	movs	r2, #6
 800e14e:	f7f2 f847 	bl	80001e0 <memchr>
 800e152:	2800      	cmp	r0, #0
 800e154:	d038      	beq.n	800e1c8 <_svfiprintf_r+0x1d8>
 800e156:	4b23      	ldr	r3, [pc, #140]	; (800e1e4 <_svfiprintf_r+0x1f4>)
 800e158:	bb1b      	cbnz	r3, 800e1a2 <_svfiprintf_r+0x1b2>
 800e15a:	9b03      	ldr	r3, [sp, #12]
 800e15c:	3307      	adds	r3, #7
 800e15e:	f023 0307 	bic.w	r3, r3, #7
 800e162:	3308      	adds	r3, #8
 800e164:	9303      	str	r3, [sp, #12]
 800e166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e168:	4433      	add	r3, r6
 800e16a:	9309      	str	r3, [sp, #36]	; 0x24
 800e16c:	e767      	b.n	800e03e <_svfiprintf_r+0x4e>
 800e16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e172:	460c      	mov	r4, r1
 800e174:	2001      	movs	r0, #1
 800e176:	e7a5      	b.n	800e0c4 <_svfiprintf_r+0xd4>
 800e178:	2300      	movs	r3, #0
 800e17a:	3401      	adds	r4, #1
 800e17c:	9305      	str	r3, [sp, #20]
 800e17e:	4619      	mov	r1, r3
 800e180:	f04f 0c0a 	mov.w	ip, #10
 800e184:	4620      	mov	r0, r4
 800e186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e18a:	3a30      	subs	r2, #48	; 0x30
 800e18c:	2a09      	cmp	r2, #9
 800e18e:	d903      	bls.n	800e198 <_svfiprintf_r+0x1a8>
 800e190:	2b00      	cmp	r3, #0
 800e192:	d0c5      	beq.n	800e120 <_svfiprintf_r+0x130>
 800e194:	9105      	str	r1, [sp, #20]
 800e196:	e7c3      	b.n	800e120 <_svfiprintf_r+0x130>
 800e198:	fb0c 2101 	mla	r1, ip, r1, r2
 800e19c:	4604      	mov	r4, r0
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e7f0      	b.n	800e184 <_svfiprintf_r+0x194>
 800e1a2:	ab03      	add	r3, sp, #12
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	462a      	mov	r2, r5
 800e1a8:	4b0f      	ldr	r3, [pc, #60]	; (800e1e8 <_svfiprintf_r+0x1f8>)
 800e1aa:	a904      	add	r1, sp, #16
 800e1ac:	4638      	mov	r0, r7
 800e1ae:	f7fc fa05 	bl	800a5bc <_printf_float>
 800e1b2:	1c42      	adds	r2, r0, #1
 800e1b4:	4606      	mov	r6, r0
 800e1b6:	d1d6      	bne.n	800e166 <_svfiprintf_r+0x176>
 800e1b8:	89ab      	ldrh	r3, [r5, #12]
 800e1ba:	065b      	lsls	r3, r3, #25
 800e1bc:	f53f af2c 	bmi.w	800e018 <_svfiprintf_r+0x28>
 800e1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1c2:	b01d      	add	sp, #116	; 0x74
 800e1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c8:	ab03      	add	r3, sp, #12
 800e1ca:	9300      	str	r3, [sp, #0]
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	4b06      	ldr	r3, [pc, #24]	; (800e1e8 <_svfiprintf_r+0x1f8>)
 800e1d0:	a904      	add	r1, sp, #16
 800e1d2:	4638      	mov	r0, r7
 800e1d4:	f7fc fc96 	bl	800ab04 <_printf_i>
 800e1d8:	e7eb      	b.n	800e1b2 <_svfiprintf_r+0x1c2>
 800e1da:	bf00      	nop
 800e1dc:	08010294 	.word	0x08010294
 800e1e0:	0801029e 	.word	0x0801029e
 800e1e4:	0800a5bd 	.word	0x0800a5bd
 800e1e8:	0800df3b 	.word	0x0800df3b
 800e1ec:	0801029a 	.word	0x0801029a

0800e1f0 <__sfputc_r>:
 800e1f0:	6893      	ldr	r3, [r2, #8]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	b410      	push	{r4}
 800e1f8:	6093      	str	r3, [r2, #8]
 800e1fa:	da08      	bge.n	800e20e <__sfputc_r+0x1e>
 800e1fc:	6994      	ldr	r4, [r2, #24]
 800e1fe:	42a3      	cmp	r3, r4
 800e200:	db01      	blt.n	800e206 <__sfputc_r+0x16>
 800e202:	290a      	cmp	r1, #10
 800e204:	d103      	bne.n	800e20e <__sfputc_r+0x1e>
 800e206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e20a:	f000 b9ad 	b.w	800e568 <__swbuf_r>
 800e20e:	6813      	ldr	r3, [r2, #0]
 800e210:	1c58      	adds	r0, r3, #1
 800e212:	6010      	str	r0, [r2, #0]
 800e214:	7019      	strb	r1, [r3, #0]
 800e216:	4608      	mov	r0, r1
 800e218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <__sfputs_r>:
 800e21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e220:	4606      	mov	r6, r0
 800e222:	460f      	mov	r7, r1
 800e224:	4614      	mov	r4, r2
 800e226:	18d5      	adds	r5, r2, r3
 800e228:	42ac      	cmp	r4, r5
 800e22a:	d101      	bne.n	800e230 <__sfputs_r+0x12>
 800e22c:	2000      	movs	r0, #0
 800e22e:	e007      	b.n	800e240 <__sfputs_r+0x22>
 800e230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e234:	463a      	mov	r2, r7
 800e236:	4630      	mov	r0, r6
 800e238:	f7ff ffda 	bl	800e1f0 <__sfputc_r>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d1f3      	bne.n	800e228 <__sfputs_r+0xa>
 800e240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e244 <_vfiprintf_r>:
 800e244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e248:	460d      	mov	r5, r1
 800e24a:	b09d      	sub	sp, #116	; 0x74
 800e24c:	4614      	mov	r4, r2
 800e24e:	4698      	mov	r8, r3
 800e250:	4606      	mov	r6, r0
 800e252:	b118      	cbz	r0, 800e25c <_vfiprintf_r+0x18>
 800e254:	6983      	ldr	r3, [r0, #24]
 800e256:	b90b      	cbnz	r3, 800e25c <_vfiprintf_r+0x18>
 800e258:	f7fe fd58 	bl	800cd0c <__sinit>
 800e25c:	4b89      	ldr	r3, [pc, #548]	; (800e484 <_vfiprintf_r+0x240>)
 800e25e:	429d      	cmp	r5, r3
 800e260:	d11b      	bne.n	800e29a <_vfiprintf_r+0x56>
 800e262:	6875      	ldr	r5, [r6, #4]
 800e264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e266:	07d9      	lsls	r1, r3, #31
 800e268:	d405      	bmi.n	800e276 <_vfiprintf_r+0x32>
 800e26a:	89ab      	ldrh	r3, [r5, #12]
 800e26c:	059a      	lsls	r2, r3, #22
 800e26e:	d402      	bmi.n	800e276 <_vfiprintf_r+0x32>
 800e270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e272:	f7ff f95c 	bl	800d52e <__retarget_lock_acquire_recursive>
 800e276:	89ab      	ldrh	r3, [r5, #12]
 800e278:	071b      	lsls	r3, r3, #28
 800e27a:	d501      	bpl.n	800e280 <_vfiprintf_r+0x3c>
 800e27c:	692b      	ldr	r3, [r5, #16]
 800e27e:	b9eb      	cbnz	r3, 800e2bc <_vfiprintf_r+0x78>
 800e280:	4629      	mov	r1, r5
 800e282:	4630      	mov	r0, r6
 800e284:	f000 f9e2 	bl	800e64c <__swsetup_r>
 800e288:	b1c0      	cbz	r0, 800e2bc <_vfiprintf_r+0x78>
 800e28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e28c:	07dc      	lsls	r4, r3, #31
 800e28e:	d50e      	bpl.n	800e2ae <_vfiprintf_r+0x6a>
 800e290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e294:	b01d      	add	sp, #116	; 0x74
 800e296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29a:	4b7b      	ldr	r3, [pc, #492]	; (800e488 <_vfiprintf_r+0x244>)
 800e29c:	429d      	cmp	r5, r3
 800e29e:	d101      	bne.n	800e2a4 <_vfiprintf_r+0x60>
 800e2a0:	68b5      	ldr	r5, [r6, #8]
 800e2a2:	e7df      	b.n	800e264 <_vfiprintf_r+0x20>
 800e2a4:	4b79      	ldr	r3, [pc, #484]	; (800e48c <_vfiprintf_r+0x248>)
 800e2a6:	429d      	cmp	r5, r3
 800e2a8:	bf08      	it	eq
 800e2aa:	68f5      	ldreq	r5, [r6, #12]
 800e2ac:	e7da      	b.n	800e264 <_vfiprintf_r+0x20>
 800e2ae:	89ab      	ldrh	r3, [r5, #12]
 800e2b0:	0598      	lsls	r0, r3, #22
 800e2b2:	d4ed      	bmi.n	800e290 <_vfiprintf_r+0x4c>
 800e2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2b6:	f7ff f93b 	bl	800d530 <__retarget_lock_release_recursive>
 800e2ba:	e7e9      	b.n	800e290 <_vfiprintf_r+0x4c>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	9309      	str	r3, [sp, #36]	; 0x24
 800e2c0:	2320      	movs	r3, #32
 800e2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2ca:	2330      	movs	r3, #48	; 0x30
 800e2cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e490 <_vfiprintf_r+0x24c>
 800e2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2d4:	f04f 0901 	mov.w	r9, #1
 800e2d8:	4623      	mov	r3, r4
 800e2da:	469a      	mov	sl, r3
 800e2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2e0:	b10a      	cbz	r2, 800e2e6 <_vfiprintf_r+0xa2>
 800e2e2:	2a25      	cmp	r2, #37	; 0x25
 800e2e4:	d1f9      	bne.n	800e2da <_vfiprintf_r+0x96>
 800e2e6:	ebba 0b04 	subs.w	fp, sl, r4
 800e2ea:	d00b      	beq.n	800e304 <_vfiprintf_r+0xc0>
 800e2ec:	465b      	mov	r3, fp
 800e2ee:	4622      	mov	r2, r4
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	f7ff ff93 	bl	800e21e <__sfputs_r>
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	f000 80aa 	beq.w	800e452 <_vfiprintf_r+0x20e>
 800e2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e300:	445a      	add	r2, fp
 800e302:	9209      	str	r2, [sp, #36]	; 0x24
 800e304:	f89a 3000 	ldrb.w	r3, [sl]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 80a2 	beq.w	800e452 <_vfiprintf_r+0x20e>
 800e30e:	2300      	movs	r3, #0
 800e310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e318:	f10a 0a01 	add.w	sl, sl, #1
 800e31c:	9304      	str	r3, [sp, #16]
 800e31e:	9307      	str	r3, [sp, #28]
 800e320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e324:	931a      	str	r3, [sp, #104]	; 0x68
 800e326:	4654      	mov	r4, sl
 800e328:	2205      	movs	r2, #5
 800e32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e32e:	4858      	ldr	r0, [pc, #352]	; (800e490 <_vfiprintf_r+0x24c>)
 800e330:	f7f1 ff56 	bl	80001e0 <memchr>
 800e334:	9a04      	ldr	r2, [sp, #16]
 800e336:	b9d8      	cbnz	r0, 800e370 <_vfiprintf_r+0x12c>
 800e338:	06d1      	lsls	r1, r2, #27
 800e33a:	bf44      	itt	mi
 800e33c:	2320      	movmi	r3, #32
 800e33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e342:	0713      	lsls	r3, r2, #28
 800e344:	bf44      	itt	mi
 800e346:	232b      	movmi	r3, #43	; 0x2b
 800e348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e34c:	f89a 3000 	ldrb.w	r3, [sl]
 800e350:	2b2a      	cmp	r3, #42	; 0x2a
 800e352:	d015      	beq.n	800e380 <_vfiprintf_r+0x13c>
 800e354:	9a07      	ldr	r2, [sp, #28]
 800e356:	4654      	mov	r4, sl
 800e358:	2000      	movs	r0, #0
 800e35a:	f04f 0c0a 	mov.w	ip, #10
 800e35e:	4621      	mov	r1, r4
 800e360:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e364:	3b30      	subs	r3, #48	; 0x30
 800e366:	2b09      	cmp	r3, #9
 800e368:	d94e      	bls.n	800e408 <_vfiprintf_r+0x1c4>
 800e36a:	b1b0      	cbz	r0, 800e39a <_vfiprintf_r+0x156>
 800e36c:	9207      	str	r2, [sp, #28]
 800e36e:	e014      	b.n	800e39a <_vfiprintf_r+0x156>
 800e370:	eba0 0308 	sub.w	r3, r0, r8
 800e374:	fa09 f303 	lsl.w	r3, r9, r3
 800e378:	4313      	orrs	r3, r2
 800e37a:	9304      	str	r3, [sp, #16]
 800e37c:	46a2      	mov	sl, r4
 800e37e:	e7d2      	b.n	800e326 <_vfiprintf_r+0xe2>
 800e380:	9b03      	ldr	r3, [sp, #12]
 800e382:	1d19      	adds	r1, r3, #4
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	9103      	str	r1, [sp, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	bfbb      	ittet	lt
 800e38c:	425b      	neglt	r3, r3
 800e38e:	f042 0202 	orrlt.w	r2, r2, #2
 800e392:	9307      	strge	r3, [sp, #28]
 800e394:	9307      	strlt	r3, [sp, #28]
 800e396:	bfb8      	it	lt
 800e398:	9204      	strlt	r2, [sp, #16]
 800e39a:	7823      	ldrb	r3, [r4, #0]
 800e39c:	2b2e      	cmp	r3, #46	; 0x2e
 800e39e:	d10c      	bne.n	800e3ba <_vfiprintf_r+0x176>
 800e3a0:	7863      	ldrb	r3, [r4, #1]
 800e3a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e3a4:	d135      	bne.n	800e412 <_vfiprintf_r+0x1ce>
 800e3a6:	9b03      	ldr	r3, [sp, #12]
 800e3a8:	1d1a      	adds	r2, r3, #4
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	9203      	str	r2, [sp, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	bfb8      	it	lt
 800e3b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e3b6:	3402      	adds	r4, #2
 800e3b8:	9305      	str	r3, [sp, #20]
 800e3ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e4a0 <_vfiprintf_r+0x25c>
 800e3be:	7821      	ldrb	r1, [r4, #0]
 800e3c0:	2203      	movs	r2, #3
 800e3c2:	4650      	mov	r0, sl
 800e3c4:	f7f1 ff0c 	bl	80001e0 <memchr>
 800e3c8:	b140      	cbz	r0, 800e3dc <_vfiprintf_r+0x198>
 800e3ca:	2340      	movs	r3, #64	; 0x40
 800e3cc:	eba0 000a 	sub.w	r0, r0, sl
 800e3d0:	fa03 f000 	lsl.w	r0, r3, r0
 800e3d4:	9b04      	ldr	r3, [sp, #16]
 800e3d6:	4303      	orrs	r3, r0
 800e3d8:	3401      	adds	r4, #1
 800e3da:	9304      	str	r3, [sp, #16]
 800e3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3e0:	482c      	ldr	r0, [pc, #176]	; (800e494 <_vfiprintf_r+0x250>)
 800e3e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3e6:	2206      	movs	r2, #6
 800e3e8:	f7f1 fefa 	bl	80001e0 <memchr>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d03f      	beq.n	800e470 <_vfiprintf_r+0x22c>
 800e3f0:	4b29      	ldr	r3, [pc, #164]	; (800e498 <_vfiprintf_r+0x254>)
 800e3f2:	bb1b      	cbnz	r3, 800e43c <_vfiprintf_r+0x1f8>
 800e3f4:	9b03      	ldr	r3, [sp, #12]
 800e3f6:	3307      	adds	r3, #7
 800e3f8:	f023 0307 	bic.w	r3, r3, #7
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	9303      	str	r3, [sp, #12]
 800e400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e402:	443b      	add	r3, r7
 800e404:	9309      	str	r3, [sp, #36]	; 0x24
 800e406:	e767      	b.n	800e2d8 <_vfiprintf_r+0x94>
 800e408:	fb0c 3202 	mla	r2, ip, r2, r3
 800e40c:	460c      	mov	r4, r1
 800e40e:	2001      	movs	r0, #1
 800e410:	e7a5      	b.n	800e35e <_vfiprintf_r+0x11a>
 800e412:	2300      	movs	r3, #0
 800e414:	3401      	adds	r4, #1
 800e416:	9305      	str	r3, [sp, #20]
 800e418:	4619      	mov	r1, r3
 800e41a:	f04f 0c0a 	mov.w	ip, #10
 800e41e:	4620      	mov	r0, r4
 800e420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e424:	3a30      	subs	r2, #48	; 0x30
 800e426:	2a09      	cmp	r2, #9
 800e428:	d903      	bls.n	800e432 <_vfiprintf_r+0x1ee>
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d0c5      	beq.n	800e3ba <_vfiprintf_r+0x176>
 800e42e:	9105      	str	r1, [sp, #20]
 800e430:	e7c3      	b.n	800e3ba <_vfiprintf_r+0x176>
 800e432:	fb0c 2101 	mla	r1, ip, r1, r2
 800e436:	4604      	mov	r4, r0
 800e438:	2301      	movs	r3, #1
 800e43a:	e7f0      	b.n	800e41e <_vfiprintf_r+0x1da>
 800e43c:	ab03      	add	r3, sp, #12
 800e43e:	9300      	str	r3, [sp, #0]
 800e440:	462a      	mov	r2, r5
 800e442:	4b16      	ldr	r3, [pc, #88]	; (800e49c <_vfiprintf_r+0x258>)
 800e444:	a904      	add	r1, sp, #16
 800e446:	4630      	mov	r0, r6
 800e448:	f7fc f8b8 	bl	800a5bc <_printf_float>
 800e44c:	4607      	mov	r7, r0
 800e44e:	1c78      	adds	r0, r7, #1
 800e450:	d1d6      	bne.n	800e400 <_vfiprintf_r+0x1bc>
 800e452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e454:	07d9      	lsls	r1, r3, #31
 800e456:	d405      	bmi.n	800e464 <_vfiprintf_r+0x220>
 800e458:	89ab      	ldrh	r3, [r5, #12]
 800e45a:	059a      	lsls	r2, r3, #22
 800e45c:	d402      	bmi.n	800e464 <_vfiprintf_r+0x220>
 800e45e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e460:	f7ff f866 	bl	800d530 <__retarget_lock_release_recursive>
 800e464:	89ab      	ldrh	r3, [r5, #12]
 800e466:	065b      	lsls	r3, r3, #25
 800e468:	f53f af12 	bmi.w	800e290 <_vfiprintf_r+0x4c>
 800e46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e46e:	e711      	b.n	800e294 <_vfiprintf_r+0x50>
 800e470:	ab03      	add	r3, sp, #12
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	462a      	mov	r2, r5
 800e476:	4b09      	ldr	r3, [pc, #36]	; (800e49c <_vfiprintf_r+0x258>)
 800e478:	a904      	add	r1, sp, #16
 800e47a:	4630      	mov	r0, r6
 800e47c:	f7fc fb42 	bl	800ab04 <_printf_i>
 800e480:	e7e4      	b.n	800e44c <_vfiprintf_r+0x208>
 800e482:	bf00      	nop
 800e484:	0801007c 	.word	0x0801007c
 800e488:	0801009c 	.word	0x0801009c
 800e48c:	0801005c 	.word	0x0801005c
 800e490:	08010294 	.word	0x08010294
 800e494:	0801029e 	.word	0x0801029e
 800e498:	0800a5bd 	.word	0x0800a5bd
 800e49c:	0800e21f 	.word	0x0800e21f
 800e4a0:	0801029a 	.word	0x0801029a
 800e4a4:	00000000 	.word	0x00000000

0800e4a8 <nan>:
 800e4a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4b0 <nan+0x8>
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	00000000 	.word	0x00000000
 800e4b4:	7ff80000 	.word	0x7ff80000

0800e4b8 <__sread>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	460c      	mov	r4, r1
 800e4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c0:	f000 faf6 	bl	800eab0 <_read_r>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	bfab      	itete	ge
 800e4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e4cc:	181b      	addge	r3, r3, r0
 800e4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e4d2:	bfac      	ite	ge
 800e4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4d6:	81a3      	strhlt	r3, [r4, #12]
 800e4d8:	bd10      	pop	{r4, pc}

0800e4da <__swrite>:
 800e4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4de:	461f      	mov	r7, r3
 800e4e0:	898b      	ldrh	r3, [r1, #12]
 800e4e2:	05db      	lsls	r3, r3, #23
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	4616      	mov	r6, r2
 800e4ea:	d505      	bpl.n	800e4f8 <__swrite+0x1e>
 800e4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f000 fa1a 	bl	800e92c <_lseek_r>
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e502:	81a3      	strh	r3, [r4, #12]
 800e504:	4632      	mov	r2, r6
 800e506:	463b      	mov	r3, r7
 800e508:	4628      	mov	r0, r5
 800e50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e50e:	f000 b88b 	b.w	800e628 <_write_r>

0800e512 <__sseek>:
 800e512:	b510      	push	{r4, lr}
 800e514:	460c      	mov	r4, r1
 800e516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e51a:	f000 fa07 	bl	800e92c <_lseek_r>
 800e51e:	1c43      	adds	r3, r0, #1
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	bf15      	itete	ne
 800e524:	6560      	strne	r0, [r4, #84]	; 0x54
 800e526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e52e:	81a3      	strheq	r3, [r4, #12]
 800e530:	bf18      	it	ne
 800e532:	81a3      	strhne	r3, [r4, #12]
 800e534:	bd10      	pop	{r4, pc}

0800e536 <__sclose>:
 800e536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e53a:	f000 b913 	b.w	800e764 <_close_r>

0800e53e <strncmp>:
 800e53e:	b510      	push	{r4, lr}
 800e540:	b17a      	cbz	r2, 800e562 <strncmp+0x24>
 800e542:	4603      	mov	r3, r0
 800e544:	3901      	subs	r1, #1
 800e546:	1884      	adds	r4, r0, r2
 800e548:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e54c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e550:	4290      	cmp	r0, r2
 800e552:	d101      	bne.n	800e558 <strncmp+0x1a>
 800e554:	42a3      	cmp	r3, r4
 800e556:	d101      	bne.n	800e55c <strncmp+0x1e>
 800e558:	1a80      	subs	r0, r0, r2
 800e55a:	bd10      	pop	{r4, pc}
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d1f3      	bne.n	800e548 <strncmp+0xa>
 800e560:	e7fa      	b.n	800e558 <strncmp+0x1a>
 800e562:	4610      	mov	r0, r2
 800e564:	e7f9      	b.n	800e55a <strncmp+0x1c>
	...

0800e568 <__swbuf_r>:
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56a:	460e      	mov	r6, r1
 800e56c:	4614      	mov	r4, r2
 800e56e:	4605      	mov	r5, r0
 800e570:	b118      	cbz	r0, 800e57a <__swbuf_r+0x12>
 800e572:	6983      	ldr	r3, [r0, #24]
 800e574:	b90b      	cbnz	r3, 800e57a <__swbuf_r+0x12>
 800e576:	f7fe fbc9 	bl	800cd0c <__sinit>
 800e57a:	4b21      	ldr	r3, [pc, #132]	; (800e600 <__swbuf_r+0x98>)
 800e57c:	429c      	cmp	r4, r3
 800e57e:	d12b      	bne.n	800e5d8 <__swbuf_r+0x70>
 800e580:	686c      	ldr	r4, [r5, #4]
 800e582:	69a3      	ldr	r3, [r4, #24]
 800e584:	60a3      	str	r3, [r4, #8]
 800e586:	89a3      	ldrh	r3, [r4, #12]
 800e588:	071a      	lsls	r2, r3, #28
 800e58a:	d52f      	bpl.n	800e5ec <__swbuf_r+0x84>
 800e58c:	6923      	ldr	r3, [r4, #16]
 800e58e:	b36b      	cbz	r3, 800e5ec <__swbuf_r+0x84>
 800e590:	6923      	ldr	r3, [r4, #16]
 800e592:	6820      	ldr	r0, [r4, #0]
 800e594:	1ac0      	subs	r0, r0, r3
 800e596:	6963      	ldr	r3, [r4, #20]
 800e598:	b2f6      	uxtb	r6, r6
 800e59a:	4283      	cmp	r3, r0
 800e59c:	4637      	mov	r7, r6
 800e59e:	dc04      	bgt.n	800e5aa <__swbuf_r+0x42>
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f000 f974 	bl	800e890 <_fflush_r>
 800e5a8:	bb30      	cbnz	r0, 800e5f8 <__swbuf_r+0x90>
 800e5aa:	68a3      	ldr	r3, [r4, #8]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	60a3      	str	r3, [r4, #8]
 800e5b0:	6823      	ldr	r3, [r4, #0]
 800e5b2:	1c5a      	adds	r2, r3, #1
 800e5b4:	6022      	str	r2, [r4, #0]
 800e5b6:	701e      	strb	r6, [r3, #0]
 800e5b8:	6963      	ldr	r3, [r4, #20]
 800e5ba:	3001      	adds	r0, #1
 800e5bc:	4283      	cmp	r3, r0
 800e5be:	d004      	beq.n	800e5ca <__swbuf_r+0x62>
 800e5c0:	89a3      	ldrh	r3, [r4, #12]
 800e5c2:	07db      	lsls	r3, r3, #31
 800e5c4:	d506      	bpl.n	800e5d4 <__swbuf_r+0x6c>
 800e5c6:	2e0a      	cmp	r6, #10
 800e5c8:	d104      	bne.n	800e5d4 <__swbuf_r+0x6c>
 800e5ca:	4621      	mov	r1, r4
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	f000 f95f 	bl	800e890 <_fflush_r>
 800e5d2:	b988      	cbnz	r0, 800e5f8 <__swbuf_r+0x90>
 800e5d4:	4638      	mov	r0, r7
 800e5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d8:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <__swbuf_r+0x9c>)
 800e5da:	429c      	cmp	r4, r3
 800e5dc:	d101      	bne.n	800e5e2 <__swbuf_r+0x7a>
 800e5de:	68ac      	ldr	r4, [r5, #8]
 800e5e0:	e7cf      	b.n	800e582 <__swbuf_r+0x1a>
 800e5e2:	4b09      	ldr	r3, [pc, #36]	; (800e608 <__swbuf_r+0xa0>)
 800e5e4:	429c      	cmp	r4, r3
 800e5e6:	bf08      	it	eq
 800e5e8:	68ec      	ldreq	r4, [r5, #12]
 800e5ea:	e7ca      	b.n	800e582 <__swbuf_r+0x1a>
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f000 f82c 	bl	800e64c <__swsetup_r>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d0cb      	beq.n	800e590 <__swbuf_r+0x28>
 800e5f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e5fc:	e7ea      	b.n	800e5d4 <__swbuf_r+0x6c>
 800e5fe:	bf00      	nop
 800e600:	0801007c 	.word	0x0801007c
 800e604:	0801009c 	.word	0x0801009c
 800e608:	0801005c 	.word	0x0801005c

0800e60c <__ascii_wctomb>:
 800e60c:	b149      	cbz	r1, 800e622 <__ascii_wctomb+0x16>
 800e60e:	2aff      	cmp	r2, #255	; 0xff
 800e610:	bf85      	ittet	hi
 800e612:	238a      	movhi	r3, #138	; 0x8a
 800e614:	6003      	strhi	r3, [r0, #0]
 800e616:	700a      	strbls	r2, [r1, #0]
 800e618:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e61c:	bf98      	it	ls
 800e61e:	2001      	movls	r0, #1
 800e620:	4770      	bx	lr
 800e622:	4608      	mov	r0, r1
 800e624:	4770      	bx	lr
	...

0800e628 <_write_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4d07      	ldr	r5, [pc, #28]	; (800e648 <_write_r+0x20>)
 800e62c:	4604      	mov	r4, r0
 800e62e:	4608      	mov	r0, r1
 800e630:	4611      	mov	r1, r2
 800e632:	2200      	movs	r2, #0
 800e634:	602a      	str	r2, [r5, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	f7f3 fe53 	bl	80022e2 <_write>
 800e63c:	1c43      	adds	r3, r0, #1
 800e63e:	d102      	bne.n	800e646 <_write_r+0x1e>
 800e640:	682b      	ldr	r3, [r5, #0]
 800e642:	b103      	cbz	r3, 800e646 <_write_r+0x1e>
 800e644:	6023      	str	r3, [r4, #0]
 800e646:	bd38      	pop	{r3, r4, r5, pc}
 800e648:	20000aac 	.word	0x20000aac

0800e64c <__swsetup_r>:
 800e64c:	4b32      	ldr	r3, [pc, #200]	; (800e718 <__swsetup_r+0xcc>)
 800e64e:	b570      	push	{r4, r5, r6, lr}
 800e650:	681d      	ldr	r5, [r3, #0]
 800e652:	4606      	mov	r6, r0
 800e654:	460c      	mov	r4, r1
 800e656:	b125      	cbz	r5, 800e662 <__swsetup_r+0x16>
 800e658:	69ab      	ldr	r3, [r5, #24]
 800e65a:	b913      	cbnz	r3, 800e662 <__swsetup_r+0x16>
 800e65c:	4628      	mov	r0, r5
 800e65e:	f7fe fb55 	bl	800cd0c <__sinit>
 800e662:	4b2e      	ldr	r3, [pc, #184]	; (800e71c <__swsetup_r+0xd0>)
 800e664:	429c      	cmp	r4, r3
 800e666:	d10f      	bne.n	800e688 <__swsetup_r+0x3c>
 800e668:	686c      	ldr	r4, [r5, #4]
 800e66a:	89a3      	ldrh	r3, [r4, #12]
 800e66c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e670:	0719      	lsls	r1, r3, #28
 800e672:	d42c      	bmi.n	800e6ce <__swsetup_r+0x82>
 800e674:	06dd      	lsls	r5, r3, #27
 800e676:	d411      	bmi.n	800e69c <__swsetup_r+0x50>
 800e678:	2309      	movs	r3, #9
 800e67a:	6033      	str	r3, [r6, #0]
 800e67c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e680:	81a3      	strh	r3, [r4, #12]
 800e682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e686:	e03e      	b.n	800e706 <__swsetup_r+0xba>
 800e688:	4b25      	ldr	r3, [pc, #148]	; (800e720 <__swsetup_r+0xd4>)
 800e68a:	429c      	cmp	r4, r3
 800e68c:	d101      	bne.n	800e692 <__swsetup_r+0x46>
 800e68e:	68ac      	ldr	r4, [r5, #8]
 800e690:	e7eb      	b.n	800e66a <__swsetup_r+0x1e>
 800e692:	4b24      	ldr	r3, [pc, #144]	; (800e724 <__swsetup_r+0xd8>)
 800e694:	429c      	cmp	r4, r3
 800e696:	bf08      	it	eq
 800e698:	68ec      	ldreq	r4, [r5, #12]
 800e69a:	e7e6      	b.n	800e66a <__swsetup_r+0x1e>
 800e69c:	0758      	lsls	r0, r3, #29
 800e69e:	d512      	bpl.n	800e6c6 <__swsetup_r+0x7a>
 800e6a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6a2:	b141      	cbz	r1, 800e6b6 <__swsetup_r+0x6a>
 800e6a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6a8:	4299      	cmp	r1, r3
 800e6aa:	d002      	beq.n	800e6b2 <__swsetup_r+0x66>
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	f7fb fe05 	bl	800a2bc <_free_r>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	6363      	str	r3, [r4, #52]	; 0x34
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6bc:	81a3      	strh	r3, [r4, #12]
 800e6be:	2300      	movs	r3, #0
 800e6c0:	6063      	str	r3, [r4, #4]
 800e6c2:	6923      	ldr	r3, [r4, #16]
 800e6c4:	6023      	str	r3, [r4, #0]
 800e6c6:	89a3      	ldrh	r3, [r4, #12]
 800e6c8:	f043 0308 	orr.w	r3, r3, #8
 800e6cc:	81a3      	strh	r3, [r4, #12]
 800e6ce:	6923      	ldr	r3, [r4, #16]
 800e6d0:	b94b      	cbnz	r3, 800e6e6 <__swsetup_r+0x9a>
 800e6d2:	89a3      	ldrh	r3, [r4, #12]
 800e6d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6dc:	d003      	beq.n	800e6e6 <__swsetup_r+0x9a>
 800e6de:	4621      	mov	r1, r4
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	f000 f95b 	bl	800e99c <__smakebuf_r>
 800e6e6:	89a0      	ldrh	r0, [r4, #12]
 800e6e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6ec:	f010 0301 	ands.w	r3, r0, #1
 800e6f0:	d00a      	beq.n	800e708 <__swsetup_r+0xbc>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	60a3      	str	r3, [r4, #8]
 800e6f6:	6963      	ldr	r3, [r4, #20]
 800e6f8:	425b      	negs	r3, r3
 800e6fa:	61a3      	str	r3, [r4, #24]
 800e6fc:	6923      	ldr	r3, [r4, #16]
 800e6fe:	b943      	cbnz	r3, 800e712 <__swsetup_r+0xc6>
 800e700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e704:	d1ba      	bne.n	800e67c <__swsetup_r+0x30>
 800e706:	bd70      	pop	{r4, r5, r6, pc}
 800e708:	0781      	lsls	r1, r0, #30
 800e70a:	bf58      	it	pl
 800e70c:	6963      	ldrpl	r3, [r4, #20]
 800e70e:	60a3      	str	r3, [r4, #8]
 800e710:	e7f4      	b.n	800e6fc <__swsetup_r+0xb0>
 800e712:	2000      	movs	r0, #0
 800e714:	e7f7      	b.n	800e706 <__swsetup_r+0xba>
 800e716:	bf00      	nop
 800e718:	2000002c 	.word	0x2000002c
 800e71c:	0801007c 	.word	0x0801007c
 800e720:	0801009c 	.word	0x0801009c
 800e724:	0801005c 	.word	0x0801005c

0800e728 <__assert_func>:
 800e728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e72a:	4614      	mov	r4, r2
 800e72c:	461a      	mov	r2, r3
 800e72e:	4b09      	ldr	r3, [pc, #36]	; (800e754 <__assert_func+0x2c>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4605      	mov	r5, r0
 800e734:	68d8      	ldr	r0, [r3, #12]
 800e736:	b14c      	cbz	r4, 800e74c <__assert_func+0x24>
 800e738:	4b07      	ldr	r3, [pc, #28]	; (800e758 <__assert_func+0x30>)
 800e73a:	9100      	str	r1, [sp, #0]
 800e73c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e740:	4906      	ldr	r1, [pc, #24]	; (800e75c <__assert_func+0x34>)
 800e742:	462b      	mov	r3, r5
 800e744:	f000 f8e0 	bl	800e908 <fiprintf>
 800e748:	f000 f9c4 	bl	800ead4 <abort>
 800e74c:	4b04      	ldr	r3, [pc, #16]	; (800e760 <__assert_func+0x38>)
 800e74e:	461c      	mov	r4, r3
 800e750:	e7f3      	b.n	800e73a <__assert_func+0x12>
 800e752:	bf00      	nop
 800e754:	2000002c 	.word	0x2000002c
 800e758:	080102a5 	.word	0x080102a5
 800e75c:	080102b2 	.word	0x080102b2
 800e760:	080102e0 	.word	0x080102e0

0800e764 <_close_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4d06      	ldr	r5, [pc, #24]	; (800e780 <_close_r+0x1c>)
 800e768:	2300      	movs	r3, #0
 800e76a:	4604      	mov	r4, r0
 800e76c:	4608      	mov	r0, r1
 800e76e:	602b      	str	r3, [r5, #0]
 800e770:	f7f3 ffcb 	bl	800270a <_close>
 800e774:	1c43      	adds	r3, r0, #1
 800e776:	d102      	bne.n	800e77e <_close_r+0x1a>
 800e778:	682b      	ldr	r3, [r5, #0]
 800e77a:	b103      	cbz	r3, 800e77e <_close_r+0x1a>
 800e77c:	6023      	str	r3, [r4, #0]
 800e77e:	bd38      	pop	{r3, r4, r5, pc}
 800e780:	20000aac 	.word	0x20000aac

0800e784 <__sflush_r>:
 800e784:	898a      	ldrh	r2, [r1, #12]
 800e786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e78a:	4605      	mov	r5, r0
 800e78c:	0710      	lsls	r0, r2, #28
 800e78e:	460c      	mov	r4, r1
 800e790:	d458      	bmi.n	800e844 <__sflush_r+0xc0>
 800e792:	684b      	ldr	r3, [r1, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	dc05      	bgt.n	800e7a4 <__sflush_r+0x20>
 800e798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	dc02      	bgt.n	800e7a4 <__sflush_r+0x20>
 800e79e:	2000      	movs	r0, #0
 800e7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7a6:	2e00      	cmp	r6, #0
 800e7a8:	d0f9      	beq.n	800e79e <__sflush_r+0x1a>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7b0:	682f      	ldr	r7, [r5, #0]
 800e7b2:	602b      	str	r3, [r5, #0]
 800e7b4:	d032      	beq.n	800e81c <__sflush_r+0x98>
 800e7b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	075a      	lsls	r2, r3, #29
 800e7bc:	d505      	bpl.n	800e7ca <__sflush_r+0x46>
 800e7be:	6863      	ldr	r3, [r4, #4]
 800e7c0:	1ac0      	subs	r0, r0, r3
 800e7c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7c4:	b10b      	cbz	r3, 800e7ca <__sflush_r+0x46>
 800e7c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7c8:	1ac0      	subs	r0, r0, r3
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7d0:	6a21      	ldr	r1, [r4, #32]
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	47b0      	blx	r6
 800e7d6:	1c43      	adds	r3, r0, #1
 800e7d8:	89a3      	ldrh	r3, [r4, #12]
 800e7da:	d106      	bne.n	800e7ea <__sflush_r+0x66>
 800e7dc:	6829      	ldr	r1, [r5, #0]
 800e7de:	291d      	cmp	r1, #29
 800e7e0:	d82c      	bhi.n	800e83c <__sflush_r+0xb8>
 800e7e2:	4a2a      	ldr	r2, [pc, #168]	; (800e88c <__sflush_r+0x108>)
 800e7e4:	40ca      	lsrs	r2, r1
 800e7e6:	07d6      	lsls	r6, r2, #31
 800e7e8:	d528      	bpl.n	800e83c <__sflush_r+0xb8>
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	6062      	str	r2, [r4, #4]
 800e7ee:	04d9      	lsls	r1, r3, #19
 800e7f0:	6922      	ldr	r2, [r4, #16]
 800e7f2:	6022      	str	r2, [r4, #0]
 800e7f4:	d504      	bpl.n	800e800 <__sflush_r+0x7c>
 800e7f6:	1c42      	adds	r2, r0, #1
 800e7f8:	d101      	bne.n	800e7fe <__sflush_r+0x7a>
 800e7fa:	682b      	ldr	r3, [r5, #0]
 800e7fc:	b903      	cbnz	r3, 800e800 <__sflush_r+0x7c>
 800e7fe:	6560      	str	r0, [r4, #84]	; 0x54
 800e800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e802:	602f      	str	r7, [r5, #0]
 800e804:	2900      	cmp	r1, #0
 800e806:	d0ca      	beq.n	800e79e <__sflush_r+0x1a>
 800e808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e80c:	4299      	cmp	r1, r3
 800e80e:	d002      	beq.n	800e816 <__sflush_r+0x92>
 800e810:	4628      	mov	r0, r5
 800e812:	f7fb fd53 	bl	800a2bc <_free_r>
 800e816:	2000      	movs	r0, #0
 800e818:	6360      	str	r0, [r4, #52]	; 0x34
 800e81a:	e7c1      	b.n	800e7a0 <__sflush_r+0x1c>
 800e81c:	6a21      	ldr	r1, [r4, #32]
 800e81e:	2301      	movs	r3, #1
 800e820:	4628      	mov	r0, r5
 800e822:	47b0      	blx	r6
 800e824:	1c41      	adds	r1, r0, #1
 800e826:	d1c7      	bne.n	800e7b8 <__sflush_r+0x34>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d0c4      	beq.n	800e7b8 <__sflush_r+0x34>
 800e82e:	2b1d      	cmp	r3, #29
 800e830:	d001      	beq.n	800e836 <__sflush_r+0xb2>
 800e832:	2b16      	cmp	r3, #22
 800e834:	d101      	bne.n	800e83a <__sflush_r+0xb6>
 800e836:	602f      	str	r7, [r5, #0]
 800e838:	e7b1      	b.n	800e79e <__sflush_r+0x1a>
 800e83a:	89a3      	ldrh	r3, [r4, #12]
 800e83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e840:	81a3      	strh	r3, [r4, #12]
 800e842:	e7ad      	b.n	800e7a0 <__sflush_r+0x1c>
 800e844:	690f      	ldr	r7, [r1, #16]
 800e846:	2f00      	cmp	r7, #0
 800e848:	d0a9      	beq.n	800e79e <__sflush_r+0x1a>
 800e84a:	0793      	lsls	r3, r2, #30
 800e84c:	680e      	ldr	r6, [r1, #0]
 800e84e:	bf08      	it	eq
 800e850:	694b      	ldreq	r3, [r1, #20]
 800e852:	600f      	str	r7, [r1, #0]
 800e854:	bf18      	it	ne
 800e856:	2300      	movne	r3, #0
 800e858:	eba6 0807 	sub.w	r8, r6, r7
 800e85c:	608b      	str	r3, [r1, #8]
 800e85e:	f1b8 0f00 	cmp.w	r8, #0
 800e862:	dd9c      	ble.n	800e79e <__sflush_r+0x1a>
 800e864:	6a21      	ldr	r1, [r4, #32]
 800e866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e868:	4643      	mov	r3, r8
 800e86a:	463a      	mov	r2, r7
 800e86c:	4628      	mov	r0, r5
 800e86e:	47b0      	blx	r6
 800e870:	2800      	cmp	r0, #0
 800e872:	dc06      	bgt.n	800e882 <__sflush_r+0xfe>
 800e874:	89a3      	ldrh	r3, [r4, #12]
 800e876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e87a:	81a3      	strh	r3, [r4, #12]
 800e87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e880:	e78e      	b.n	800e7a0 <__sflush_r+0x1c>
 800e882:	4407      	add	r7, r0
 800e884:	eba8 0800 	sub.w	r8, r8, r0
 800e888:	e7e9      	b.n	800e85e <__sflush_r+0xda>
 800e88a:	bf00      	nop
 800e88c:	20400001 	.word	0x20400001

0800e890 <_fflush_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	690b      	ldr	r3, [r1, #16]
 800e894:	4605      	mov	r5, r0
 800e896:	460c      	mov	r4, r1
 800e898:	b913      	cbnz	r3, 800e8a0 <_fflush_r+0x10>
 800e89a:	2500      	movs	r5, #0
 800e89c:	4628      	mov	r0, r5
 800e89e:	bd38      	pop	{r3, r4, r5, pc}
 800e8a0:	b118      	cbz	r0, 800e8aa <_fflush_r+0x1a>
 800e8a2:	6983      	ldr	r3, [r0, #24]
 800e8a4:	b90b      	cbnz	r3, 800e8aa <_fflush_r+0x1a>
 800e8a6:	f7fe fa31 	bl	800cd0c <__sinit>
 800e8aa:	4b14      	ldr	r3, [pc, #80]	; (800e8fc <_fflush_r+0x6c>)
 800e8ac:	429c      	cmp	r4, r3
 800e8ae:	d11b      	bne.n	800e8e8 <_fflush_r+0x58>
 800e8b0:	686c      	ldr	r4, [r5, #4]
 800e8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d0ef      	beq.n	800e89a <_fflush_r+0xa>
 800e8ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8bc:	07d0      	lsls	r0, r2, #31
 800e8be:	d404      	bmi.n	800e8ca <_fflush_r+0x3a>
 800e8c0:	0599      	lsls	r1, r3, #22
 800e8c2:	d402      	bmi.n	800e8ca <_fflush_r+0x3a>
 800e8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8c6:	f7fe fe32 	bl	800d52e <__retarget_lock_acquire_recursive>
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	f7ff ff59 	bl	800e784 <__sflush_r>
 800e8d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8d4:	07da      	lsls	r2, r3, #31
 800e8d6:	4605      	mov	r5, r0
 800e8d8:	d4e0      	bmi.n	800e89c <_fflush_r+0xc>
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	059b      	lsls	r3, r3, #22
 800e8de:	d4dd      	bmi.n	800e89c <_fflush_r+0xc>
 800e8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8e2:	f7fe fe25 	bl	800d530 <__retarget_lock_release_recursive>
 800e8e6:	e7d9      	b.n	800e89c <_fflush_r+0xc>
 800e8e8:	4b05      	ldr	r3, [pc, #20]	; (800e900 <_fflush_r+0x70>)
 800e8ea:	429c      	cmp	r4, r3
 800e8ec:	d101      	bne.n	800e8f2 <_fflush_r+0x62>
 800e8ee:	68ac      	ldr	r4, [r5, #8]
 800e8f0:	e7df      	b.n	800e8b2 <_fflush_r+0x22>
 800e8f2:	4b04      	ldr	r3, [pc, #16]	; (800e904 <_fflush_r+0x74>)
 800e8f4:	429c      	cmp	r4, r3
 800e8f6:	bf08      	it	eq
 800e8f8:	68ec      	ldreq	r4, [r5, #12]
 800e8fa:	e7da      	b.n	800e8b2 <_fflush_r+0x22>
 800e8fc:	0801007c 	.word	0x0801007c
 800e900:	0801009c 	.word	0x0801009c
 800e904:	0801005c 	.word	0x0801005c

0800e908 <fiprintf>:
 800e908:	b40e      	push	{r1, r2, r3}
 800e90a:	b503      	push	{r0, r1, lr}
 800e90c:	4601      	mov	r1, r0
 800e90e:	ab03      	add	r3, sp, #12
 800e910:	4805      	ldr	r0, [pc, #20]	; (800e928 <fiprintf+0x20>)
 800e912:	f853 2b04 	ldr.w	r2, [r3], #4
 800e916:	6800      	ldr	r0, [r0, #0]
 800e918:	9301      	str	r3, [sp, #4]
 800e91a:	f7ff fc93 	bl	800e244 <_vfiprintf_r>
 800e91e:	b002      	add	sp, #8
 800e920:	f85d eb04 	ldr.w	lr, [sp], #4
 800e924:	b003      	add	sp, #12
 800e926:	4770      	bx	lr
 800e928:	2000002c 	.word	0x2000002c

0800e92c <_lseek_r>:
 800e92c:	b538      	push	{r3, r4, r5, lr}
 800e92e:	4d07      	ldr	r5, [pc, #28]	; (800e94c <_lseek_r+0x20>)
 800e930:	4604      	mov	r4, r0
 800e932:	4608      	mov	r0, r1
 800e934:	4611      	mov	r1, r2
 800e936:	2200      	movs	r2, #0
 800e938:	602a      	str	r2, [r5, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	f7f3 ff0c 	bl	8002758 <_lseek>
 800e940:	1c43      	adds	r3, r0, #1
 800e942:	d102      	bne.n	800e94a <_lseek_r+0x1e>
 800e944:	682b      	ldr	r3, [r5, #0]
 800e946:	b103      	cbz	r3, 800e94a <_lseek_r+0x1e>
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	bd38      	pop	{r3, r4, r5, pc}
 800e94c:	20000aac 	.word	0x20000aac

0800e950 <__swhatbuf_r>:
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	460e      	mov	r6, r1
 800e954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e958:	2900      	cmp	r1, #0
 800e95a:	b096      	sub	sp, #88	; 0x58
 800e95c:	4614      	mov	r4, r2
 800e95e:	461d      	mov	r5, r3
 800e960:	da08      	bge.n	800e974 <__swhatbuf_r+0x24>
 800e962:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e966:	2200      	movs	r2, #0
 800e968:	602a      	str	r2, [r5, #0]
 800e96a:	061a      	lsls	r2, r3, #24
 800e96c:	d410      	bmi.n	800e990 <__swhatbuf_r+0x40>
 800e96e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e972:	e00e      	b.n	800e992 <__swhatbuf_r+0x42>
 800e974:	466a      	mov	r2, sp
 800e976:	f000 f8b5 	bl	800eae4 <_fstat_r>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	dbf1      	blt.n	800e962 <__swhatbuf_r+0x12>
 800e97e:	9a01      	ldr	r2, [sp, #4]
 800e980:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e984:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e988:	425a      	negs	r2, r3
 800e98a:	415a      	adcs	r2, r3
 800e98c:	602a      	str	r2, [r5, #0]
 800e98e:	e7ee      	b.n	800e96e <__swhatbuf_r+0x1e>
 800e990:	2340      	movs	r3, #64	; 0x40
 800e992:	2000      	movs	r0, #0
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	b016      	add	sp, #88	; 0x58
 800e998:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e99c <__smakebuf_r>:
 800e99c:	898b      	ldrh	r3, [r1, #12]
 800e99e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9a0:	079d      	lsls	r5, r3, #30
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	d507      	bpl.n	800e9b8 <__smakebuf_r+0x1c>
 800e9a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e9ac:	6023      	str	r3, [r4, #0]
 800e9ae:	6123      	str	r3, [r4, #16]
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	6163      	str	r3, [r4, #20]
 800e9b4:	b002      	add	sp, #8
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}
 800e9b8:	ab01      	add	r3, sp, #4
 800e9ba:	466a      	mov	r2, sp
 800e9bc:	f7ff ffc8 	bl	800e950 <__swhatbuf_r>
 800e9c0:	9900      	ldr	r1, [sp, #0]
 800e9c2:	4605      	mov	r5, r0
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7fb fce5 	bl	800a394 <_malloc_r>
 800e9ca:	b948      	cbnz	r0, 800e9e0 <__smakebuf_r+0x44>
 800e9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9d0:	059a      	lsls	r2, r3, #22
 800e9d2:	d4ef      	bmi.n	800e9b4 <__smakebuf_r+0x18>
 800e9d4:	f023 0303 	bic.w	r3, r3, #3
 800e9d8:	f043 0302 	orr.w	r3, r3, #2
 800e9dc:	81a3      	strh	r3, [r4, #12]
 800e9de:	e7e3      	b.n	800e9a8 <__smakebuf_r+0xc>
 800e9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ea18 <__smakebuf_r+0x7c>)
 800e9e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e9e4:	89a3      	ldrh	r3, [r4, #12]
 800e9e6:	6020      	str	r0, [r4, #0]
 800e9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9ec:	81a3      	strh	r3, [r4, #12]
 800e9ee:	9b00      	ldr	r3, [sp, #0]
 800e9f0:	6163      	str	r3, [r4, #20]
 800e9f2:	9b01      	ldr	r3, [sp, #4]
 800e9f4:	6120      	str	r0, [r4, #16]
 800e9f6:	b15b      	cbz	r3, 800ea10 <__smakebuf_r+0x74>
 800e9f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f000 f883 	bl	800eb08 <_isatty_r>
 800ea02:	b128      	cbz	r0, 800ea10 <__smakebuf_r+0x74>
 800ea04:	89a3      	ldrh	r3, [r4, #12]
 800ea06:	f023 0303 	bic.w	r3, r3, #3
 800ea0a:	f043 0301 	orr.w	r3, r3, #1
 800ea0e:	81a3      	strh	r3, [r4, #12]
 800ea10:	89a0      	ldrh	r0, [r4, #12]
 800ea12:	4305      	orrs	r5, r0
 800ea14:	81a5      	strh	r5, [r4, #12]
 800ea16:	e7cd      	b.n	800e9b4 <__smakebuf_r+0x18>
 800ea18:	0800cca5 	.word	0x0800cca5

0800ea1c <memmove>:
 800ea1c:	4288      	cmp	r0, r1
 800ea1e:	b510      	push	{r4, lr}
 800ea20:	eb01 0402 	add.w	r4, r1, r2
 800ea24:	d902      	bls.n	800ea2c <memmove+0x10>
 800ea26:	4284      	cmp	r4, r0
 800ea28:	4623      	mov	r3, r4
 800ea2a:	d807      	bhi.n	800ea3c <memmove+0x20>
 800ea2c:	1e43      	subs	r3, r0, #1
 800ea2e:	42a1      	cmp	r1, r4
 800ea30:	d008      	beq.n	800ea44 <memmove+0x28>
 800ea32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea3a:	e7f8      	b.n	800ea2e <memmove+0x12>
 800ea3c:	4402      	add	r2, r0
 800ea3e:	4601      	mov	r1, r0
 800ea40:	428a      	cmp	r2, r1
 800ea42:	d100      	bne.n	800ea46 <memmove+0x2a>
 800ea44:	bd10      	pop	{r4, pc}
 800ea46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea4e:	e7f7      	b.n	800ea40 <memmove+0x24>

0800ea50 <_realloc_r>:
 800ea50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea54:	4680      	mov	r8, r0
 800ea56:	4614      	mov	r4, r2
 800ea58:	460e      	mov	r6, r1
 800ea5a:	b921      	cbnz	r1, 800ea66 <_realloc_r+0x16>
 800ea5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea60:	4611      	mov	r1, r2
 800ea62:	f7fb bc97 	b.w	800a394 <_malloc_r>
 800ea66:	b92a      	cbnz	r2, 800ea74 <_realloc_r+0x24>
 800ea68:	f7fb fc28 	bl	800a2bc <_free_r>
 800ea6c:	4625      	mov	r5, r4
 800ea6e:	4628      	mov	r0, r5
 800ea70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea74:	f000 f858 	bl	800eb28 <_malloc_usable_size_r>
 800ea78:	4284      	cmp	r4, r0
 800ea7a:	4607      	mov	r7, r0
 800ea7c:	d802      	bhi.n	800ea84 <_realloc_r+0x34>
 800ea7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea82:	d812      	bhi.n	800eaaa <_realloc_r+0x5a>
 800ea84:	4621      	mov	r1, r4
 800ea86:	4640      	mov	r0, r8
 800ea88:	f7fb fc84 	bl	800a394 <_malloc_r>
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d0ed      	beq.n	800ea6e <_realloc_r+0x1e>
 800ea92:	42bc      	cmp	r4, r7
 800ea94:	4622      	mov	r2, r4
 800ea96:	4631      	mov	r1, r6
 800ea98:	bf28      	it	cs
 800ea9a:	463a      	movcs	r2, r7
 800ea9c:	f7fe fd5b 	bl	800d556 <memcpy>
 800eaa0:	4631      	mov	r1, r6
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	f7fb fc0a 	bl	800a2bc <_free_r>
 800eaa8:	e7e1      	b.n	800ea6e <_realloc_r+0x1e>
 800eaaa:	4635      	mov	r5, r6
 800eaac:	e7df      	b.n	800ea6e <_realloc_r+0x1e>
	...

0800eab0 <_read_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4d07      	ldr	r5, [pc, #28]	; (800ead0 <_read_r+0x20>)
 800eab4:	4604      	mov	r4, r0
 800eab6:	4608      	mov	r0, r1
 800eab8:	4611      	mov	r1, r2
 800eaba:	2200      	movs	r2, #0
 800eabc:	602a      	str	r2, [r5, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	f7f3 fe06 	bl	80026d0 <_read>
 800eac4:	1c43      	adds	r3, r0, #1
 800eac6:	d102      	bne.n	800eace <_read_r+0x1e>
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	b103      	cbz	r3, 800eace <_read_r+0x1e>
 800eacc:	6023      	str	r3, [r4, #0]
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	20000aac 	.word	0x20000aac

0800ead4 <abort>:
 800ead4:	b508      	push	{r3, lr}
 800ead6:	2006      	movs	r0, #6
 800ead8:	f000 f856 	bl	800eb88 <raise>
 800eadc:	2001      	movs	r0, #1
 800eade:	f7f3 fded 	bl	80026bc <_exit>
	...

0800eae4 <_fstat_r>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	4d07      	ldr	r5, [pc, #28]	; (800eb04 <_fstat_r+0x20>)
 800eae8:	2300      	movs	r3, #0
 800eaea:	4604      	mov	r4, r0
 800eaec:	4608      	mov	r0, r1
 800eaee:	4611      	mov	r1, r2
 800eaf0:	602b      	str	r3, [r5, #0]
 800eaf2:	f7f3 fe16 	bl	8002722 <_fstat>
 800eaf6:	1c43      	adds	r3, r0, #1
 800eaf8:	d102      	bne.n	800eb00 <_fstat_r+0x1c>
 800eafa:	682b      	ldr	r3, [r5, #0]
 800eafc:	b103      	cbz	r3, 800eb00 <_fstat_r+0x1c>
 800eafe:	6023      	str	r3, [r4, #0]
 800eb00:	bd38      	pop	{r3, r4, r5, pc}
 800eb02:	bf00      	nop
 800eb04:	20000aac 	.word	0x20000aac

0800eb08 <_isatty_r>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	4d06      	ldr	r5, [pc, #24]	; (800eb24 <_isatty_r+0x1c>)
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	4604      	mov	r4, r0
 800eb10:	4608      	mov	r0, r1
 800eb12:	602b      	str	r3, [r5, #0]
 800eb14:	f7f3 fe15 	bl	8002742 <_isatty>
 800eb18:	1c43      	adds	r3, r0, #1
 800eb1a:	d102      	bne.n	800eb22 <_isatty_r+0x1a>
 800eb1c:	682b      	ldr	r3, [r5, #0]
 800eb1e:	b103      	cbz	r3, 800eb22 <_isatty_r+0x1a>
 800eb20:	6023      	str	r3, [r4, #0]
 800eb22:	bd38      	pop	{r3, r4, r5, pc}
 800eb24:	20000aac 	.word	0x20000aac

0800eb28 <_malloc_usable_size_r>:
 800eb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb2c:	1f18      	subs	r0, r3, #4
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	bfbc      	itt	lt
 800eb32:	580b      	ldrlt	r3, [r1, r0]
 800eb34:	18c0      	addlt	r0, r0, r3
 800eb36:	4770      	bx	lr

0800eb38 <_raise_r>:
 800eb38:	291f      	cmp	r1, #31
 800eb3a:	b538      	push	{r3, r4, r5, lr}
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	460d      	mov	r5, r1
 800eb40:	d904      	bls.n	800eb4c <_raise_r+0x14>
 800eb42:	2316      	movs	r3, #22
 800eb44:	6003      	str	r3, [r0, #0]
 800eb46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb4e:	b112      	cbz	r2, 800eb56 <_raise_r+0x1e>
 800eb50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb54:	b94b      	cbnz	r3, 800eb6a <_raise_r+0x32>
 800eb56:	4620      	mov	r0, r4
 800eb58:	f000 f830 	bl	800ebbc <_getpid_r>
 800eb5c:	462a      	mov	r2, r5
 800eb5e:	4601      	mov	r1, r0
 800eb60:	4620      	mov	r0, r4
 800eb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb66:	f000 b817 	b.w	800eb98 <_kill_r>
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d00a      	beq.n	800eb84 <_raise_r+0x4c>
 800eb6e:	1c59      	adds	r1, r3, #1
 800eb70:	d103      	bne.n	800eb7a <_raise_r+0x42>
 800eb72:	2316      	movs	r3, #22
 800eb74:	6003      	str	r3, [r0, #0]
 800eb76:	2001      	movs	r0, #1
 800eb78:	e7e7      	b.n	800eb4a <_raise_r+0x12>
 800eb7a:	2400      	movs	r4, #0
 800eb7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb80:	4628      	mov	r0, r5
 800eb82:	4798      	blx	r3
 800eb84:	2000      	movs	r0, #0
 800eb86:	e7e0      	b.n	800eb4a <_raise_r+0x12>

0800eb88 <raise>:
 800eb88:	4b02      	ldr	r3, [pc, #8]	; (800eb94 <raise+0xc>)
 800eb8a:	4601      	mov	r1, r0
 800eb8c:	6818      	ldr	r0, [r3, #0]
 800eb8e:	f7ff bfd3 	b.w	800eb38 <_raise_r>
 800eb92:	bf00      	nop
 800eb94:	2000002c 	.word	0x2000002c

0800eb98 <_kill_r>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	4d07      	ldr	r5, [pc, #28]	; (800ebb8 <_kill_r+0x20>)
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	4604      	mov	r4, r0
 800eba0:	4608      	mov	r0, r1
 800eba2:	4611      	mov	r1, r2
 800eba4:	602b      	str	r3, [r5, #0]
 800eba6:	f7f3 fd79 	bl	800269c <_kill>
 800ebaa:	1c43      	adds	r3, r0, #1
 800ebac:	d102      	bne.n	800ebb4 <_kill_r+0x1c>
 800ebae:	682b      	ldr	r3, [r5, #0]
 800ebb0:	b103      	cbz	r3, 800ebb4 <_kill_r+0x1c>
 800ebb2:	6023      	str	r3, [r4, #0]
 800ebb4:	bd38      	pop	{r3, r4, r5, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20000aac 	.word	0x20000aac

0800ebbc <_getpid_r>:
 800ebbc:	f7f3 bd66 	b.w	800268c <_getpid>

0800ebc0 <atan>:
 800ebc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc4:	ec55 4b10 	vmov	r4, r5, d0
 800ebc8:	4bc3      	ldr	r3, [pc, #780]	; (800eed8 <atan+0x318>)
 800ebca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ebce:	429e      	cmp	r6, r3
 800ebd0:	46ab      	mov	fp, r5
 800ebd2:	dd18      	ble.n	800ec06 <atan+0x46>
 800ebd4:	4bc1      	ldr	r3, [pc, #772]	; (800eedc <atan+0x31c>)
 800ebd6:	429e      	cmp	r6, r3
 800ebd8:	dc01      	bgt.n	800ebde <atan+0x1e>
 800ebda:	d109      	bne.n	800ebf0 <atan+0x30>
 800ebdc:	b144      	cbz	r4, 800ebf0 <atan+0x30>
 800ebde:	4622      	mov	r2, r4
 800ebe0:	462b      	mov	r3, r5
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	f7f1 fb51 	bl	800028c <__adddf3>
 800ebea:	4604      	mov	r4, r0
 800ebec:	460d      	mov	r5, r1
 800ebee:	e006      	b.n	800ebfe <atan+0x3e>
 800ebf0:	f1bb 0f00 	cmp.w	fp, #0
 800ebf4:	f300 8131 	bgt.w	800ee5a <atan+0x29a>
 800ebf8:	a59b      	add	r5, pc, #620	; (adr r5, 800ee68 <atan+0x2a8>)
 800ebfa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ebfe:	ec45 4b10 	vmov	d0, r4, r5
 800ec02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec06:	4bb6      	ldr	r3, [pc, #728]	; (800eee0 <atan+0x320>)
 800ec08:	429e      	cmp	r6, r3
 800ec0a:	dc14      	bgt.n	800ec36 <atan+0x76>
 800ec0c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ec10:	429e      	cmp	r6, r3
 800ec12:	dc0d      	bgt.n	800ec30 <atan+0x70>
 800ec14:	a396      	add	r3, pc, #600	; (adr r3, 800ee70 <atan+0x2b0>)
 800ec16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1a:	ee10 0a10 	vmov	r0, s0
 800ec1e:	4629      	mov	r1, r5
 800ec20:	f7f1 fb34 	bl	800028c <__adddf3>
 800ec24:	4baf      	ldr	r3, [pc, #700]	; (800eee4 <atan+0x324>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	f7f1 ff76 	bl	8000b18 <__aeabi_dcmpgt>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d1e6      	bne.n	800ebfe <atan+0x3e>
 800ec30:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ec34:	e02b      	b.n	800ec8e <atan+0xce>
 800ec36:	f000 f963 	bl	800ef00 <fabs>
 800ec3a:	4bab      	ldr	r3, [pc, #684]	; (800eee8 <atan+0x328>)
 800ec3c:	429e      	cmp	r6, r3
 800ec3e:	ec55 4b10 	vmov	r4, r5, d0
 800ec42:	f300 80bf 	bgt.w	800edc4 <atan+0x204>
 800ec46:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ec4a:	429e      	cmp	r6, r3
 800ec4c:	f300 80a0 	bgt.w	800ed90 <atan+0x1d0>
 800ec50:	ee10 2a10 	vmov	r2, s0
 800ec54:	ee10 0a10 	vmov	r0, s0
 800ec58:	462b      	mov	r3, r5
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	f7f1 fb16 	bl	800028c <__adddf3>
 800ec60:	4ba0      	ldr	r3, [pc, #640]	; (800eee4 <atan+0x324>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	f7f1 fb10 	bl	8000288 <__aeabi_dsub>
 800ec68:	2200      	movs	r2, #0
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec72:	4620      	mov	r0, r4
 800ec74:	4629      	mov	r1, r5
 800ec76:	f7f1 fb09 	bl	800028c <__adddf3>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	4630      	mov	r0, r6
 800ec80:	4639      	mov	r1, r7
 800ec82:	f7f1 fde3 	bl	800084c <__aeabi_ddiv>
 800ec86:	f04f 0a00 	mov.w	sl, #0
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	460d      	mov	r5, r1
 800ec8e:	4622      	mov	r2, r4
 800ec90:	462b      	mov	r3, r5
 800ec92:	4620      	mov	r0, r4
 800ec94:	4629      	mov	r1, r5
 800ec96:	f7f1 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	4680      	mov	r8, r0
 800eca0:	4689      	mov	r9, r1
 800eca2:	f7f1 fca9 	bl	80005f8 <__aeabi_dmul>
 800eca6:	a374      	add	r3, pc, #464	; (adr r3, 800ee78 <atan+0x2b8>)
 800eca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecac:	4606      	mov	r6, r0
 800ecae:	460f      	mov	r7, r1
 800ecb0:	f7f1 fca2 	bl	80005f8 <__aeabi_dmul>
 800ecb4:	a372      	add	r3, pc, #456	; (adr r3, 800ee80 <atan+0x2c0>)
 800ecb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecba:	f7f1 fae7 	bl	800028c <__adddf3>
 800ecbe:	4632      	mov	r2, r6
 800ecc0:	463b      	mov	r3, r7
 800ecc2:	f7f1 fc99 	bl	80005f8 <__aeabi_dmul>
 800ecc6:	a370      	add	r3, pc, #448	; (adr r3, 800ee88 <atan+0x2c8>)
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	f7f1 fade 	bl	800028c <__adddf3>
 800ecd0:	4632      	mov	r2, r6
 800ecd2:	463b      	mov	r3, r7
 800ecd4:	f7f1 fc90 	bl	80005f8 <__aeabi_dmul>
 800ecd8:	a36d      	add	r3, pc, #436	; (adr r3, 800ee90 <atan+0x2d0>)
 800ecda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecde:	f7f1 fad5 	bl	800028c <__adddf3>
 800ece2:	4632      	mov	r2, r6
 800ece4:	463b      	mov	r3, r7
 800ece6:	f7f1 fc87 	bl	80005f8 <__aeabi_dmul>
 800ecea:	a36b      	add	r3, pc, #428	; (adr r3, 800ee98 <atan+0x2d8>)
 800ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf0:	f7f1 facc 	bl	800028c <__adddf3>
 800ecf4:	4632      	mov	r2, r6
 800ecf6:	463b      	mov	r3, r7
 800ecf8:	f7f1 fc7e 	bl	80005f8 <__aeabi_dmul>
 800ecfc:	a368      	add	r3, pc, #416	; (adr r3, 800eea0 <atan+0x2e0>)
 800ecfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed02:	f7f1 fac3 	bl	800028c <__adddf3>
 800ed06:	4642      	mov	r2, r8
 800ed08:	464b      	mov	r3, r9
 800ed0a:	f7f1 fc75 	bl	80005f8 <__aeabi_dmul>
 800ed0e:	a366      	add	r3, pc, #408	; (adr r3, 800eea8 <atan+0x2e8>)
 800ed10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed14:	4680      	mov	r8, r0
 800ed16:	4689      	mov	r9, r1
 800ed18:	4630      	mov	r0, r6
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	f7f1 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ed20:	a363      	add	r3, pc, #396	; (adr r3, 800eeb0 <atan+0x2f0>)
 800ed22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed26:	f7f1 faaf 	bl	8000288 <__aeabi_dsub>
 800ed2a:	4632      	mov	r2, r6
 800ed2c:	463b      	mov	r3, r7
 800ed2e:	f7f1 fc63 	bl	80005f8 <__aeabi_dmul>
 800ed32:	a361      	add	r3, pc, #388	; (adr r3, 800eeb8 <atan+0x2f8>)
 800ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed38:	f7f1 faa6 	bl	8000288 <__aeabi_dsub>
 800ed3c:	4632      	mov	r2, r6
 800ed3e:	463b      	mov	r3, r7
 800ed40:	f7f1 fc5a 	bl	80005f8 <__aeabi_dmul>
 800ed44:	a35e      	add	r3, pc, #376	; (adr r3, 800eec0 <atan+0x300>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	f7f1 fa9d 	bl	8000288 <__aeabi_dsub>
 800ed4e:	4632      	mov	r2, r6
 800ed50:	463b      	mov	r3, r7
 800ed52:	f7f1 fc51 	bl	80005f8 <__aeabi_dmul>
 800ed56:	a35c      	add	r3, pc, #368	; (adr r3, 800eec8 <atan+0x308>)
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	f7f1 fa94 	bl	8000288 <__aeabi_dsub>
 800ed60:	4632      	mov	r2, r6
 800ed62:	463b      	mov	r3, r7
 800ed64:	f7f1 fc48 	bl	80005f8 <__aeabi_dmul>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4640      	mov	r0, r8
 800ed6e:	4649      	mov	r1, r9
 800ed70:	f7f1 fa8c 	bl	800028c <__adddf3>
 800ed74:	4622      	mov	r2, r4
 800ed76:	462b      	mov	r3, r5
 800ed78:	f7f1 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ed7c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ed80:	4602      	mov	r2, r0
 800ed82:	460b      	mov	r3, r1
 800ed84:	d14b      	bne.n	800ee1e <atan+0x25e>
 800ed86:	4620      	mov	r0, r4
 800ed88:	4629      	mov	r1, r5
 800ed8a:	f7f1 fa7d 	bl	8000288 <__aeabi_dsub>
 800ed8e:	e72c      	b.n	800ebea <atan+0x2a>
 800ed90:	ee10 0a10 	vmov	r0, s0
 800ed94:	4b53      	ldr	r3, [pc, #332]	; (800eee4 <atan+0x324>)
 800ed96:	2200      	movs	r2, #0
 800ed98:	4629      	mov	r1, r5
 800ed9a:	f7f1 fa75 	bl	8000288 <__aeabi_dsub>
 800ed9e:	4b51      	ldr	r3, [pc, #324]	; (800eee4 <atan+0x324>)
 800eda0:	4606      	mov	r6, r0
 800eda2:	460f      	mov	r7, r1
 800eda4:	2200      	movs	r2, #0
 800eda6:	4620      	mov	r0, r4
 800eda8:	4629      	mov	r1, r5
 800edaa:	f7f1 fa6f 	bl	800028c <__adddf3>
 800edae:	4602      	mov	r2, r0
 800edb0:	460b      	mov	r3, r1
 800edb2:	4630      	mov	r0, r6
 800edb4:	4639      	mov	r1, r7
 800edb6:	f7f1 fd49 	bl	800084c <__aeabi_ddiv>
 800edba:	f04f 0a01 	mov.w	sl, #1
 800edbe:	4604      	mov	r4, r0
 800edc0:	460d      	mov	r5, r1
 800edc2:	e764      	b.n	800ec8e <atan+0xce>
 800edc4:	4b49      	ldr	r3, [pc, #292]	; (800eeec <atan+0x32c>)
 800edc6:	429e      	cmp	r6, r3
 800edc8:	da1d      	bge.n	800ee06 <atan+0x246>
 800edca:	ee10 0a10 	vmov	r0, s0
 800edce:	4b48      	ldr	r3, [pc, #288]	; (800eef0 <atan+0x330>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	4629      	mov	r1, r5
 800edd4:	f7f1 fa58 	bl	8000288 <__aeabi_dsub>
 800edd8:	4b45      	ldr	r3, [pc, #276]	; (800eef0 <atan+0x330>)
 800edda:	4606      	mov	r6, r0
 800eddc:	460f      	mov	r7, r1
 800edde:	2200      	movs	r2, #0
 800ede0:	4620      	mov	r0, r4
 800ede2:	4629      	mov	r1, r5
 800ede4:	f7f1 fc08 	bl	80005f8 <__aeabi_dmul>
 800ede8:	4b3e      	ldr	r3, [pc, #248]	; (800eee4 <atan+0x324>)
 800edea:	2200      	movs	r2, #0
 800edec:	f7f1 fa4e 	bl	800028c <__adddf3>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	4630      	mov	r0, r6
 800edf6:	4639      	mov	r1, r7
 800edf8:	f7f1 fd28 	bl	800084c <__aeabi_ddiv>
 800edfc:	f04f 0a02 	mov.w	sl, #2
 800ee00:	4604      	mov	r4, r0
 800ee02:	460d      	mov	r5, r1
 800ee04:	e743      	b.n	800ec8e <atan+0xce>
 800ee06:	462b      	mov	r3, r5
 800ee08:	ee10 2a10 	vmov	r2, s0
 800ee0c:	4939      	ldr	r1, [pc, #228]	; (800eef4 <atan+0x334>)
 800ee0e:	2000      	movs	r0, #0
 800ee10:	f7f1 fd1c 	bl	800084c <__aeabi_ddiv>
 800ee14:	f04f 0a03 	mov.w	sl, #3
 800ee18:	4604      	mov	r4, r0
 800ee1a:	460d      	mov	r5, r1
 800ee1c:	e737      	b.n	800ec8e <atan+0xce>
 800ee1e:	4b36      	ldr	r3, [pc, #216]	; (800eef8 <atan+0x338>)
 800ee20:	4e36      	ldr	r6, [pc, #216]	; (800eefc <atan+0x33c>)
 800ee22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ee26:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ee2a:	e9da 2300 	ldrd	r2, r3, [sl]
 800ee2e:	f7f1 fa2b 	bl	8000288 <__aeabi_dsub>
 800ee32:	4622      	mov	r2, r4
 800ee34:	462b      	mov	r3, r5
 800ee36:	f7f1 fa27 	bl	8000288 <__aeabi_dsub>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ee42:	f7f1 fa21 	bl	8000288 <__aeabi_dsub>
 800ee46:	f1bb 0f00 	cmp.w	fp, #0
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	460d      	mov	r5, r1
 800ee4e:	f6bf aed6 	bge.w	800ebfe <atan+0x3e>
 800ee52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee56:	461d      	mov	r5, r3
 800ee58:	e6d1      	b.n	800ebfe <atan+0x3e>
 800ee5a:	a51d      	add	r5, pc, #116	; (adr r5, 800eed0 <atan+0x310>)
 800ee5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee60:	e6cd      	b.n	800ebfe <atan+0x3e>
 800ee62:	bf00      	nop
 800ee64:	f3af 8000 	nop.w
 800ee68:	54442d18 	.word	0x54442d18
 800ee6c:	bff921fb 	.word	0xbff921fb
 800ee70:	8800759c 	.word	0x8800759c
 800ee74:	7e37e43c 	.word	0x7e37e43c
 800ee78:	e322da11 	.word	0xe322da11
 800ee7c:	3f90ad3a 	.word	0x3f90ad3a
 800ee80:	24760deb 	.word	0x24760deb
 800ee84:	3fa97b4b 	.word	0x3fa97b4b
 800ee88:	a0d03d51 	.word	0xa0d03d51
 800ee8c:	3fb10d66 	.word	0x3fb10d66
 800ee90:	c54c206e 	.word	0xc54c206e
 800ee94:	3fb745cd 	.word	0x3fb745cd
 800ee98:	920083ff 	.word	0x920083ff
 800ee9c:	3fc24924 	.word	0x3fc24924
 800eea0:	5555550d 	.word	0x5555550d
 800eea4:	3fd55555 	.word	0x3fd55555
 800eea8:	2c6a6c2f 	.word	0x2c6a6c2f
 800eeac:	bfa2b444 	.word	0xbfa2b444
 800eeb0:	52defd9a 	.word	0x52defd9a
 800eeb4:	3fadde2d 	.word	0x3fadde2d
 800eeb8:	af749a6d 	.word	0xaf749a6d
 800eebc:	3fb3b0f2 	.word	0x3fb3b0f2
 800eec0:	fe231671 	.word	0xfe231671
 800eec4:	3fbc71c6 	.word	0x3fbc71c6
 800eec8:	9998ebc4 	.word	0x9998ebc4
 800eecc:	3fc99999 	.word	0x3fc99999
 800eed0:	54442d18 	.word	0x54442d18
 800eed4:	3ff921fb 	.word	0x3ff921fb
 800eed8:	440fffff 	.word	0x440fffff
 800eedc:	7ff00000 	.word	0x7ff00000
 800eee0:	3fdbffff 	.word	0x3fdbffff
 800eee4:	3ff00000 	.word	0x3ff00000
 800eee8:	3ff2ffff 	.word	0x3ff2ffff
 800eeec:	40038000 	.word	0x40038000
 800eef0:	3ff80000 	.word	0x3ff80000
 800eef4:	bff00000 	.word	0xbff00000
 800eef8:	08010308 	.word	0x08010308
 800eefc:	080102e8 	.word	0x080102e8

0800ef00 <fabs>:
 800ef00:	ec51 0b10 	vmov	r0, r1, d0
 800ef04:	ee10 2a10 	vmov	r2, s0
 800ef08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ef0c:	ec43 2b10 	vmov	d0, r2, r3
 800ef10:	4770      	bx	lr
	...

0800ef14 <pow>:
 800ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef16:	ed2d 8b02 	vpush	{d8}
 800ef1a:	eeb0 8a40 	vmov.f32	s16, s0
 800ef1e:	eef0 8a60 	vmov.f32	s17, s1
 800ef22:	ec55 4b11 	vmov	r4, r5, d1
 800ef26:	f000 f893 	bl	800f050 <__ieee754_pow>
 800ef2a:	4622      	mov	r2, r4
 800ef2c:	462b      	mov	r3, r5
 800ef2e:	4620      	mov	r0, r4
 800ef30:	4629      	mov	r1, r5
 800ef32:	ec57 6b10 	vmov	r6, r7, d0
 800ef36:	f7f1 fdf9 	bl	8000b2c <__aeabi_dcmpun>
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	d13b      	bne.n	800efb6 <pow+0xa2>
 800ef3e:	ec51 0b18 	vmov	r0, r1, d8
 800ef42:	2200      	movs	r2, #0
 800ef44:	2300      	movs	r3, #0
 800ef46:	f7f1 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef4a:	b1b8      	cbz	r0, 800ef7c <pow+0x68>
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2300      	movs	r3, #0
 800ef50:	4620      	mov	r0, r4
 800ef52:	4629      	mov	r1, r5
 800ef54:	f7f1 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d146      	bne.n	800efea <pow+0xd6>
 800ef5c:	ec45 4b10 	vmov	d0, r4, r5
 800ef60:	f000 fe86 	bl	800fc70 <finite>
 800ef64:	b338      	cbz	r0, 800efb6 <pow+0xa2>
 800ef66:	2200      	movs	r2, #0
 800ef68:	2300      	movs	r3, #0
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	4629      	mov	r1, r5
 800ef6e:	f7f1 fdb5 	bl	8000adc <__aeabi_dcmplt>
 800ef72:	b300      	cbz	r0, 800efb6 <pow+0xa2>
 800ef74:	f7fb f960 	bl	800a238 <__errno>
 800ef78:	2322      	movs	r3, #34	; 0x22
 800ef7a:	e01b      	b.n	800efb4 <pow+0xa0>
 800ef7c:	ec47 6b10 	vmov	d0, r6, r7
 800ef80:	f000 fe76 	bl	800fc70 <finite>
 800ef84:	b9e0      	cbnz	r0, 800efc0 <pow+0xac>
 800ef86:	eeb0 0a48 	vmov.f32	s0, s16
 800ef8a:	eef0 0a68 	vmov.f32	s1, s17
 800ef8e:	f000 fe6f 	bl	800fc70 <finite>
 800ef92:	b1a8      	cbz	r0, 800efc0 <pow+0xac>
 800ef94:	ec45 4b10 	vmov	d0, r4, r5
 800ef98:	f000 fe6a 	bl	800fc70 <finite>
 800ef9c:	b180      	cbz	r0, 800efc0 <pow+0xac>
 800ef9e:	4632      	mov	r2, r6
 800efa0:	463b      	mov	r3, r7
 800efa2:	4630      	mov	r0, r6
 800efa4:	4639      	mov	r1, r7
 800efa6:	f7f1 fdc1 	bl	8000b2c <__aeabi_dcmpun>
 800efaa:	2800      	cmp	r0, #0
 800efac:	d0e2      	beq.n	800ef74 <pow+0x60>
 800efae:	f7fb f943 	bl	800a238 <__errno>
 800efb2:	2321      	movs	r3, #33	; 0x21
 800efb4:	6003      	str	r3, [r0, #0]
 800efb6:	ecbd 8b02 	vpop	{d8}
 800efba:	ec47 6b10 	vmov	d0, r6, r7
 800efbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efc0:	2200      	movs	r2, #0
 800efc2:	2300      	movs	r3, #0
 800efc4:	4630      	mov	r0, r6
 800efc6:	4639      	mov	r1, r7
 800efc8:	f7f1 fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800efcc:	2800      	cmp	r0, #0
 800efce:	d0f2      	beq.n	800efb6 <pow+0xa2>
 800efd0:	eeb0 0a48 	vmov.f32	s0, s16
 800efd4:	eef0 0a68 	vmov.f32	s1, s17
 800efd8:	f000 fe4a 	bl	800fc70 <finite>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d0ea      	beq.n	800efb6 <pow+0xa2>
 800efe0:	ec45 4b10 	vmov	d0, r4, r5
 800efe4:	f000 fe44 	bl	800fc70 <finite>
 800efe8:	e7c3      	b.n	800ef72 <pow+0x5e>
 800efea:	4f01      	ldr	r7, [pc, #4]	; (800eff0 <pow+0xdc>)
 800efec:	2600      	movs	r6, #0
 800efee:	e7e2      	b.n	800efb6 <pow+0xa2>
 800eff0:	3ff00000 	.word	0x3ff00000

0800eff4 <sqrt>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	ed2d 8b02 	vpush	{d8}
 800effa:	ec55 4b10 	vmov	r4, r5, d0
 800effe:	f000 fd55 	bl	800faac <__ieee754_sqrt>
 800f002:	4622      	mov	r2, r4
 800f004:	462b      	mov	r3, r5
 800f006:	4620      	mov	r0, r4
 800f008:	4629      	mov	r1, r5
 800f00a:	eeb0 8a40 	vmov.f32	s16, s0
 800f00e:	eef0 8a60 	vmov.f32	s17, s1
 800f012:	f7f1 fd8b 	bl	8000b2c <__aeabi_dcmpun>
 800f016:	b990      	cbnz	r0, 800f03e <sqrt+0x4a>
 800f018:	2200      	movs	r2, #0
 800f01a:	2300      	movs	r3, #0
 800f01c:	4620      	mov	r0, r4
 800f01e:	4629      	mov	r1, r5
 800f020:	f7f1 fd5c 	bl	8000adc <__aeabi_dcmplt>
 800f024:	b158      	cbz	r0, 800f03e <sqrt+0x4a>
 800f026:	f7fb f907 	bl	800a238 <__errno>
 800f02a:	2321      	movs	r3, #33	; 0x21
 800f02c:	6003      	str	r3, [r0, #0]
 800f02e:	2200      	movs	r2, #0
 800f030:	2300      	movs	r3, #0
 800f032:	4610      	mov	r0, r2
 800f034:	4619      	mov	r1, r3
 800f036:	f7f1 fc09 	bl	800084c <__aeabi_ddiv>
 800f03a:	ec41 0b18 	vmov	d8, r0, r1
 800f03e:	eeb0 0a48 	vmov.f32	s0, s16
 800f042:	eef0 0a68 	vmov.f32	s1, s17
 800f046:	ecbd 8b02 	vpop	{d8}
 800f04a:	bd38      	pop	{r3, r4, r5, pc}
 800f04c:	0000      	movs	r0, r0
	...

0800f050 <__ieee754_pow>:
 800f050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f054:	ed2d 8b06 	vpush	{d8-d10}
 800f058:	b089      	sub	sp, #36	; 0x24
 800f05a:	ed8d 1b00 	vstr	d1, [sp]
 800f05e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f062:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f066:	ea58 0102 	orrs.w	r1, r8, r2
 800f06a:	ec57 6b10 	vmov	r6, r7, d0
 800f06e:	d115      	bne.n	800f09c <__ieee754_pow+0x4c>
 800f070:	19b3      	adds	r3, r6, r6
 800f072:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f076:	4152      	adcs	r2, r2
 800f078:	4299      	cmp	r1, r3
 800f07a:	4b89      	ldr	r3, [pc, #548]	; (800f2a0 <__ieee754_pow+0x250>)
 800f07c:	4193      	sbcs	r3, r2
 800f07e:	f080 84d2 	bcs.w	800fa26 <__ieee754_pow+0x9d6>
 800f082:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f086:	4630      	mov	r0, r6
 800f088:	4639      	mov	r1, r7
 800f08a:	f7f1 f8ff 	bl	800028c <__adddf3>
 800f08e:	ec41 0b10 	vmov	d0, r0, r1
 800f092:	b009      	add	sp, #36	; 0x24
 800f094:	ecbd 8b06 	vpop	{d8-d10}
 800f098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f09c:	4b81      	ldr	r3, [pc, #516]	; (800f2a4 <__ieee754_pow+0x254>)
 800f09e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f0a2:	429c      	cmp	r4, r3
 800f0a4:	ee10 aa10 	vmov	sl, s0
 800f0a8:	463d      	mov	r5, r7
 800f0aa:	dc06      	bgt.n	800f0ba <__ieee754_pow+0x6a>
 800f0ac:	d101      	bne.n	800f0b2 <__ieee754_pow+0x62>
 800f0ae:	2e00      	cmp	r6, #0
 800f0b0:	d1e7      	bne.n	800f082 <__ieee754_pow+0x32>
 800f0b2:	4598      	cmp	r8, r3
 800f0b4:	dc01      	bgt.n	800f0ba <__ieee754_pow+0x6a>
 800f0b6:	d10f      	bne.n	800f0d8 <__ieee754_pow+0x88>
 800f0b8:	b172      	cbz	r2, 800f0d8 <__ieee754_pow+0x88>
 800f0ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f0be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f0c2:	ea55 050a 	orrs.w	r5, r5, sl
 800f0c6:	d1dc      	bne.n	800f082 <__ieee754_pow+0x32>
 800f0c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f0cc:	18db      	adds	r3, r3, r3
 800f0ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f0d2:	4152      	adcs	r2, r2
 800f0d4:	429d      	cmp	r5, r3
 800f0d6:	e7d0      	b.n	800f07a <__ieee754_pow+0x2a>
 800f0d8:	2d00      	cmp	r5, #0
 800f0da:	da3b      	bge.n	800f154 <__ieee754_pow+0x104>
 800f0dc:	4b72      	ldr	r3, [pc, #456]	; (800f2a8 <__ieee754_pow+0x258>)
 800f0de:	4598      	cmp	r8, r3
 800f0e0:	dc51      	bgt.n	800f186 <__ieee754_pow+0x136>
 800f0e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f0e6:	4598      	cmp	r8, r3
 800f0e8:	f340 84ac 	ble.w	800fa44 <__ieee754_pow+0x9f4>
 800f0ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f0f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f0f4:	2b14      	cmp	r3, #20
 800f0f6:	dd0f      	ble.n	800f118 <__ieee754_pow+0xc8>
 800f0f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f0fc:	fa22 f103 	lsr.w	r1, r2, r3
 800f100:	fa01 f303 	lsl.w	r3, r1, r3
 800f104:	4293      	cmp	r3, r2
 800f106:	f040 849d 	bne.w	800fa44 <__ieee754_pow+0x9f4>
 800f10a:	f001 0101 	and.w	r1, r1, #1
 800f10e:	f1c1 0302 	rsb	r3, r1, #2
 800f112:	9304      	str	r3, [sp, #16]
 800f114:	b182      	cbz	r2, 800f138 <__ieee754_pow+0xe8>
 800f116:	e05f      	b.n	800f1d8 <__ieee754_pow+0x188>
 800f118:	2a00      	cmp	r2, #0
 800f11a:	d15b      	bne.n	800f1d4 <__ieee754_pow+0x184>
 800f11c:	f1c3 0314 	rsb	r3, r3, #20
 800f120:	fa48 f103 	asr.w	r1, r8, r3
 800f124:	fa01 f303 	lsl.w	r3, r1, r3
 800f128:	4543      	cmp	r3, r8
 800f12a:	f040 8488 	bne.w	800fa3e <__ieee754_pow+0x9ee>
 800f12e:	f001 0101 	and.w	r1, r1, #1
 800f132:	f1c1 0302 	rsb	r3, r1, #2
 800f136:	9304      	str	r3, [sp, #16]
 800f138:	4b5c      	ldr	r3, [pc, #368]	; (800f2ac <__ieee754_pow+0x25c>)
 800f13a:	4598      	cmp	r8, r3
 800f13c:	d132      	bne.n	800f1a4 <__ieee754_pow+0x154>
 800f13e:	f1b9 0f00 	cmp.w	r9, #0
 800f142:	f280 8478 	bge.w	800fa36 <__ieee754_pow+0x9e6>
 800f146:	4959      	ldr	r1, [pc, #356]	; (800f2ac <__ieee754_pow+0x25c>)
 800f148:	4632      	mov	r2, r6
 800f14a:	463b      	mov	r3, r7
 800f14c:	2000      	movs	r0, #0
 800f14e:	f7f1 fb7d 	bl	800084c <__aeabi_ddiv>
 800f152:	e79c      	b.n	800f08e <__ieee754_pow+0x3e>
 800f154:	2300      	movs	r3, #0
 800f156:	9304      	str	r3, [sp, #16]
 800f158:	2a00      	cmp	r2, #0
 800f15a:	d13d      	bne.n	800f1d8 <__ieee754_pow+0x188>
 800f15c:	4b51      	ldr	r3, [pc, #324]	; (800f2a4 <__ieee754_pow+0x254>)
 800f15e:	4598      	cmp	r8, r3
 800f160:	d1ea      	bne.n	800f138 <__ieee754_pow+0xe8>
 800f162:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f166:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f16a:	ea53 030a 	orrs.w	r3, r3, sl
 800f16e:	f000 845a 	beq.w	800fa26 <__ieee754_pow+0x9d6>
 800f172:	4b4f      	ldr	r3, [pc, #316]	; (800f2b0 <__ieee754_pow+0x260>)
 800f174:	429c      	cmp	r4, r3
 800f176:	dd08      	ble.n	800f18a <__ieee754_pow+0x13a>
 800f178:	f1b9 0f00 	cmp.w	r9, #0
 800f17c:	f2c0 8457 	blt.w	800fa2e <__ieee754_pow+0x9de>
 800f180:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f184:	e783      	b.n	800f08e <__ieee754_pow+0x3e>
 800f186:	2302      	movs	r3, #2
 800f188:	e7e5      	b.n	800f156 <__ieee754_pow+0x106>
 800f18a:	f1b9 0f00 	cmp.w	r9, #0
 800f18e:	f04f 0000 	mov.w	r0, #0
 800f192:	f04f 0100 	mov.w	r1, #0
 800f196:	f6bf af7a 	bge.w	800f08e <__ieee754_pow+0x3e>
 800f19a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f19e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f1a2:	e774      	b.n	800f08e <__ieee754_pow+0x3e>
 800f1a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f1a8:	d106      	bne.n	800f1b8 <__ieee754_pow+0x168>
 800f1aa:	4632      	mov	r2, r6
 800f1ac:	463b      	mov	r3, r7
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	f7f1 fa21 	bl	80005f8 <__aeabi_dmul>
 800f1b6:	e76a      	b.n	800f08e <__ieee754_pow+0x3e>
 800f1b8:	4b3e      	ldr	r3, [pc, #248]	; (800f2b4 <__ieee754_pow+0x264>)
 800f1ba:	4599      	cmp	r9, r3
 800f1bc:	d10c      	bne.n	800f1d8 <__ieee754_pow+0x188>
 800f1be:	2d00      	cmp	r5, #0
 800f1c0:	db0a      	blt.n	800f1d8 <__ieee754_pow+0x188>
 800f1c2:	ec47 6b10 	vmov	d0, r6, r7
 800f1c6:	b009      	add	sp, #36	; 0x24
 800f1c8:	ecbd 8b06 	vpop	{d8-d10}
 800f1cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d0:	f000 bc6c 	b.w	800faac <__ieee754_sqrt>
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	ec47 6b10 	vmov	d0, r6, r7
 800f1dc:	f7ff fe90 	bl	800ef00 <fabs>
 800f1e0:	ec51 0b10 	vmov	r0, r1, d0
 800f1e4:	f1ba 0f00 	cmp.w	sl, #0
 800f1e8:	d129      	bne.n	800f23e <__ieee754_pow+0x1ee>
 800f1ea:	b124      	cbz	r4, 800f1f6 <__ieee754_pow+0x1a6>
 800f1ec:	4b2f      	ldr	r3, [pc, #188]	; (800f2ac <__ieee754_pow+0x25c>)
 800f1ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d123      	bne.n	800f23e <__ieee754_pow+0x1ee>
 800f1f6:	f1b9 0f00 	cmp.w	r9, #0
 800f1fa:	da05      	bge.n	800f208 <__ieee754_pow+0x1b8>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	2000      	movs	r0, #0
 800f202:	492a      	ldr	r1, [pc, #168]	; (800f2ac <__ieee754_pow+0x25c>)
 800f204:	f7f1 fb22 	bl	800084c <__aeabi_ddiv>
 800f208:	2d00      	cmp	r5, #0
 800f20a:	f6bf af40 	bge.w	800f08e <__ieee754_pow+0x3e>
 800f20e:	9b04      	ldr	r3, [sp, #16]
 800f210:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f214:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f218:	4323      	orrs	r3, r4
 800f21a:	d108      	bne.n	800f22e <__ieee754_pow+0x1de>
 800f21c:	4602      	mov	r2, r0
 800f21e:	460b      	mov	r3, r1
 800f220:	4610      	mov	r0, r2
 800f222:	4619      	mov	r1, r3
 800f224:	f7f1 f830 	bl	8000288 <__aeabi_dsub>
 800f228:	4602      	mov	r2, r0
 800f22a:	460b      	mov	r3, r1
 800f22c:	e78f      	b.n	800f14e <__ieee754_pow+0xfe>
 800f22e:	9b04      	ldr	r3, [sp, #16]
 800f230:	2b01      	cmp	r3, #1
 800f232:	f47f af2c 	bne.w	800f08e <__ieee754_pow+0x3e>
 800f236:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f23a:	4619      	mov	r1, r3
 800f23c:	e727      	b.n	800f08e <__ieee754_pow+0x3e>
 800f23e:	0feb      	lsrs	r3, r5, #31
 800f240:	3b01      	subs	r3, #1
 800f242:	9306      	str	r3, [sp, #24]
 800f244:	9a06      	ldr	r2, [sp, #24]
 800f246:	9b04      	ldr	r3, [sp, #16]
 800f248:	4313      	orrs	r3, r2
 800f24a:	d102      	bne.n	800f252 <__ieee754_pow+0x202>
 800f24c:	4632      	mov	r2, r6
 800f24e:	463b      	mov	r3, r7
 800f250:	e7e6      	b.n	800f220 <__ieee754_pow+0x1d0>
 800f252:	4b19      	ldr	r3, [pc, #100]	; (800f2b8 <__ieee754_pow+0x268>)
 800f254:	4598      	cmp	r8, r3
 800f256:	f340 80fb 	ble.w	800f450 <__ieee754_pow+0x400>
 800f25a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f25e:	4598      	cmp	r8, r3
 800f260:	4b13      	ldr	r3, [pc, #76]	; (800f2b0 <__ieee754_pow+0x260>)
 800f262:	dd0c      	ble.n	800f27e <__ieee754_pow+0x22e>
 800f264:	429c      	cmp	r4, r3
 800f266:	dc0f      	bgt.n	800f288 <__ieee754_pow+0x238>
 800f268:	f1b9 0f00 	cmp.w	r9, #0
 800f26c:	da0f      	bge.n	800f28e <__ieee754_pow+0x23e>
 800f26e:	2000      	movs	r0, #0
 800f270:	b009      	add	sp, #36	; 0x24
 800f272:	ecbd 8b06 	vpop	{d8-d10}
 800f276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27a:	f000 bcf0 	b.w	800fc5e <__math_oflow>
 800f27e:	429c      	cmp	r4, r3
 800f280:	dbf2      	blt.n	800f268 <__ieee754_pow+0x218>
 800f282:	4b0a      	ldr	r3, [pc, #40]	; (800f2ac <__ieee754_pow+0x25c>)
 800f284:	429c      	cmp	r4, r3
 800f286:	dd19      	ble.n	800f2bc <__ieee754_pow+0x26c>
 800f288:	f1b9 0f00 	cmp.w	r9, #0
 800f28c:	dcef      	bgt.n	800f26e <__ieee754_pow+0x21e>
 800f28e:	2000      	movs	r0, #0
 800f290:	b009      	add	sp, #36	; 0x24
 800f292:	ecbd 8b06 	vpop	{d8-d10}
 800f296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29a:	f000 bcd7 	b.w	800fc4c <__math_uflow>
 800f29e:	bf00      	nop
 800f2a0:	fff00000 	.word	0xfff00000
 800f2a4:	7ff00000 	.word	0x7ff00000
 800f2a8:	433fffff 	.word	0x433fffff
 800f2ac:	3ff00000 	.word	0x3ff00000
 800f2b0:	3fefffff 	.word	0x3fefffff
 800f2b4:	3fe00000 	.word	0x3fe00000
 800f2b8:	41e00000 	.word	0x41e00000
 800f2bc:	4b60      	ldr	r3, [pc, #384]	; (800f440 <__ieee754_pow+0x3f0>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f7f0 ffe2 	bl	8000288 <__aeabi_dsub>
 800f2c4:	a354      	add	r3, pc, #336	; (adr r3, 800f418 <__ieee754_pow+0x3c8>)
 800f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	460d      	mov	r5, r1
 800f2ce:	f7f1 f993 	bl	80005f8 <__aeabi_dmul>
 800f2d2:	a353      	add	r3, pc, #332	; (adr r3, 800f420 <__ieee754_pow+0x3d0>)
 800f2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d8:	4606      	mov	r6, r0
 800f2da:	460f      	mov	r7, r1
 800f2dc:	4620      	mov	r0, r4
 800f2de:	4629      	mov	r1, r5
 800f2e0:	f7f1 f98a 	bl	80005f8 <__aeabi_dmul>
 800f2e4:	4b57      	ldr	r3, [pc, #348]	; (800f444 <__ieee754_pow+0x3f4>)
 800f2e6:	4682      	mov	sl, r0
 800f2e8:	468b      	mov	fp, r1
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	f7f1 f982 	bl	80005f8 <__aeabi_dmul>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	a14b      	add	r1, pc, #300	; (adr r1, 800f428 <__ieee754_pow+0x3d8>)
 800f2fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2fe:	f7f0 ffc3 	bl	8000288 <__aeabi_dsub>
 800f302:	4622      	mov	r2, r4
 800f304:	462b      	mov	r3, r5
 800f306:	f7f1 f977 	bl	80005f8 <__aeabi_dmul>
 800f30a:	4602      	mov	r2, r0
 800f30c:	460b      	mov	r3, r1
 800f30e:	2000      	movs	r0, #0
 800f310:	494d      	ldr	r1, [pc, #308]	; (800f448 <__ieee754_pow+0x3f8>)
 800f312:	f7f0 ffb9 	bl	8000288 <__aeabi_dsub>
 800f316:	4622      	mov	r2, r4
 800f318:	4680      	mov	r8, r0
 800f31a:	4689      	mov	r9, r1
 800f31c:	462b      	mov	r3, r5
 800f31e:	4620      	mov	r0, r4
 800f320:	4629      	mov	r1, r5
 800f322:	f7f1 f969 	bl	80005f8 <__aeabi_dmul>
 800f326:	4602      	mov	r2, r0
 800f328:	460b      	mov	r3, r1
 800f32a:	4640      	mov	r0, r8
 800f32c:	4649      	mov	r1, r9
 800f32e:	f7f1 f963 	bl	80005f8 <__aeabi_dmul>
 800f332:	a33f      	add	r3, pc, #252	; (adr r3, 800f430 <__ieee754_pow+0x3e0>)
 800f334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f338:	f7f1 f95e 	bl	80005f8 <__aeabi_dmul>
 800f33c:	4602      	mov	r2, r0
 800f33e:	460b      	mov	r3, r1
 800f340:	4650      	mov	r0, sl
 800f342:	4659      	mov	r1, fp
 800f344:	f7f0 ffa0 	bl	8000288 <__aeabi_dsub>
 800f348:	4602      	mov	r2, r0
 800f34a:	460b      	mov	r3, r1
 800f34c:	4680      	mov	r8, r0
 800f34e:	4689      	mov	r9, r1
 800f350:	4630      	mov	r0, r6
 800f352:	4639      	mov	r1, r7
 800f354:	f7f0 ff9a 	bl	800028c <__adddf3>
 800f358:	2000      	movs	r0, #0
 800f35a:	4632      	mov	r2, r6
 800f35c:	463b      	mov	r3, r7
 800f35e:	4604      	mov	r4, r0
 800f360:	460d      	mov	r5, r1
 800f362:	f7f0 ff91 	bl	8000288 <__aeabi_dsub>
 800f366:	4602      	mov	r2, r0
 800f368:	460b      	mov	r3, r1
 800f36a:	4640      	mov	r0, r8
 800f36c:	4649      	mov	r1, r9
 800f36e:	f7f0 ff8b 	bl	8000288 <__aeabi_dsub>
 800f372:	9b04      	ldr	r3, [sp, #16]
 800f374:	9a06      	ldr	r2, [sp, #24]
 800f376:	3b01      	subs	r3, #1
 800f378:	4313      	orrs	r3, r2
 800f37a:	4682      	mov	sl, r0
 800f37c:	468b      	mov	fp, r1
 800f37e:	f040 81e7 	bne.w	800f750 <__ieee754_pow+0x700>
 800f382:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f438 <__ieee754_pow+0x3e8>
 800f386:	eeb0 8a47 	vmov.f32	s16, s14
 800f38a:	eef0 8a67 	vmov.f32	s17, s15
 800f38e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f392:	2600      	movs	r6, #0
 800f394:	4632      	mov	r2, r6
 800f396:	463b      	mov	r3, r7
 800f398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f39c:	f7f0 ff74 	bl	8000288 <__aeabi_dsub>
 800f3a0:	4622      	mov	r2, r4
 800f3a2:	462b      	mov	r3, r5
 800f3a4:	f7f1 f928 	bl	80005f8 <__aeabi_dmul>
 800f3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3ac:	4680      	mov	r8, r0
 800f3ae:	4689      	mov	r9, r1
 800f3b0:	4650      	mov	r0, sl
 800f3b2:	4659      	mov	r1, fp
 800f3b4:	f7f1 f920 	bl	80005f8 <__aeabi_dmul>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	4640      	mov	r0, r8
 800f3be:	4649      	mov	r1, r9
 800f3c0:	f7f0 ff64 	bl	800028c <__adddf3>
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	463b      	mov	r3, r7
 800f3c8:	4680      	mov	r8, r0
 800f3ca:	4689      	mov	r9, r1
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	4629      	mov	r1, r5
 800f3d0:	f7f1 f912 	bl	80005f8 <__aeabi_dmul>
 800f3d4:	460b      	mov	r3, r1
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	460d      	mov	r5, r1
 800f3da:	4602      	mov	r2, r0
 800f3dc:	4649      	mov	r1, r9
 800f3de:	4640      	mov	r0, r8
 800f3e0:	f7f0 ff54 	bl	800028c <__adddf3>
 800f3e4:	4b19      	ldr	r3, [pc, #100]	; (800f44c <__ieee754_pow+0x3fc>)
 800f3e6:	4299      	cmp	r1, r3
 800f3e8:	ec45 4b19 	vmov	d9, r4, r5
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	460f      	mov	r7, r1
 800f3f0:	468b      	mov	fp, r1
 800f3f2:	f340 82f1 	ble.w	800f9d8 <__ieee754_pow+0x988>
 800f3f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f3fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f3fe:	4303      	orrs	r3, r0
 800f400:	f000 81e4 	beq.w	800f7cc <__ieee754_pow+0x77c>
 800f404:	ec51 0b18 	vmov	r0, r1, d8
 800f408:	2200      	movs	r2, #0
 800f40a:	2300      	movs	r3, #0
 800f40c:	f7f1 fb66 	bl	8000adc <__aeabi_dcmplt>
 800f410:	3800      	subs	r0, #0
 800f412:	bf18      	it	ne
 800f414:	2001      	movne	r0, #1
 800f416:	e72b      	b.n	800f270 <__ieee754_pow+0x220>
 800f418:	60000000 	.word	0x60000000
 800f41c:	3ff71547 	.word	0x3ff71547
 800f420:	f85ddf44 	.word	0xf85ddf44
 800f424:	3e54ae0b 	.word	0x3e54ae0b
 800f428:	55555555 	.word	0x55555555
 800f42c:	3fd55555 	.word	0x3fd55555
 800f430:	652b82fe 	.word	0x652b82fe
 800f434:	3ff71547 	.word	0x3ff71547
 800f438:	00000000 	.word	0x00000000
 800f43c:	bff00000 	.word	0xbff00000
 800f440:	3ff00000 	.word	0x3ff00000
 800f444:	3fd00000 	.word	0x3fd00000
 800f448:	3fe00000 	.word	0x3fe00000
 800f44c:	408fffff 	.word	0x408fffff
 800f450:	4bd5      	ldr	r3, [pc, #852]	; (800f7a8 <__ieee754_pow+0x758>)
 800f452:	402b      	ands	r3, r5
 800f454:	2200      	movs	r2, #0
 800f456:	b92b      	cbnz	r3, 800f464 <__ieee754_pow+0x414>
 800f458:	4bd4      	ldr	r3, [pc, #848]	; (800f7ac <__ieee754_pow+0x75c>)
 800f45a:	f7f1 f8cd 	bl	80005f8 <__aeabi_dmul>
 800f45e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f462:	460c      	mov	r4, r1
 800f464:	1523      	asrs	r3, r4, #20
 800f466:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f46a:	4413      	add	r3, r2
 800f46c:	9305      	str	r3, [sp, #20]
 800f46e:	4bd0      	ldr	r3, [pc, #832]	; (800f7b0 <__ieee754_pow+0x760>)
 800f470:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f474:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f478:	429c      	cmp	r4, r3
 800f47a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f47e:	dd08      	ble.n	800f492 <__ieee754_pow+0x442>
 800f480:	4bcc      	ldr	r3, [pc, #816]	; (800f7b4 <__ieee754_pow+0x764>)
 800f482:	429c      	cmp	r4, r3
 800f484:	f340 8162 	ble.w	800f74c <__ieee754_pow+0x6fc>
 800f488:	9b05      	ldr	r3, [sp, #20]
 800f48a:	3301      	adds	r3, #1
 800f48c:	9305      	str	r3, [sp, #20]
 800f48e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f492:	2400      	movs	r4, #0
 800f494:	00e3      	lsls	r3, r4, #3
 800f496:	9307      	str	r3, [sp, #28]
 800f498:	4bc7      	ldr	r3, [pc, #796]	; (800f7b8 <__ieee754_pow+0x768>)
 800f49a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f49e:	ed93 7b00 	vldr	d7, [r3]
 800f4a2:	4629      	mov	r1, r5
 800f4a4:	ec53 2b17 	vmov	r2, r3, d7
 800f4a8:	eeb0 9a47 	vmov.f32	s18, s14
 800f4ac:	eef0 9a67 	vmov.f32	s19, s15
 800f4b0:	4682      	mov	sl, r0
 800f4b2:	f7f0 fee9 	bl	8000288 <__aeabi_dsub>
 800f4b6:	4652      	mov	r2, sl
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	460f      	mov	r7, r1
 800f4bc:	462b      	mov	r3, r5
 800f4be:	ec51 0b19 	vmov	r0, r1, d9
 800f4c2:	f7f0 fee3 	bl	800028c <__adddf3>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	49bb      	ldr	r1, [pc, #748]	; (800f7bc <__ieee754_pow+0x76c>)
 800f4ce:	f7f1 f9bd 	bl	800084c <__aeabi_ddiv>
 800f4d2:	ec41 0b1a 	vmov	d10, r0, r1
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	460b      	mov	r3, r1
 800f4da:	4630      	mov	r0, r6
 800f4dc:	4639      	mov	r1, r7
 800f4de:	f7f1 f88b 	bl	80005f8 <__aeabi_dmul>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4e8:	9302      	str	r3, [sp, #8]
 800f4ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4ee:	46ab      	mov	fp, r5
 800f4f0:	106d      	asrs	r5, r5, #1
 800f4f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f4f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f4fa:	ec41 0b18 	vmov	d8, r0, r1
 800f4fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f502:	2200      	movs	r2, #0
 800f504:	4640      	mov	r0, r8
 800f506:	4649      	mov	r1, r9
 800f508:	4614      	mov	r4, r2
 800f50a:	461d      	mov	r5, r3
 800f50c:	f7f1 f874 	bl	80005f8 <__aeabi_dmul>
 800f510:	4602      	mov	r2, r0
 800f512:	460b      	mov	r3, r1
 800f514:	4630      	mov	r0, r6
 800f516:	4639      	mov	r1, r7
 800f518:	f7f0 feb6 	bl	8000288 <__aeabi_dsub>
 800f51c:	ec53 2b19 	vmov	r2, r3, d9
 800f520:	4606      	mov	r6, r0
 800f522:	460f      	mov	r7, r1
 800f524:	4620      	mov	r0, r4
 800f526:	4629      	mov	r1, r5
 800f528:	f7f0 feae 	bl	8000288 <__aeabi_dsub>
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	4650      	mov	r0, sl
 800f532:	4659      	mov	r1, fp
 800f534:	f7f0 fea8 	bl	8000288 <__aeabi_dsub>
 800f538:	4642      	mov	r2, r8
 800f53a:	464b      	mov	r3, r9
 800f53c:	f7f1 f85c 	bl	80005f8 <__aeabi_dmul>
 800f540:	4602      	mov	r2, r0
 800f542:	460b      	mov	r3, r1
 800f544:	4630      	mov	r0, r6
 800f546:	4639      	mov	r1, r7
 800f548:	f7f0 fe9e 	bl	8000288 <__aeabi_dsub>
 800f54c:	ec53 2b1a 	vmov	r2, r3, d10
 800f550:	f7f1 f852 	bl	80005f8 <__aeabi_dmul>
 800f554:	ec53 2b18 	vmov	r2, r3, d8
 800f558:	ec41 0b19 	vmov	d9, r0, r1
 800f55c:	ec51 0b18 	vmov	r0, r1, d8
 800f560:	f7f1 f84a 	bl	80005f8 <__aeabi_dmul>
 800f564:	a37c      	add	r3, pc, #496	; (adr r3, 800f758 <__ieee754_pow+0x708>)
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	4604      	mov	r4, r0
 800f56c:	460d      	mov	r5, r1
 800f56e:	f7f1 f843 	bl	80005f8 <__aeabi_dmul>
 800f572:	a37b      	add	r3, pc, #492	; (adr r3, 800f760 <__ieee754_pow+0x710>)
 800f574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f578:	f7f0 fe88 	bl	800028c <__adddf3>
 800f57c:	4622      	mov	r2, r4
 800f57e:	462b      	mov	r3, r5
 800f580:	f7f1 f83a 	bl	80005f8 <__aeabi_dmul>
 800f584:	a378      	add	r3, pc, #480	; (adr r3, 800f768 <__ieee754_pow+0x718>)
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	f7f0 fe7f 	bl	800028c <__adddf3>
 800f58e:	4622      	mov	r2, r4
 800f590:	462b      	mov	r3, r5
 800f592:	f7f1 f831 	bl	80005f8 <__aeabi_dmul>
 800f596:	a376      	add	r3, pc, #472	; (adr r3, 800f770 <__ieee754_pow+0x720>)
 800f598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59c:	f7f0 fe76 	bl	800028c <__adddf3>
 800f5a0:	4622      	mov	r2, r4
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	f7f1 f828 	bl	80005f8 <__aeabi_dmul>
 800f5a8:	a373      	add	r3, pc, #460	; (adr r3, 800f778 <__ieee754_pow+0x728>)
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	f7f0 fe6d 	bl	800028c <__adddf3>
 800f5b2:	4622      	mov	r2, r4
 800f5b4:	462b      	mov	r3, r5
 800f5b6:	f7f1 f81f 	bl	80005f8 <__aeabi_dmul>
 800f5ba:	a371      	add	r3, pc, #452	; (adr r3, 800f780 <__ieee754_pow+0x730>)
 800f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c0:	f7f0 fe64 	bl	800028c <__adddf3>
 800f5c4:	4622      	mov	r2, r4
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	460f      	mov	r7, r1
 800f5ca:	462b      	mov	r3, r5
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	f7f1 f812 	bl	80005f8 <__aeabi_dmul>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	4630      	mov	r0, r6
 800f5da:	4639      	mov	r1, r7
 800f5dc:	f7f1 f80c 	bl	80005f8 <__aeabi_dmul>
 800f5e0:	4642      	mov	r2, r8
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	460d      	mov	r5, r1
 800f5e6:	464b      	mov	r3, r9
 800f5e8:	ec51 0b18 	vmov	r0, r1, d8
 800f5ec:	f7f0 fe4e 	bl	800028c <__adddf3>
 800f5f0:	ec53 2b19 	vmov	r2, r3, d9
 800f5f4:	f7f1 f800 	bl	80005f8 <__aeabi_dmul>
 800f5f8:	4622      	mov	r2, r4
 800f5fa:	462b      	mov	r3, r5
 800f5fc:	f7f0 fe46 	bl	800028c <__adddf3>
 800f600:	4642      	mov	r2, r8
 800f602:	4682      	mov	sl, r0
 800f604:	468b      	mov	fp, r1
 800f606:	464b      	mov	r3, r9
 800f608:	4640      	mov	r0, r8
 800f60a:	4649      	mov	r1, r9
 800f60c:	f7f0 fff4 	bl	80005f8 <__aeabi_dmul>
 800f610:	4b6b      	ldr	r3, [pc, #428]	; (800f7c0 <__ieee754_pow+0x770>)
 800f612:	2200      	movs	r2, #0
 800f614:	4606      	mov	r6, r0
 800f616:	460f      	mov	r7, r1
 800f618:	f7f0 fe38 	bl	800028c <__adddf3>
 800f61c:	4652      	mov	r2, sl
 800f61e:	465b      	mov	r3, fp
 800f620:	f7f0 fe34 	bl	800028c <__adddf3>
 800f624:	2000      	movs	r0, #0
 800f626:	4604      	mov	r4, r0
 800f628:	460d      	mov	r5, r1
 800f62a:	4602      	mov	r2, r0
 800f62c:	460b      	mov	r3, r1
 800f62e:	4640      	mov	r0, r8
 800f630:	4649      	mov	r1, r9
 800f632:	f7f0 ffe1 	bl	80005f8 <__aeabi_dmul>
 800f636:	4b62      	ldr	r3, [pc, #392]	; (800f7c0 <__ieee754_pow+0x770>)
 800f638:	4680      	mov	r8, r0
 800f63a:	4689      	mov	r9, r1
 800f63c:	2200      	movs	r2, #0
 800f63e:	4620      	mov	r0, r4
 800f640:	4629      	mov	r1, r5
 800f642:	f7f0 fe21 	bl	8000288 <__aeabi_dsub>
 800f646:	4632      	mov	r2, r6
 800f648:	463b      	mov	r3, r7
 800f64a:	f7f0 fe1d 	bl	8000288 <__aeabi_dsub>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	4650      	mov	r0, sl
 800f654:	4659      	mov	r1, fp
 800f656:	f7f0 fe17 	bl	8000288 <__aeabi_dsub>
 800f65a:	ec53 2b18 	vmov	r2, r3, d8
 800f65e:	f7f0 ffcb 	bl	80005f8 <__aeabi_dmul>
 800f662:	4622      	mov	r2, r4
 800f664:	4606      	mov	r6, r0
 800f666:	460f      	mov	r7, r1
 800f668:	462b      	mov	r3, r5
 800f66a:	ec51 0b19 	vmov	r0, r1, d9
 800f66e:	f7f0 ffc3 	bl	80005f8 <__aeabi_dmul>
 800f672:	4602      	mov	r2, r0
 800f674:	460b      	mov	r3, r1
 800f676:	4630      	mov	r0, r6
 800f678:	4639      	mov	r1, r7
 800f67a:	f7f0 fe07 	bl	800028c <__adddf3>
 800f67e:	4606      	mov	r6, r0
 800f680:	460f      	mov	r7, r1
 800f682:	4602      	mov	r2, r0
 800f684:	460b      	mov	r3, r1
 800f686:	4640      	mov	r0, r8
 800f688:	4649      	mov	r1, r9
 800f68a:	f7f0 fdff 	bl	800028c <__adddf3>
 800f68e:	a33e      	add	r3, pc, #248	; (adr r3, 800f788 <__ieee754_pow+0x738>)
 800f690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f694:	2000      	movs	r0, #0
 800f696:	4604      	mov	r4, r0
 800f698:	460d      	mov	r5, r1
 800f69a:	f7f0 ffad 	bl	80005f8 <__aeabi_dmul>
 800f69e:	4642      	mov	r2, r8
 800f6a0:	ec41 0b18 	vmov	d8, r0, r1
 800f6a4:	464b      	mov	r3, r9
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	f7f0 fded 	bl	8000288 <__aeabi_dsub>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	4639      	mov	r1, r7
 800f6b6:	f7f0 fde7 	bl	8000288 <__aeabi_dsub>
 800f6ba:	a335      	add	r3, pc, #212	; (adr r3, 800f790 <__ieee754_pow+0x740>)
 800f6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c0:	f7f0 ff9a 	bl	80005f8 <__aeabi_dmul>
 800f6c4:	a334      	add	r3, pc, #208	; (adr r3, 800f798 <__ieee754_pow+0x748>)
 800f6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460f      	mov	r7, r1
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	4629      	mov	r1, r5
 800f6d2:	f7f0 ff91 	bl	80005f8 <__aeabi_dmul>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	460b      	mov	r3, r1
 800f6da:	4630      	mov	r0, r6
 800f6dc:	4639      	mov	r1, r7
 800f6de:	f7f0 fdd5 	bl	800028c <__adddf3>
 800f6e2:	9a07      	ldr	r2, [sp, #28]
 800f6e4:	4b37      	ldr	r3, [pc, #220]	; (800f7c4 <__ieee754_pow+0x774>)
 800f6e6:	4413      	add	r3, r2
 800f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ec:	f7f0 fdce 	bl	800028c <__adddf3>
 800f6f0:	4682      	mov	sl, r0
 800f6f2:	9805      	ldr	r0, [sp, #20]
 800f6f4:	468b      	mov	fp, r1
 800f6f6:	f7f0 ff15 	bl	8000524 <__aeabi_i2d>
 800f6fa:	9a07      	ldr	r2, [sp, #28]
 800f6fc:	4b32      	ldr	r3, [pc, #200]	; (800f7c8 <__ieee754_pow+0x778>)
 800f6fe:	4413      	add	r3, r2
 800f700:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f704:	4606      	mov	r6, r0
 800f706:	460f      	mov	r7, r1
 800f708:	4652      	mov	r2, sl
 800f70a:	465b      	mov	r3, fp
 800f70c:	ec51 0b18 	vmov	r0, r1, d8
 800f710:	f7f0 fdbc 	bl	800028c <__adddf3>
 800f714:	4642      	mov	r2, r8
 800f716:	464b      	mov	r3, r9
 800f718:	f7f0 fdb8 	bl	800028c <__adddf3>
 800f71c:	4632      	mov	r2, r6
 800f71e:	463b      	mov	r3, r7
 800f720:	f7f0 fdb4 	bl	800028c <__adddf3>
 800f724:	2000      	movs	r0, #0
 800f726:	4632      	mov	r2, r6
 800f728:	463b      	mov	r3, r7
 800f72a:	4604      	mov	r4, r0
 800f72c:	460d      	mov	r5, r1
 800f72e:	f7f0 fdab 	bl	8000288 <__aeabi_dsub>
 800f732:	4642      	mov	r2, r8
 800f734:	464b      	mov	r3, r9
 800f736:	f7f0 fda7 	bl	8000288 <__aeabi_dsub>
 800f73a:	ec53 2b18 	vmov	r2, r3, d8
 800f73e:	f7f0 fda3 	bl	8000288 <__aeabi_dsub>
 800f742:	4602      	mov	r2, r0
 800f744:	460b      	mov	r3, r1
 800f746:	4650      	mov	r0, sl
 800f748:	4659      	mov	r1, fp
 800f74a:	e610      	b.n	800f36e <__ieee754_pow+0x31e>
 800f74c:	2401      	movs	r4, #1
 800f74e:	e6a1      	b.n	800f494 <__ieee754_pow+0x444>
 800f750:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f7a0 <__ieee754_pow+0x750>
 800f754:	e617      	b.n	800f386 <__ieee754_pow+0x336>
 800f756:	bf00      	nop
 800f758:	4a454eef 	.word	0x4a454eef
 800f75c:	3fca7e28 	.word	0x3fca7e28
 800f760:	93c9db65 	.word	0x93c9db65
 800f764:	3fcd864a 	.word	0x3fcd864a
 800f768:	a91d4101 	.word	0xa91d4101
 800f76c:	3fd17460 	.word	0x3fd17460
 800f770:	518f264d 	.word	0x518f264d
 800f774:	3fd55555 	.word	0x3fd55555
 800f778:	db6fabff 	.word	0xdb6fabff
 800f77c:	3fdb6db6 	.word	0x3fdb6db6
 800f780:	33333303 	.word	0x33333303
 800f784:	3fe33333 	.word	0x3fe33333
 800f788:	e0000000 	.word	0xe0000000
 800f78c:	3feec709 	.word	0x3feec709
 800f790:	dc3a03fd 	.word	0xdc3a03fd
 800f794:	3feec709 	.word	0x3feec709
 800f798:	145b01f5 	.word	0x145b01f5
 800f79c:	be3e2fe0 	.word	0xbe3e2fe0
 800f7a0:	00000000 	.word	0x00000000
 800f7a4:	3ff00000 	.word	0x3ff00000
 800f7a8:	7ff00000 	.word	0x7ff00000
 800f7ac:	43400000 	.word	0x43400000
 800f7b0:	0003988e 	.word	0x0003988e
 800f7b4:	000bb679 	.word	0x000bb679
 800f7b8:	08010328 	.word	0x08010328
 800f7bc:	3ff00000 	.word	0x3ff00000
 800f7c0:	40080000 	.word	0x40080000
 800f7c4:	08010348 	.word	0x08010348
 800f7c8:	08010338 	.word	0x08010338
 800f7cc:	a3b5      	add	r3, pc, #724	; (adr r3, 800faa4 <__ieee754_pow+0xa54>)
 800f7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d2:	4640      	mov	r0, r8
 800f7d4:	4649      	mov	r1, r9
 800f7d6:	f7f0 fd59 	bl	800028c <__adddf3>
 800f7da:	4622      	mov	r2, r4
 800f7dc:	ec41 0b1a 	vmov	d10, r0, r1
 800f7e0:	462b      	mov	r3, r5
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	4639      	mov	r1, r7
 800f7e6:	f7f0 fd4f 	bl	8000288 <__aeabi_dsub>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	ec51 0b1a 	vmov	r0, r1, d10
 800f7f2:	f7f1 f991 	bl	8000b18 <__aeabi_dcmpgt>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	f47f ae04 	bne.w	800f404 <__ieee754_pow+0x3b4>
 800f7fc:	4aa4      	ldr	r2, [pc, #656]	; (800fa90 <__ieee754_pow+0xa40>)
 800f7fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f802:	4293      	cmp	r3, r2
 800f804:	f340 8108 	ble.w	800fa18 <__ieee754_pow+0x9c8>
 800f808:	151b      	asrs	r3, r3, #20
 800f80a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f80e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f812:	fa4a f303 	asr.w	r3, sl, r3
 800f816:	445b      	add	r3, fp
 800f818:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f81c:	4e9d      	ldr	r6, [pc, #628]	; (800fa94 <__ieee754_pow+0xa44>)
 800f81e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f822:	4116      	asrs	r6, r2
 800f824:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f828:	2000      	movs	r0, #0
 800f82a:	ea23 0106 	bic.w	r1, r3, r6
 800f82e:	f1c2 0214 	rsb	r2, r2, #20
 800f832:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f836:	fa4a fa02 	asr.w	sl, sl, r2
 800f83a:	f1bb 0f00 	cmp.w	fp, #0
 800f83e:	4602      	mov	r2, r0
 800f840:	460b      	mov	r3, r1
 800f842:	4620      	mov	r0, r4
 800f844:	4629      	mov	r1, r5
 800f846:	bfb8      	it	lt
 800f848:	f1ca 0a00 	rsblt	sl, sl, #0
 800f84c:	f7f0 fd1c 	bl	8000288 <__aeabi_dsub>
 800f850:	ec41 0b19 	vmov	d9, r0, r1
 800f854:	4642      	mov	r2, r8
 800f856:	464b      	mov	r3, r9
 800f858:	ec51 0b19 	vmov	r0, r1, d9
 800f85c:	f7f0 fd16 	bl	800028c <__adddf3>
 800f860:	a37b      	add	r3, pc, #492	; (adr r3, 800fa50 <__ieee754_pow+0xa00>)
 800f862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f866:	2000      	movs	r0, #0
 800f868:	4604      	mov	r4, r0
 800f86a:	460d      	mov	r5, r1
 800f86c:	f7f0 fec4 	bl	80005f8 <__aeabi_dmul>
 800f870:	ec53 2b19 	vmov	r2, r3, d9
 800f874:	4606      	mov	r6, r0
 800f876:	460f      	mov	r7, r1
 800f878:	4620      	mov	r0, r4
 800f87a:	4629      	mov	r1, r5
 800f87c:	f7f0 fd04 	bl	8000288 <__aeabi_dsub>
 800f880:	4602      	mov	r2, r0
 800f882:	460b      	mov	r3, r1
 800f884:	4640      	mov	r0, r8
 800f886:	4649      	mov	r1, r9
 800f888:	f7f0 fcfe 	bl	8000288 <__aeabi_dsub>
 800f88c:	a372      	add	r3, pc, #456	; (adr r3, 800fa58 <__ieee754_pow+0xa08>)
 800f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f892:	f7f0 feb1 	bl	80005f8 <__aeabi_dmul>
 800f896:	a372      	add	r3, pc, #456	; (adr r3, 800fa60 <__ieee754_pow+0xa10>)
 800f898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89c:	4680      	mov	r8, r0
 800f89e:	4689      	mov	r9, r1
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	4629      	mov	r1, r5
 800f8a4:	f7f0 fea8 	bl	80005f8 <__aeabi_dmul>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	4649      	mov	r1, r9
 800f8b0:	f7f0 fcec 	bl	800028c <__adddf3>
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	460d      	mov	r5, r1
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	4630      	mov	r0, r6
 800f8be:	4639      	mov	r1, r7
 800f8c0:	f7f0 fce4 	bl	800028c <__adddf3>
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	463b      	mov	r3, r7
 800f8c8:	4680      	mov	r8, r0
 800f8ca:	4689      	mov	r9, r1
 800f8cc:	f7f0 fcdc 	bl	8000288 <__aeabi_dsub>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	f7f0 fcd6 	bl	8000288 <__aeabi_dsub>
 800f8dc:	4642      	mov	r2, r8
 800f8de:	4606      	mov	r6, r0
 800f8e0:	460f      	mov	r7, r1
 800f8e2:	464b      	mov	r3, r9
 800f8e4:	4640      	mov	r0, r8
 800f8e6:	4649      	mov	r1, r9
 800f8e8:	f7f0 fe86 	bl	80005f8 <__aeabi_dmul>
 800f8ec:	a35e      	add	r3, pc, #376	; (adr r3, 800fa68 <__ieee754_pow+0xa18>)
 800f8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	460d      	mov	r5, r1
 800f8f6:	f7f0 fe7f 	bl	80005f8 <__aeabi_dmul>
 800f8fa:	a35d      	add	r3, pc, #372	; (adr r3, 800fa70 <__ieee754_pow+0xa20>)
 800f8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f900:	f7f0 fcc2 	bl	8000288 <__aeabi_dsub>
 800f904:	4622      	mov	r2, r4
 800f906:	462b      	mov	r3, r5
 800f908:	f7f0 fe76 	bl	80005f8 <__aeabi_dmul>
 800f90c:	a35a      	add	r3, pc, #360	; (adr r3, 800fa78 <__ieee754_pow+0xa28>)
 800f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f912:	f7f0 fcbb 	bl	800028c <__adddf3>
 800f916:	4622      	mov	r2, r4
 800f918:	462b      	mov	r3, r5
 800f91a:	f7f0 fe6d 	bl	80005f8 <__aeabi_dmul>
 800f91e:	a358      	add	r3, pc, #352	; (adr r3, 800fa80 <__ieee754_pow+0xa30>)
 800f920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f924:	f7f0 fcb0 	bl	8000288 <__aeabi_dsub>
 800f928:	4622      	mov	r2, r4
 800f92a:	462b      	mov	r3, r5
 800f92c:	f7f0 fe64 	bl	80005f8 <__aeabi_dmul>
 800f930:	a355      	add	r3, pc, #340	; (adr r3, 800fa88 <__ieee754_pow+0xa38>)
 800f932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f936:	f7f0 fca9 	bl	800028c <__adddf3>
 800f93a:	4622      	mov	r2, r4
 800f93c:	462b      	mov	r3, r5
 800f93e:	f7f0 fe5b 	bl	80005f8 <__aeabi_dmul>
 800f942:	4602      	mov	r2, r0
 800f944:	460b      	mov	r3, r1
 800f946:	4640      	mov	r0, r8
 800f948:	4649      	mov	r1, r9
 800f94a:	f7f0 fc9d 	bl	8000288 <__aeabi_dsub>
 800f94e:	4604      	mov	r4, r0
 800f950:	460d      	mov	r5, r1
 800f952:	4602      	mov	r2, r0
 800f954:	460b      	mov	r3, r1
 800f956:	4640      	mov	r0, r8
 800f958:	4649      	mov	r1, r9
 800f95a:	f7f0 fe4d 	bl	80005f8 <__aeabi_dmul>
 800f95e:	2200      	movs	r2, #0
 800f960:	ec41 0b19 	vmov	d9, r0, r1
 800f964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f968:	4620      	mov	r0, r4
 800f96a:	4629      	mov	r1, r5
 800f96c:	f7f0 fc8c 	bl	8000288 <__aeabi_dsub>
 800f970:	4602      	mov	r2, r0
 800f972:	460b      	mov	r3, r1
 800f974:	ec51 0b19 	vmov	r0, r1, d9
 800f978:	f7f0 ff68 	bl	800084c <__aeabi_ddiv>
 800f97c:	4632      	mov	r2, r6
 800f97e:	4604      	mov	r4, r0
 800f980:	460d      	mov	r5, r1
 800f982:	463b      	mov	r3, r7
 800f984:	4640      	mov	r0, r8
 800f986:	4649      	mov	r1, r9
 800f988:	f7f0 fe36 	bl	80005f8 <__aeabi_dmul>
 800f98c:	4632      	mov	r2, r6
 800f98e:	463b      	mov	r3, r7
 800f990:	f7f0 fc7c 	bl	800028c <__adddf3>
 800f994:	4602      	mov	r2, r0
 800f996:	460b      	mov	r3, r1
 800f998:	4620      	mov	r0, r4
 800f99a:	4629      	mov	r1, r5
 800f99c:	f7f0 fc74 	bl	8000288 <__aeabi_dsub>
 800f9a0:	4642      	mov	r2, r8
 800f9a2:	464b      	mov	r3, r9
 800f9a4:	f7f0 fc70 	bl	8000288 <__aeabi_dsub>
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	493a      	ldr	r1, [pc, #232]	; (800fa98 <__ieee754_pow+0xa48>)
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	f7f0 fc6a 	bl	8000288 <__aeabi_dsub>
 800f9b4:	ec41 0b10 	vmov	d0, r0, r1
 800f9b8:	ee10 3a90 	vmov	r3, s1
 800f9bc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f9c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9c4:	da2b      	bge.n	800fa1e <__ieee754_pow+0x9ce>
 800f9c6:	4650      	mov	r0, sl
 800f9c8:	f000 f95e 	bl	800fc88 <scalbn>
 800f9cc:	ec51 0b10 	vmov	r0, r1, d0
 800f9d0:	ec53 2b18 	vmov	r2, r3, d8
 800f9d4:	f7ff bbed 	b.w	800f1b2 <__ieee754_pow+0x162>
 800f9d8:	4b30      	ldr	r3, [pc, #192]	; (800fa9c <__ieee754_pow+0xa4c>)
 800f9da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f9de:	429e      	cmp	r6, r3
 800f9e0:	f77f af0c 	ble.w	800f7fc <__ieee754_pow+0x7ac>
 800f9e4:	4b2e      	ldr	r3, [pc, #184]	; (800faa0 <__ieee754_pow+0xa50>)
 800f9e6:	440b      	add	r3, r1
 800f9e8:	4303      	orrs	r3, r0
 800f9ea:	d009      	beq.n	800fa00 <__ieee754_pow+0x9b0>
 800f9ec:	ec51 0b18 	vmov	r0, r1, d8
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	f7f1 f872 	bl	8000adc <__aeabi_dcmplt>
 800f9f8:	3800      	subs	r0, #0
 800f9fa:	bf18      	it	ne
 800f9fc:	2001      	movne	r0, #1
 800f9fe:	e447      	b.n	800f290 <__ieee754_pow+0x240>
 800fa00:	4622      	mov	r2, r4
 800fa02:	462b      	mov	r3, r5
 800fa04:	f7f0 fc40 	bl	8000288 <__aeabi_dsub>
 800fa08:	4642      	mov	r2, r8
 800fa0a:	464b      	mov	r3, r9
 800fa0c:	f7f1 f87a 	bl	8000b04 <__aeabi_dcmpge>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	f43f aef3 	beq.w	800f7fc <__ieee754_pow+0x7ac>
 800fa16:	e7e9      	b.n	800f9ec <__ieee754_pow+0x99c>
 800fa18:	f04f 0a00 	mov.w	sl, #0
 800fa1c:	e71a      	b.n	800f854 <__ieee754_pow+0x804>
 800fa1e:	ec51 0b10 	vmov	r0, r1, d0
 800fa22:	4619      	mov	r1, r3
 800fa24:	e7d4      	b.n	800f9d0 <__ieee754_pow+0x980>
 800fa26:	491c      	ldr	r1, [pc, #112]	; (800fa98 <__ieee754_pow+0xa48>)
 800fa28:	2000      	movs	r0, #0
 800fa2a:	f7ff bb30 	b.w	800f08e <__ieee754_pow+0x3e>
 800fa2e:	2000      	movs	r0, #0
 800fa30:	2100      	movs	r1, #0
 800fa32:	f7ff bb2c 	b.w	800f08e <__ieee754_pow+0x3e>
 800fa36:	4630      	mov	r0, r6
 800fa38:	4639      	mov	r1, r7
 800fa3a:	f7ff bb28 	b.w	800f08e <__ieee754_pow+0x3e>
 800fa3e:	9204      	str	r2, [sp, #16]
 800fa40:	f7ff bb7a 	b.w	800f138 <__ieee754_pow+0xe8>
 800fa44:	2300      	movs	r3, #0
 800fa46:	f7ff bb64 	b.w	800f112 <__ieee754_pow+0xc2>
 800fa4a:	bf00      	nop
 800fa4c:	f3af 8000 	nop.w
 800fa50:	00000000 	.word	0x00000000
 800fa54:	3fe62e43 	.word	0x3fe62e43
 800fa58:	fefa39ef 	.word	0xfefa39ef
 800fa5c:	3fe62e42 	.word	0x3fe62e42
 800fa60:	0ca86c39 	.word	0x0ca86c39
 800fa64:	be205c61 	.word	0xbe205c61
 800fa68:	72bea4d0 	.word	0x72bea4d0
 800fa6c:	3e663769 	.word	0x3e663769
 800fa70:	c5d26bf1 	.word	0xc5d26bf1
 800fa74:	3ebbbd41 	.word	0x3ebbbd41
 800fa78:	af25de2c 	.word	0xaf25de2c
 800fa7c:	3f11566a 	.word	0x3f11566a
 800fa80:	16bebd93 	.word	0x16bebd93
 800fa84:	3f66c16c 	.word	0x3f66c16c
 800fa88:	5555553e 	.word	0x5555553e
 800fa8c:	3fc55555 	.word	0x3fc55555
 800fa90:	3fe00000 	.word	0x3fe00000
 800fa94:	000fffff 	.word	0x000fffff
 800fa98:	3ff00000 	.word	0x3ff00000
 800fa9c:	4090cbff 	.word	0x4090cbff
 800faa0:	3f6f3400 	.word	0x3f6f3400
 800faa4:	652b82fe 	.word	0x652b82fe
 800faa8:	3c971547 	.word	0x3c971547

0800faac <__ieee754_sqrt>:
 800faac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fab0:	ec55 4b10 	vmov	r4, r5, d0
 800fab4:	4e55      	ldr	r6, [pc, #340]	; (800fc0c <__ieee754_sqrt+0x160>)
 800fab6:	43ae      	bics	r6, r5
 800fab8:	ee10 0a10 	vmov	r0, s0
 800fabc:	ee10 3a10 	vmov	r3, s0
 800fac0:	462a      	mov	r2, r5
 800fac2:	4629      	mov	r1, r5
 800fac4:	d110      	bne.n	800fae8 <__ieee754_sqrt+0x3c>
 800fac6:	ee10 2a10 	vmov	r2, s0
 800faca:	462b      	mov	r3, r5
 800facc:	f7f0 fd94 	bl	80005f8 <__aeabi_dmul>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4620      	mov	r0, r4
 800fad6:	4629      	mov	r1, r5
 800fad8:	f7f0 fbd8 	bl	800028c <__adddf3>
 800fadc:	4604      	mov	r4, r0
 800fade:	460d      	mov	r5, r1
 800fae0:	ec45 4b10 	vmov	d0, r4, r5
 800fae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae8:	2d00      	cmp	r5, #0
 800faea:	dc10      	bgt.n	800fb0e <__ieee754_sqrt+0x62>
 800faec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800faf0:	4330      	orrs	r0, r6
 800faf2:	d0f5      	beq.n	800fae0 <__ieee754_sqrt+0x34>
 800faf4:	b15d      	cbz	r5, 800fb0e <__ieee754_sqrt+0x62>
 800faf6:	ee10 2a10 	vmov	r2, s0
 800fafa:	462b      	mov	r3, r5
 800fafc:	ee10 0a10 	vmov	r0, s0
 800fb00:	f7f0 fbc2 	bl	8000288 <__aeabi_dsub>
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	f7f0 fea0 	bl	800084c <__aeabi_ddiv>
 800fb0c:	e7e6      	b.n	800fadc <__ieee754_sqrt+0x30>
 800fb0e:	1512      	asrs	r2, r2, #20
 800fb10:	d074      	beq.n	800fbfc <__ieee754_sqrt+0x150>
 800fb12:	07d4      	lsls	r4, r2, #31
 800fb14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fb18:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fb1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fb20:	bf5e      	ittt	pl
 800fb22:	0fda      	lsrpl	r2, r3, #31
 800fb24:	005b      	lslpl	r3, r3, #1
 800fb26:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fb2a:	2400      	movs	r4, #0
 800fb2c:	0fda      	lsrs	r2, r3, #31
 800fb2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fb32:	107f      	asrs	r7, r7, #1
 800fb34:	005b      	lsls	r3, r3, #1
 800fb36:	2516      	movs	r5, #22
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fb3e:	1886      	adds	r6, r0, r2
 800fb40:	428e      	cmp	r6, r1
 800fb42:	bfde      	ittt	le
 800fb44:	1b89      	suble	r1, r1, r6
 800fb46:	18b0      	addle	r0, r6, r2
 800fb48:	18a4      	addle	r4, r4, r2
 800fb4a:	0049      	lsls	r1, r1, #1
 800fb4c:	3d01      	subs	r5, #1
 800fb4e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fb52:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fb56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb5a:	d1f0      	bne.n	800fb3e <__ieee754_sqrt+0x92>
 800fb5c:	462a      	mov	r2, r5
 800fb5e:	f04f 0e20 	mov.w	lr, #32
 800fb62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fb66:	4281      	cmp	r1, r0
 800fb68:	eb06 0c05 	add.w	ip, r6, r5
 800fb6c:	dc02      	bgt.n	800fb74 <__ieee754_sqrt+0xc8>
 800fb6e:	d113      	bne.n	800fb98 <__ieee754_sqrt+0xec>
 800fb70:	459c      	cmp	ip, r3
 800fb72:	d811      	bhi.n	800fb98 <__ieee754_sqrt+0xec>
 800fb74:	f1bc 0f00 	cmp.w	ip, #0
 800fb78:	eb0c 0506 	add.w	r5, ip, r6
 800fb7c:	da43      	bge.n	800fc06 <__ieee754_sqrt+0x15a>
 800fb7e:	2d00      	cmp	r5, #0
 800fb80:	db41      	blt.n	800fc06 <__ieee754_sqrt+0x15a>
 800fb82:	f100 0801 	add.w	r8, r0, #1
 800fb86:	1a09      	subs	r1, r1, r0
 800fb88:	459c      	cmp	ip, r3
 800fb8a:	bf88      	it	hi
 800fb8c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800fb90:	eba3 030c 	sub.w	r3, r3, ip
 800fb94:	4432      	add	r2, r6
 800fb96:	4640      	mov	r0, r8
 800fb98:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fb9c:	f1be 0e01 	subs.w	lr, lr, #1
 800fba0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fba8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fbac:	d1db      	bne.n	800fb66 <__ieee754_sqrt+0xba>
 800fbae:	430b      	orrs	r3, r1
 800fbb0:	d006      	beq.n	800fbc0 <__ieee754_sqrt+0x114>
 800fbb2:	1c50      	adds	r0, r2, #1
 800fbb4:	bf13      	iteet	ne
 800fbb6:	3201      	addne	r2, #1
 800fbb8:	3401      	addeq	r4, #1
 800fbba:	4672      	moveq	r2, lr
 800fbbc:	f022 0201 	bicne.w	r2, r2, #1
 800fbc0:	1063      	asrs	r3, r4, #1
 800fbc2:	0852      	lsrs	r2, r2, #1
 800fbc4:	07e1      	lsls	r1, r4, #31
 800fbc6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fbca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fbce:	bf48      	it	mi
 800fbd0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fbd4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fbd8:	4614      	mov	r4, r2
 800fbda:	e781      	b.n	800fae0 <__ieee754_sqrt+0x34>
 800fbdc:	0ad9      	lsrs	r1, r3, #11
 800fbde:	3815      	subs	r0, #21
 800fbe0:	055b      	lsls	r3, r3, #21
 800fbe2:	2900      	cmp	r1, #0
 800fbe4:	d0fa      	beq.n	800fbdc <__ieee754_sqrt+0x130>
 800fbe6:	02cd      	lsls	r5, r1, #11
 800fbe8:	d50a      	bpl.n	800fc00 <__ieee754_sqrt+0x154>
 800fbea:	f1c2 0420 	rsb	r4, r2, #32
 800fbee:	fa23 f404 	lsr.w	r4, r3, r4
 800fbf2:	1e55      	subs	r5, r2, #1
 800fbf4:	4093      	lsls	r3, r2
 800fbf6:	4321      	orrs	r1, r4
 800fbf8:	1b42      	subs	r2, r0, r5
 800fbfa:	e78a      	b.n	800fb12 <__ieee754_sqrt+0x66>
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	e7f0      	b.n	800fbe2 <__ieee754_sqrt+0x136>
 800fc00:	0049      	lsls	r1, r1, #1
 800fc02:	3201      	adds	r2, #1
 800fc04:	e7ef      	b.n	800fbe6 <__ieee754_sqrt+0x13a>
 800fc06:	4680      	mov	r8, r0
 800fc08:	e7bd      	b.n	800fb86 <__ieee754_sqrt+0xda>
 800fc0a:	bf00      	nop
 800fc0c:	7ff00000 	.word	0x7ff00000

0800fc10 <with_errno>:
 800fc10:	b570      	push	{r4, r5, r6, lr}
 800fc12:	4604      	mov	r4, r0
 800fc14:	460d      	mov	r5, r1
 800fc16:	4616      	mov	r6, r2
 800fc18:	f7fa fb0e 	bl	800a238 <__errno>
 800fc1c:	4629      	mov	r1, r5
 800fc1e:	6006      	str	r6, [r0, #0]
 800fc20:	4620      	mov	r0, r4
 800fc22:	bd70      	pop	{r4, r5, r6, pc}

0800fc24 <xflow>:
 800fc24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc26:	4614      	mov	r4, r2
 800fc28:	461d      	mov	r5, r3
 800fc2a:	b108      	cbz	r0, 800fc30 <xflow+0xc>
 800fc2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fc30:	e9cd 2300 	strd	r2, r3, [sp]
 800fc34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc38:	4620      	mov	r0, r4
 800fc3a:	4629      	mov	r1, r5
 800fc3c:	f7f0 fcdc 	bl	80005f8 <__aeabi_dmul>
 800fc40:	2222      	movs	r2, #34	; 0x22
 800fc42:	b003      	add	sp, #12
 800fc44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc48:	f7ff bfe2 	b.w	800fc10 <with_errno>

0800fc4c <__math_uflow>:
 800fc4c:	b508      	push	{r3, lr}
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fc54:	f7ff ffe6 	bl	800fc24 <xflow>
 800fc58:	ec41 0b10 	vmov	d0, r0, r1
 800fc5c:	bd08      	pop	{r3, pc}

0800fc5e <__math_oflow>:
 800fc5e:	b508      	push	{r3, lr}
 800fc60:	2200      	movs	r2, #0
 800fc62:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fc66:	f7ff ffdd 	bl	800fc24 <xflow>
 800fc6a:	ec41 0b10 	vmov	d0, r0, r1
 800fc6e:	bd08      	pop	{r3, pc}

0800fc70 <finite>:
 800fc70:	b082      	sub	sp, #8
 800fc72:	ed8d 0b00 	vstr	d0, [sp]
 800fc76:	9801      	ldr	r0, [sp, #4]
 800fc78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fc7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fc80:	0fc0      	lsrs	r0, r0, #31
 800fc82:	b002      	add	sp, #8
 800fc84:	4770      	bx	lr
	...

0800fc88 <scalbn>:
 800fc88:	b570      	push	{r4, r5, r6, lr}
 800fc8a:	ec55 4b10 	vmov	r4, r5, d0
 800fc8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fc92:	4606      	mov	r6, r0
 800fc94:	462b      	mov	r3, r5
 800fc96:	b99a      	cbnz	r2, 800fcc0 <scalbn+0x38>
 800fc98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fc9c:	4323      	orrs	r3, r4
 800fc9e:	d036      	beq.n	800fd0e <scalbn+0x86>
 800fca0:	4b39      	ldr	r3, [pc, #228]	; (800fd88 <scalbn+0x100>)
 800fca2:	4629      	mov	r1, r5
 800fca4:	ee10 0a10 	vmov	r0, s0
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f7f0 fca5 	bl	80005f8 <__aeabi_dmul>
 800fcae:	4b37      	ldr	r3, [pc, #220]	; (800fd8c <scalbn+0x104>)
 800fcb0:	429e      	cmp	r6, r3
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	460d      	mov	r5, r1
 800fcb6:	da10      	bge.n	800fcda <scalbn+0x52>
 800fcb8:	a32b      	add	r3, pc, #172	; (adr r3, 800fd68 <scalbn+0xe0>)
 800fcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcbe:	e03a      	b.n	800fd36 <scalbn+0xae>
 800fcc0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fcc4:	428a      	cmp	r2, r1
 800fcc6:	d10c      	bne.n	800fce2 <scalbn+0x5a>
 800fcc8:	ee10 2a10 	vmov	r2, s0
 800fccc:	4620      	mov	r0, r4
 800fcce:	4629      	mov	r1, r5
 800fcd0:	f7f0 fadc 	bl	800028c <__adddf3>
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	460d      	mov	r5, r1
 800fcd8:	e019      	b.n	800fd0e <scalbn+0x86>
 800fcda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fcde:	460b      	mov	r3, r1
 800fce0:	3a36      	subs	r2, #54	; 0x36
 800fce2:	4432      	add	r2, r6
 800fce4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fce8:	428a      	cmp	r2, r1
 800fcea:	dd08      	ble.n	800fcfe <scalbn+0x76>
 800fcec:	2d00      	cmp	r5, #0
 800fcee:	a120      	add	r1, pc, #128	; (adr r1, 800fd70 <scalbn+0xe8>)
 800fcf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcf4:	da1c      	bge.n	800fd30 <scalbn+0xa8>
 800fcf6:	a120      	add	r1, pc, #128	; (adr r1, 800fd78 <scalbn+0xf0>)
 800fcf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcfc:	e018      	b.n	800fd30 <scalbn+0xa8>
 800fcfe:	2a00      	cmp	r2, #0
 800fd00:	dd08      	ble.n	800fd14 <scalbn+0x8c>
 800fd02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fd0e:	ec45 4b10 	vmov	d0, r4, r5
 800fd12:	bd70      	pop	{r4, r5, r6, pc}
 800fd14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fd18:	da19      	bge.n	800fd4e <scalbn+0xc6>
 800fd1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fd1e:	429e      	cmp	r6, r3
 800fd20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fd24:	dd0a      	ble.n	800fd3c <scalbn+0xb4>
 800fd26:	a112      	add	r1, pc, #72	; (adr r1, 800fd70 <scalbn+0xe8>)
 800fd28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1e2      	bne.n	800fcf6 <scalbn+0x6e>
 800fd30:	a30f      	add	r3, pc, #60	; (adr r3, 800fd70 <scalbn+0xe8>)
 800fd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd36:	f7f0 fc5f 	bl	80005f8 <__aeabi_dmul>
 800fd3a:	e7cb      	b.n	800fcd4 <scalbn+0x4c>
 800fd3c:	a10a      	add	r1, pc, #40	; (adr r1, 800fd68 <scalbn+0xe0>)
 800fd3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d0b8      	beq.n	800fcb8 <scalbn+0x30>
 800fd46:	a10e      	add	r1, pc, #56	; (adr r1, 800fd80 <scalbn+0xf8>)
 800fd48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd4c:	e7b4      	b.n	800fcb8 <scalbn+0x30>
 800fd4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd52:	3236      	adds	r2, #54	; 0x36
 800fd54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	4b0c      	ldr	r3, [pc, #48]	; (800fd90 <scalbn+0x108>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	e7e8      	b.n	800fd36 <scalbn+0xae>
 800fd64:	f3af 8000 	nop.w
 800fd68:	c2f8f359 	.word	0xc2f8f359
 800fd6c:	01a56e1f 	.word	0x01a56e1f
 800fd70:	8800759c 	.word	0x8800759c
 800fd74:	7e37e43c 	.word	0x7e37e43c
 800fd78:	8800759c 	.word	0x8800759c
 800fd7c:	fe37e43c 	.word	0xfe37e43c
 800fd80:	c2f8f359 	.word	0xc2f8f359
 800fd84:	81a56e1f 	.word	0x81a56e1f
 800fd88:	43500000 	.word	0x43500000
 800fd8c:	ffff3cb0 	.word	0xffff3cb0
 800fd90:	3c900000 	.word	0x3c900000

0800fd94 <_init>:
 800fd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd96:	bf00      	nop
 800fd98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd9a:	bc08      	pop	{r3}
 800fd9c:	469e      	mov	lr, r3
 800fd9e:	4770      	bx	lr

0800fda0 <_fini>:
 800fda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fda2:	bf00      	nop
 800fda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fda6:	bc08      	pop	{r3}
 800fda8:	469e      	mov	lr, r3
 800fdaa:	4770      	bx	lr
